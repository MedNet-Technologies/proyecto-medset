{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n'use strict';\n\nvar _inherits = require(\"D:/Guts/Documents/GitHub/proyecto-medset/medset/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"D:/Guts/Documents/GitHub/proyecto-medset/medset/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _classCallCheck = require(\"D:/Guts/Documents/GitHub/proyecto-medset/medset/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"D:/Guts/Documents/GitHub/proyecto-medset/medset/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar fs = require('fs');\nvar url = require('url');\nvar httpUtil = require('../http/util');\nvar io = require('../io');\nvar _require = require('../io/exec'),\n  exec = _require.exec;\nvar _require2 = require('../io/zip'),\n  Zip = _require2.Zip;\nvar cmd = require('../lib/command');\nvar input = require('../lib/input');\nvar net = require('../net');\nvar portprober = require('../net/portprober');\nvar logging = require('../lib/logging');\nvar _require3 = require('./util'),\n  getJavaPath = _require3.getJavaPath,\n  formatSpawnArgs = _require3.formatSpawnArgs;\n\n/**\n * @typedef {(string|!Array<string|number|!stream.Stream|null|undefined>)}\n */\nvar StdIoOptions; // eslint-disable-line\n\n/**\n * @typedef {(string|!IThenable<string>)}\n */\nvar CommandLineFlag; // eslint-disable-line\n\n/**\n * A record object that defines the configuration options for a DriverService\n * instance.\n *\n * @record\n */\nfunction ServiceOptions() {}\n\n/**\n * Whether the service should only be accessed on this host's loopback address.\n *\n * @type {(boolean|undefined)}\n */\nServiceOptions.prototype.loopback;\n\n/**\n * The host name to access the server on. If this option is specified, the\n * {@link #loopback} option will be ignored.\n *\n * @type {(string|undefined)}\n */\nServiceOptions.prototype.hostname;\n\n/**\n * The port to start the server on (must be > 0). If the port is provided as a\n * promise, the service will wait for the promise to resolve before starting.\n *\n * @type {(number|!IThenable<number>)}\n */\nServiceOptions.prototype.port;\n\n/**\n * The arguments to pass to the service. If a promise is provided, the service\n * will wait for it to resolve before starting.\n *\n * @type {!(Array<CommandLineFlag>|IThenable<!Array<CommandLineFlag>>)}\n */\nServiceOptions.prototype.args;\n\n/**\n * The base path on the server for the WebDriver wire protocol (e.g. '/wd/hub').\n * Defaults to '/'.\n *\n * @type {(string|undefined|null)}\n */\nServiceOptions.prototype.path;\n\n/**\n * The environment variables that should be visible to the server process.\n * Defaults to inheriting the current process's environment.\n *\n * @type {(Object<string, string>|undefined)}\n */\nServiceOptions.prototype.env;\n\n/**\n * IO configuration for the spawned server process. For more information, refer\n * to the documentation of `child_process.spawn`.\n *\n * @type {(StdIoOptions|undefined)}\n * @see https://nodejs.org/dist/latest-v4.x/docs/api/child_process.html#child_process_options_stdio\n */\nServiceOptions.prototype.stdio;\n\n/**\n * Manages the life and death of a native executable WebDriver server.\n *\n * It is expected that the driver server implements the\n * https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol.\n * Furthermore, the managed server should support multiple concurrent sessions,\n * so that this class may be reused for multiple clients.\n */\nvar DriverService = /*#__PURE__*/function () {\n  /**\n   * @param {string} executable Path to the executable to run.\n   * @param {!ServiceOptions} options Configuration options for the service.\n   */\n  function DriverService(executable, options) {\n    _classCallCheck(this, DriverService);\n    /** @private @const */\n    this.log_ = logging.getLogger('webdriver.DriverService');\n    /** @private {string} */\n    this.executable_ = executable;\n\n    /** @private {boolean} */\n    this.loopbackOnly_ = !!options.loopback;\n\n    /** @private {(string|undefined)} */\n    this.hostname_ = options.hostname;\n\n    /** @private {(number|!IThenable<number>)} */\n    this.port_ = options.port;\n\n    /**\n     * @private {!(Array<CommandLineFlag>|\n     *             IThenable<!Array<CommandLineFlag>>)}\n     */\n    this.args_ = options.args;\n\n    /** @private {string} */\n    this.path_ = options.path || '/';\n\n    /** @private {!Object<string, string>} */\n    this.env_ = options.env || process.env;\n\n    /**\n     * @private {(string|!Array<string|number|!stream.Stream|null|undefined>)}\n     */\n    this.stdio_ = options.stdio || 'ignore';\n\n    /**\n     * A promise for the managed subprocess, or null if the server has not been\n     * started yet. This promise will never be rejected.\n     * @private {Promise<!exec.Command>}\n     */\n    this.command_ = null;\n\n    /**\n     * Promise that resolves to the server's address or null if the server has\n     * not been started. This promise will be rejected if the server terminates\n     * before it starts accepting WebDriver requests.\n     * @private {Promise<string>}\n     */\n    this.address_ = null;\n  }\n  _createClass(DriverService, [{\n    key: \"getExecutable\",\n    value: function getExecutable() {\n      return this.executable_;\n    }\n  }, {\n    key: \"setExecutable\",\n    value: function setExecutable(value) {\n      this.executable_ = value;\n    }\n\n    /**\n     * @return {!Promise<string>} A promise that resolves to the server's address.\n     * @throws {Error} If the server has not been started.\n     */\n  }, {\n    key: \"address\",\n    value: function address() {\n      if (this.address_) {\n        return this.address_;\n      }\n      throw Error('Server has not been started.');\n    }\n\n    /**\n     * Returns whether the underlying process is still running. This does not take\n     * into account whether the process is in the process of shutting down.\n     * @return {boolean} Whether the underlying service process is running.\n     */\n  }, {\n    key: \"isRunning\",\n    value: function isRunning() {\n      return !!this.address_;\n    }\n\n    /**\n     * Starts the server if it is not already running.\n     * @param {number=} opt_timeoutMs How long to wait, in milliseconds, for the\n     *     server to start accepting requests. Defaults to 30 seconds.\n     * @return {!Promise<string>} A promise that will resolve to the server's base\n     *     URL when it has started accepting requests. If the timeout expires\n     *     before the server has started, the promise will be rejected.\n     */\n  }, {\n    key: \"start\",\n    value: function start(opt_timeoutMs) {\n      var _this = this;\n      if (this.address_) {\n        return this.address_;\n      }\n      var timeout = opt_timeoutMs || DriverService.DEFAULT_START_TIMEOUT_MS;\n      var self = this;\n      var resolveCommand;\n      this.command_ = new Promise(function (resolve) {\n        return resolveCommand = resolve;\n      });\n      this.address_ = new Promise(function (resolveAddress, rejectAddress) {\n        resolveAddress(Promise.resolve(_this.port_).then(function (port) {\n          if (port <= 0) {\n            throw Error('Port must be > 0: ' + port);\n          }\n          return resolveCommandLineFlags(_this.args_).then(function (args) {\n            var command = exec(self.executable_, {\n              args: args,\n              env: self.env_,\n              stdio: self.stdio_\n            });\n            resolveCommand(command);\n            var earlyTermination = command.result().then(function (result) {\n              var error = result.code == null ? Error('Server was killed with ' + result.signal) : Error('Server terminated early with status ' + result.code);\n              rejectAddress(error);\n              self.address_ = null;\n              self.command_ = null;\n              throw error;\n            });\n            var hostname = self.hostname_;\n            if (!hostname) {\n              hostname = !self.loopbackOnly_ && net.getAddress() || net.getLoopbackAddress();\n            }\n            var serverUrl = url.format({\n              protocol: 'http',\n              hostname: hostname,\n              port: port + '',\n              pathname: self.path_\n            });\n            return new Promise(function (fulfill, reject) {\n              var cancelToken = earlyTermination.catch(function (e) {\n                return reject(Error(e.message));\n              });\n              httpUtil.waitForServer(serverUrl, timeout, cancelToken).then(function (_) {\n                return fulfill(serverUrl);\n              }, function (err) {\n                if (err instanceof httpUtil.CancellationError) {\n                  fulfill(serverUrl);\n                } else {\n                  reject(err);\n                }\n              });\n            });\n          });\n        }));\n      });\n      return this.address_;\n    }\n\n    /**\n     * Stops the service if it is not currently running. This function will kill\n     * the server immediately. To synchronize with the active control flow, use\n     * {@link #stop()}.\n     * @return {!Promise} A promise that will be resolved when the server has been\n     *     stopped.\n     */\n  }, {\n    key: \"kill\",\n    value: function kill() {\n      if (!this.address_ || !this.command_) {\n        return Promise.resolve(); // Not currently running.\n      }\n\n      var cmd = this.command_;\n      this.address_ = null;\n      this.command_ = null;\n      return cmd.then(function (c) {\n        return c.kill('SIGTERM');\n      });\n    }\n  }]);\n  return DriverService;\n}();\n/**\n * @param {!(Array<CommandLineFlag>|IThenable<!Array<CommandLineFlag>>)} args\n * @return {!Promise<!Array<string>>}\n */\nfunction resolveCommandLineFlags(args) {\n  // Resolve the outer array, then the individual flags.\n  return Promise.resolve(args).then( /** !Array<CommandLineFlag> */function (args) {\n    return Promise.all(args);\n  });\n}\n\n/**\n * The default amount of time, in milliseconds, to wait for the server to\n * start.\n * @const {number}\n */\nDriverService.DEFAULT_START_TIMEOUT_MS = 30 * 1000;\n\n/**\n * Creates {@link DriverService} objects that manage a WebDriver server in a\n * child process.\n */\nDriverService.Builder = /*#__PURE__*/function () {\n  /**\n   * @param {string} exe Path to the executable to use. This executable must\n   *     accept the `--port` flag for defining the port to start the server on.\n   * @throws {Error} If the provided executable path does not exist.\n   */\n  function _class(exe) {\n    _classCallCheck(this, _class);\n    /** @private @const {string} */\n    this.exe_ = exe;\n\n    /** @private {!ServiceOptions} */\n    this.options_ = {\n      args: [],\n      port: 0,\n      env: null,\n      stdio: 'ignore'\n    };\n  }\n\n  /**\n   * Define additional command line arguments to use when starting the server.\n   *\n   * @param {...CommandLineFlag} var_args The arguments to include.\n   * @return {!THIS} A self reference.\n   * @this {THIS}\n   * @template THIS\n   */\n  _createClass(_class, [{\n    key: \"addArguments\",\n    value: function addArguments() {\n      for (var _len = arguments.length, arguments_ = new Array(_len), _key = 0; _key < _len; _key++) {\n        arguments_[_key] = arguments[_key];\n      }\n      this.options_.args = this.options_.args.concat(arguments_);\n      return this;\n    }\n\n    /**\n     * Sets the host name to access the server on. If specified, the\n     * {@linkplain #setLoopback() loopback} setting will be ignored.\n     *\n     * @param {string} hostname\n     * @return {!DriverService.Builder} A self reference.\n     */\n  }, {\n    key: \"setHostname\",\n    value: function setHostname(hostname) {\n      this.options_.hostname = hostname;\n      return this;\n    }\n\n    /**\n     * Sets whether the service should be accessed at this host's loopback\n     * address.\n     *\n     * @param {boolean} loopback\n     * @return {!DriverService.Builder} A self reference.\n     */\n  }, {\n    key: \"setLoopback\",\n    value: function setLoopback(loopback) {\n      this.options_.loopback = loopback;\n      return this;\n    }\n\n    /**\n     * Sets the base path for WebDriver REST commands (e.g. \"/wd/hub\").\n     * By default, the driver will accept commands relative to \"/\".\n     *\n     * @param {?string} basePath The base path to use, or `null` to use the\n     *     default.\n     * @return {!DriverService.Builder} A self reference.\n     */\n  }, {\n    key: \"setPath\",\n    value: function setPath(basePath) {\n      this.options_.path = basePath;\n      return this;\n    }\n\n    /**\n     * Sets the port to start the server on.\n     *\n     * @param {number} port The port to use, or 0 for any free port.\n     * @return {!DriverService.Builder} A self reference.\n     * @throws {Error} If an invalid port is specified.\n     */\n  }, {\n    key: \"setPort\",\n    value: function setPort(port) {\n      if (port < 0) {\n        throw Error(\"port must be >= 0: \".concat(port));\n      }\n      this.options_.port = port;\n      return this;\n    }\n\n    /**\n     * Defines the environment to start the server under. This setting will be\n     * inherited by every browser session started by the server. By default, the\n     * server will inherit the enviroment of the current process.\n     *\n     * @param {(Map<string, string>|Object<string, string>|null)} env The desired\n     *     environment to use, or `null` if the server should inherit the\n     *     current environment.\n     * @return {!DriverService.Builder} A self reference.\n     */\n  }, {\n    key: \"setEnvironment\",\n    value: function setEnvironment(env) {\n      if (env instanceof Map) {\n        var tmp = {};\n        env.forEach(function (value, key) {\n          return tmp[key] = value;\n        });\n        env = tmp;\n      }\n      this.options_.env = env;\n      return this;\n    }\n\n    /**\n     * IO configuration for the spawned server process. For more information,\n     * refer to the documentation of `child_process.spawn`.\n     *\n     * @param {StdIoOptions} config The desired IO configuration.\n     * @return {!DriverService.Builder} A self reference.\n     * @see https://nodejs.org/dist/latest-v4.x/docs/api/child_process.html#child_process_options_stdio\n     */\n  }, {\n    key: \"setStdio\",\n    value: function setStdio(config) {\n      this.options_.stdio = config;\n      return this;\n    }\n\n    /**\n     * Creates a new DriverService using this instance's current configuration.\n     *\n     * @return {!DriverService} A new driver service.\n     */\n  }, {\n    key: \"build\",\n    value: function build() {\n      var _this2 = this;\n      var port = this.options_.port || portprober.findFreePort();\n      var args = Promise.resolve(port).then(function (port) {\n        return _this2.options_.args.concat('--port=' + port);\n      });\n      var options = /** @type {!ServiceOptions} */\n      Object.assign({}, this.options_, {\n        args: args,\n        port: port\n      });\n      return new DriverService(this.exe_, options);\n    }\n  }]);\n  return _class;\n}();\n\n/**\n * Manages the life and death of the\n * <a href=\"https://www.selenium.dev/downloads/\">\n * standalone Selenium server</a>.\n */\nvar SeleniumServer = /*#__PURE__*/function (_DriverService) {\n  _inherits(SeleniumServer, _DriverService);\n  var _super = _createSuper(SeleniumServer);\n  /**\n   * @param {string} jar Path to the Selenium server jar.\n   * @param {SeleniumServer.Options=} opt_options Configuration options for the\n   *     server.\n   * @throws {Error} If the path to the Selenium jar is not specified or if an\n   *     invalid port is specified.\n   */\n  function SeleniumServer(jar, opt_options) {\n    _classCallCheck(this, SeleniumServer);\n    if (!jar) {\n      throw Error('Path to the Selenium jar not specified');\n    }\n    var options = opt_options || {};\n    if (options.port < 0) {\n      throw Error('Port must be >= 0: ' + options.port);\n    }\n    var port = options.port || portprober.findFreePort();\n    var args = Promise.all([port, options.jvmArgs || [], options.args || []]).then(function (resolved) {\n      var port = resolved[0];\n      var jvmArgs = resolved[1];\n      var args = resolved[2];\n      var fullArgsList = jvmArgs.concat('-jar', jar, '-port', port).concat(args);\n      return formatSpawnArgs(jar, fullArgsList);\n    });\n    var java = getJavaPath();\n    return _super.call(this, java, {\n      loopback: options.loopback,\n      port: port,\n      args: args,\n      path: '/wd/hub',\n      env: options.env,\n      stdio: options.stdio\n    });\n  }\n  return _createClass(SeleniumServer);\n}(DriverService);\n/**\n * A record object describing configuration options for a {@link SeleniumServer}\n * instance.\n *\n * @record\n */\nSeleniumServer.Options = /*#__PURE__*/function () {\n  function _class2() {\n    _classCallCheck(this, _class2);\n    /**\n     * Whether the server should only be accessible on this host's loopback\n     * address.\n     *\n     * @type {(boolean|undefined)}\n     */\n    this.loopback;\n\n    /**\n     * The port to start the server on (must be > 0). If the port is provided as\n     * a promise, the service will wait for the promise to resolve before\n     * starting.\n     *\n     * @type {(number|!IThenable<number>)}\n     */\n    this.port;\n\n    /**\n     * The arguments to pass to the service. If a promise is provided,\n     * the service will wait for it to resolve before starting.\n     *\n     * @type {!(Array<string>|IThenable<!Array<string>>)}\n     */\n    this.args;\n\n    /**\n     * The arguments to pass to the JVM. If a promise is provided,\n     * the service will wait for it to resolve before starting.\n     *\n     * @type {(!Array<string>|!IThenable<!Array<string>>|undefined)}\n     */\n    this.jvmArgs;\n\n    /**\n     * The environment variables that should be visible to the server\n     * process. Defaults to inheriting the current process's environment.\n     *\n     * @type {(!Object<string, string>|undefined)}\n     */\n    this.env;\n\n    /**\n     * IO configuration for the spawned server process. If unspecified, IO will\n     * be ignored.\n     *\n     * @type {(string|!Array<string|number|!stream.Stream|null|undefined>|\n     *         undefined)}\n     * @see <https://nodejs.org/dist/latest-v8.x/docs/api/child_process.html#child_process_options_stdio>\n     */\n    this.stdio;\n  }\n  return _createClass(_class2);\n}();\n\n/**\n * A {@link webdriver.FileDetector} that may be used when running\n * against a remote\n * [Selenium server](https://www.selenium.dev/downloads/).\n *\n * When a file path on the local machine running this script is entered with\n * {@link webdriver.WebElement#sendKeys WebElement#sendKeys}, this file detector\n * will transfer the specified file to the Selenium server's host; the sendKeys\n * command will be updated to use the transferred file's path.\n *\n * __Note:__ This class depends on a non-standard command supported on the\n * Java Selenium server. The file detector will fail if used with a server that\n * only supports standard WebDriver commands (such as the ChromeDriver).\n *\n * @final\n */\nvar FileDetector = /*#__PURE__*/function (_input$FileDetector) {\n  _inherits(FileDetector, _input$FileDetector);\n  var _super2 = _createSuper(FileDetector);\n  function FileDetector() {\n    _classCallCheck(this, FileDetector);\n    return _super2.apply(this, arguments);\n  }\n  _createClass(FileDetector, [{\n    key: \"handleFile\",\n    value:\n    /**\n     * Prepares a `file` for use with the remote browser. If the provided path\n     * does not reference a normal file (i.e. it does not exist or is a\n     * directory), then the promise returned by this method will be resolved with\n     * the original file path. Otherwise, this method will upload the file to the\n     * remote server, which will return the file's path on the remote system so\n     * it may be referenced in subsequent commands.\n     *\n     * @override\n     */\n    function handleFile(driver, file) {\n      return io.stat(file).then(function (stats) {\n        if (stats.isDirectory()) {\n          return file; // Not a valid file, return original input.\n        }\n\n        var zip = new Zip();\n        return zip.addFile(file).then(function () {\n          return zip.toBuffer();\n        }).then(function (buf) {\n          return buf.toString('base64');\n        }).then(function (encodedZip) {\n          var command = new cmd.Command(cmd.Name.UPLOAD_FILE).setParameter('file', encodedZip);\n          return driver.execute(command);\n        });\n      }, function (err) {\n        if (err.code === 'ENOENT') {\n          return file; // Not a file; return original input.\n        }\n\n        throw err;\n      });\n    }\n  }]);\n  return FileDetector;\n}(input.FileDetector); // PUBLIC API\nmodule.exports = {\n  DriverService: DriverService,\n  FileDetector: FileDetector,\n  SeleniumServer: SeleniumServer,\n  // Exported for API docs.\n  ServiceOptions: ServiceOptions\n};","map":{"version":3,"names":["_inherits","require","default","_createSuper","_classCallCheck","_createClass","fs","url","httpUtil","io","_require","exec","_require2","Zip","cmd","input","net","portprober","logging","_require3","getJavaPath","formatSpawnArgs","StdIoOptions","CommandLineFlag","ServiceOptions","prototype","loopback","hostname","port","args","path","env","stdio","DriverService","executable","options","log_","getLogger","executable_","loopbackOnly_","hostname_","port_","args_","path_","env_","process","stdio_","command_","address_","key","value","getExecutable","setExecutable","address","Error","isRunning","start","opt_timeoutMs","_this","timeout","DEFAULT_START_TIMEOUT_MS","self","resolveCommand","Promise","resolve","resolveAddress","rejectAddress","then","resolveCommandLineFlags","command","earlyTermination","result","error","code","signal","getAddress","getLoopbackAddress","serverUrl","format","protocol","pathname","fulfill","reject","cancelToken","catch","e","message","waitForServer","_","err","CancellationError","kill","c","all","Builder","_class","exe","exe_","options_","addArguments","_len","arguments","length","arguments_","Array","_key","concat","setHostname","setLoopback","setPath","basePath","setPort","setEnvironment","Map","tmp","forEach","setStdio","config","build","_this2","findFreePort","Object","assign","SeleniumServer","_DriverService","_super","jar","opt_options","jvmArgs","resolved","fullArgsList","java","call","Options","_class2","FileDetector","_input$FileDetector","_super2","apply","handleFile","driver","file","stat","stats","isDirectory","zip","addFile","toBuffer","buf","toString","encodedZip","Command","Name","UPLOAD_FILE","setParameter","execute","module","exports"],"sources":["D:/Guts/Documents/GitHub/proyecto-medset/medset/node_modules/selenium-webdriver/remote/index.js"],"sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n'use strict'\n\nconst fs = require('fs')\nconst url = require('url')\n\nconst httpUtil = require('../http/util')\nconst io = require('../io')\nconst { exec } = require('../io/exec')\nconst { Zip } = require('../io/zip')\nconst cmd = require('../lib/command')\nconst input = require('../lib/input')\nconst net = require('../net')\nconst portprober = require('../net/portprober')\nconst logging = require('../lib/logging')\n\nconst { getJavaPath, formatSpawnArgs } = require('./util')\n\n/**\n * @typedef {(string|!Array<string|number|!stream.Stream|null|undefined>)}\n */\nlet StdIoOptions // eslint-disable-line\n\n/**\n * @typedef {(string|!IThenable<string>)}\n */\nlet CommandLineFlag // eslint-disable-line\n\n/**\n * A record object that defines the configuration options for a DriverService\n * instance.\n *\n * @record\n */\nfunction ServiceOptions() {}\n\n/**\n * Whether the service should only be accessed on this host's loopback address.\n *\n * @type {(boolean|undefined)}\n */\nServiceOptions.prototype.loopback\n\n/**\n * The host name to access the server on. If this option is specified, the\n * {@link #loopback} option will be ignored.\n *\n * @type {(string|undefined)}\n */\nServiceOptions.prototype.hostname\n\n/**\n * The port to start the server on (must be > 0). If the port is provided as a\n * promise, the service will wait for the promise to resolve before starting.\n *\n * @type {(number|!IThenable<number>)}\n */\nServiceOptions.prototype.port\n\n/**\n * The arguments to pass to the service. If a promise is provided, the service\n * will wait for it to resolve before starting.\n *\n * @type {!(Array<CommandLineFlag>|IThenable<!Array<CommandLineFlag>>)}\n */\nServiceOptions.prototype.args\n\n/**\n * The base path on the server for the WebDriver wire protocol (e.g. '/wd/hub').\n * Defaults to '/'.\n *\n * @type {(string|undefined|null)}\n */\nServiceOptions.prototype.path\n\n/**\n * The environment variables that should be visible to the server process.\n * Defaults to inheriting the current process's environment.\n *\n * @type {(Object<string, string>|undefined)}\n */\nServiceOptions.prototype.env\n\n/**\n * IO configuration for the spawned server process. For more information, refer\n * to the documentation of `child_process.spawn`.\n *\n * @type {(StdIoOptions|undefined)}\n * @see https://nodejs.org/dist/latest-v4.x/docs/api/child_process.html#child_process_options_stdio\n */\nServiceOptions.prototype.stdio\n\n/**\n * Manages the life and death of a native executable WebDriver server.\n *\n * It is expected that the driver server implements the\n * https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol.\n * Furthermore, the managed server should support multiple concurrent sessions,\n * so that this class may be reused for multiple clients.\n */\nclass DriverService {\n  /**\n   * @param {string} executable Path to the executable to run.\n   * @param {!ServiceOptions} options Configuration options for the service.\n   */\n  constructor(executable, options) {\n    /** @private @const */\n    this.log_ = logging.getLogger('webdriver.DriverService')\n    /** @private {string} */\n    this.executable_ = executable\n\n    /** @private {boolean} */\n    this.loopbackOnly_ = !!options.loopback\n\n    /** @private {(string|undefined)} */\n    this.hostname_ = options.hostname\n\n    /** @private {(number|!IThenable<number>)} */\n    this.port_ = options.port\n\n    /**\n     * @private {!(Array<CommandLineFlag>|\n     *             IThenable<!Array<CommandLineFlag>>)}\n     */\n    this.args_ = options.args\n\n    /** @private {string} */\n    this.path_ = options.path || '/'\n\n    /** @private {!Object<string, string>} */\n    this.env_ = options.env || process.env\n\n    /**\n     * @private {(string|!Array<string|number|!stream.Stream|null|undefined>)}\n     */\n    this.stdio_ = options.stdio || 'ignore'\n\n    /**\n     * A promise for the managed subprocess, or null if the server has not been\n     * started yet. This promise will never be rejected.\n     * @private {Promise<!exec.Command>}\n     */\n    this.command_ = null\n\n    /**\n     * Promise that resolves to the server's address or null if the server has\n     * not been started. This promise will be rejected if the server terminates\n     * before it starts accepting WebDriver requests.\n     * @private {Promise<string>}\n     */\n    this.address_ = null\n  }\n\n  getExecutable() {\n    return this.executable_\n  }\n\n  setExecutable(value) {\n    this.executable_ = value\n  }\n\n  /**\n   * @return {!Promise<string>} A promise that resolves to the server's address.\n   * @throws {Error} If the server has not been started.\n   */\n  address() {\n    if (this.address_) {\n      return this.address_\n    }\n    throw Error('Server has not been started.')\n  }\n\n  /**\n   * Returns whether the underlying process is still running. This does not take\n   * into account whether the process is in the process of shutting down.\n   * @return {boolean} Whether the underlying service process is running.\n   */\n  isRunning() {\n    return !!this.address_\n  }\n\n  /**\n   * Starts the server if it is not already running.\n   * @param {number=} opt_timeoutMs How long to wait, in milliseconds, for the\n   *     server to start accepting requests. Defaults to 30 seconds.\n   * @return {!Promise<string>} A promise that will resolve to the server's base\n   *     URL when it has started accepting requests. If the timeout expires\n   *     before the server has started, the promise will be rejected.\n   */\n  start(opt_timeoutMs) {\n    if (this.address_) {\n      return this.address_\n    }\n\n    const timeout = opt_timeoutMs || DriverService.DEFAULT_START_TIMEOUT_MS\n    const self = this\n\n    let resolveCommand\n    this.command_ = new Promise((resolve) => (resolveCommand = resolve))\n\n    this.address_ = new Promise((resolveAddress, rejectAddress) => {\n      resolveAddress(\n        Promise.resolve(this.port_).then((port) => {\n          if (port <= 0) {\n            throw Error('Port must be > 0: ' + port)\n          }\n\n          return resolveCommandLineFlags(this.args_).then((args) => {\n            const command = exec(self.executable_, {\n              args: args,\n              env: self.env_,\n              stdio: self.stdio_,\n            })\n\n            resolveCommand(command)\n\n            const earlyTermination = command.result().then(function (result) {\n              const error =\n                result.code == null\n                  ? Error('Server was killed with ' + result.signal)\n                  : Error('Server terminated early with status ' + result.code)\n              rejectAddress(error)\n              self.address_ = null\n              self.command_ = null\n              throw error\n            })\n\n            let hostname = self.hostname_\n            if (!hostname) {\n              hostname =\n                (!self.loopbackOnly_ && net.getAddress()) ||\n                net.getLoopbackAddress()\n            }\n\n            const serverUrl = url.format({\n              protocol: 'http',\n              hostname: hostname,\n              port: port + '',\n              pathname: self.path_,\n            })\n\n            return new Promise((fulfill, reject) => {\n              let cancelToken = earlyTermination.catch((e) =>\n                reject(Error(e.message))\n              )\n\n              httpUtil.waitForServer(serverUrl, timeout, cancelToken).then(\n                (_) => fulfill(serverUrl),\n                (err) => {\n                  if (err instanceof httpUtil.CancellationError) {\n                    fulfill(serverUrl)\n                  } else {\n                    reject(err)\n                  }\n                }\n              )\n            })\n          })\n        })\n      )\n    })\n\n    return this.address_\n  }\n\n  /**\n   * Stops the service if it is not currently running. This function will kill\n   * the server immediately. To synchronize with the active control flow, use\n   * {@link #stop()}.\n   * @return {!Promise} A promise that will be resolved when the server has been\n   *     stopped.\n   */\n  kill() {\n    if (!this.address_ || !this.command_) {\n      return Promise.resolve() // Not currently running.\n    }\n    let cmd = this.command_\n    this.address_ = null\n    this.command_ = null\n    return cmd.then((c) => c.kill('SIGTERM'))\n  }\n}\n\n/**\n * @param {!(Array<CommandLineFlag>|IThenable<!Array<CommandLineFlag>>)} args\n * @return {!Promise<!Array<string>>}\n */\nfunction resolveCommandLineFlags(args) {\n  // Resolve the outer array, then the individual flags.\n  return Promise.resolve(args).then(\n    /** !Array<CommandLineFlag> */ (args) => Promise.all(args)\n  )\n}\n\n/**\n * The default amount of time, in milliseconds, to wait for the server to\n * start.\n * @const {number}\n */\nDriverService.DEFAULT_START_TIMEOUT_MS = 30 * 1000\n\n/**\n * Creates {@link DriverService} objects that manage a WebDriver server in a\n * child process.\n */\nDriverService.Builder = class {\n  /**\n   * @param {string} exe Path to the executable to use. This executable must\n   *     accept the `--port` flag for defining the port to start the server on.\n   * @throws {Error} If the provided executable path does not exist.\n   */\n  constructor(exe) {\n    /** @private @const {string} */\n    this.exe_ = exe\n\n    /** @private {!ServiceOptions} */\n    this.options_ = {\n      args: [],\n      port: 0,\n      env: null,\n      stdio: 'ignore',\n    }\n  }\n\n  /**\n   * Define additional command line arguments to use when starting the server.\n   *\n   * @param {...CommandLineFlag} var_args The arguments to include.\n   * @return {!THIS} A self reference.\n   * @this {THIS}\n   * @template THIS\n   */\n  addArguments(...arguments_) {\n    this.options_.args = this.options_.args.concat(arguments_)\n    return this\n  }\n\n  /**\n   * Sets the host name to access the server on. If specified, the\n   * {@linkplain #setLoopback() loopback} setting will be ignored.\n   *\n   * @param {string} hostname\n   * @return {!DriverService.Builder} A self reference.\n   */\n  setHostname(hostname) {\n    this.options_.hostname = hostname\n    return this\n  }\n\n  /**\n   * Sets whether the service should be accessed at this host's loopback\n   * address.\n   *\n   * @param {boolean} loopback\n   * @return {!DriverService.Builder} A self reference.\n   */\n  setLoopback(loopback) {\n    this.options_.loopback = loopback\n    return this\n  }\n\n  /**\n   * Sets the base path for WebDriver REST commands (e.g. \"/wd/hub\").\n   * By default, the driver will accept commands relative to \"/\".\n   *\n   * @param {?string} basePath The base path to use, or `null` to use the\n   *     default.\n   * @return {!DriverService.Builder} A self reference.\n   */\n  setPath(basePath) {\n    this.options_.path = basePath\n    return this\n  }\n\n  /**\n   * Sets the port to start the server on.\n   *\n   * @param {number} port The port to use, or 0 for any free port.\n   * @return {!DriverService.Builder} A self reference.\n   * @throws {Error} If an invalid port is specified.\n   */\n  setPort(port) {\n    if (port < 0) {\n      throw Error(`port must be >= 0: ${port}`)\n    }\n    this.options_.port = port\n    return this\n  }\n\n  /**\n   * Defines the environment to start the server under. This setting will be\n   * inherited by every browser session started by the server. By default, the\n   * server will inherit the enviroment of the current process.\n   *\n   * @param {(Map<string, string>|Object<string, string>|null)} env The desired\n   *     environment to use, or `null` if the server should inherit the\n   *     current environment.\n   * @return {!DriverService.Builder} A self reference.\n   */\n  setEnvironment(env) {\n    if (env instanceof Map) {\n      let tmp = {}\n      env.forEach((value, key) => (tmp[key] = value))\n      env = tmp\n    }\n    this.options_.env = env\n    return this\n  }\n\n  /**\n   * IO configuration for the spawned server process. For more information,\n   * refer to the documentation of `child_process.spawn`.\n   *\n   * @param {StdIoOptions} config The desired IO configuration.\n   * @return {!DriverService.Builder} A self reference.\n   * @see https://nodejs.org/dist/latest-v4.x/docs/api/child_process.html#child_process_options_stdio\n   */\n  setStdio(config) {\n    this.options_.stdio = config\n    return this\n  }\n\n  /**\n   * Creates a new DriverService using this instance's current configuration.\n   *\n   * @return {!DriverService} A new driver service.\n   */\n  build() {\n    let port = this.options_.port || portprober.findFreePort()\n    let args = Promise.resolve(port).then((port) => {\n      return this.options_.args.concat('--port=' + port)\n    })\n\n    let options =\n      /** @type {!ServiceOptions} */\n      (Object.assign({}, this.options_, { args, port }))\n    return new DriverService(this.exe_, options)\n  }\n}\n\n/**\n * Manages the life and death of the\n * <a href=\"https://www.selenium.dev/downloads/\">\n * standalone Selenium server</a>.\n */\nclass SeleniumServer extends DriverService {\n  /**\n   * @param {string} jar Path to the Selenium server jar.\n   * @param {SeleniumServer.Options=} opt_options Configuration options for the\n   *     server.\n   * @throws {Error} If the path to the Selenium jar is not specified or if an\n   *     invalid port is specified.\n   */\n  constructor(jar, opt_options) {\n    if (!jar) {\n      throw Error('Path to the Selenium jar not specified')\n    }\n\n    const options = opt_options || {}\n\n    if (options.port < 0) {\n      throw Error('Port must be >= 0: ' + options.port)\n    }\n\n    let port = options.port || portprober.findFreePort()\n    let args = Promise.all([\n      port,\n      options.jvmArgs || [],\n      options.args || [],\n    ]).then((resolved) => {\n      let port = resolved[0]\n      let jvmArgs = resolved[1]\n      let args = resolved[2]\n\n      const fullArgsList = jvmArgs\n        .concat('-jar', jar, '-port', port)\n        .concat(args)\n\n      return formatSpawnArgs(jar, fullArgsList)\n    })\n\n    const java = getJavaPath()\n\n    super(java, {\n      loopback: options.loopback,\n      port: port,\n      args: args,\n      path: '/wd/hub',\n      env: options.env,\n      stdio: options.stdio,\n    })\n  }\n}\n\n/**\n * A record object describing configuration options for a {@link SeleniumServer}\n * instance.\n *\n * @record\n */\nSeleniumServer.Options = class {\n  constructor() {\n    /**\n     * Whether the server should only be accessible on this host's loopback\n     * address.\n     *\n     * @type {(boolean|undefined)}\n     */\n    this.loopback\n\n    /**\n     * The port to start the server on (must be > 0). If the port is provided as\n     * a promise, the service will wait for the promise to resolve before\n     * starting.\n     *\n     * @type {(number|!IThenable<number>)}\n     */\n    this.port\n\n    /**\n     * The arguments to pass to the service. If a promise is provided,\n     * the service will wait for it to resolve before starting.\n     *\n     * @type {!(Array<string>|IThenable<!Array<string>>)}\n     */\n    this.args\n\n    /**\n     * The arguments to pass to the JVM. If a promise is provided,\n     * the service will wait for it to resolve before starting.\n     *\n     * @type {(!Array<string>|!IThenable<!Array<string>>|undefined)}\n     */\n    this.jvmArgs\n\n    /**\n     * The environment variables that should be visible to the server\n     * process. Defaults to inheriting the current process's environment.\n     *\n     * @type {(!Object<string, string>|undefined)}\n     */\n    this.env\n\n    /**\n     * IO configuration for the spawned server process. If unspecified, IO will\n     * be ignored.\n     *\n     * @type {(string|!Array<string|number|!stream.Stream|null|undefined>|\n     *         undefined)}\n     * @see <https://nodejs.org/dist/latest-v8.x/docs/api/child_process.html#child_process_options_stdio>\n     */\n    this.stdio\n  }\n}\n\n/**\n * A {@link webdriver.FileDetector} that may be used when running\n * against a remote\n * [Selenium server](https://www.selenium.dev/downloads/).\n *\n * When a file path on the local machine running this script is entered with\n * {@link webdriver.WebElement#sendKeys WebElement#sendKeys}, this file detector\n * will transfer the specified file to the Selenium server's host; the sendKeys\n * command will be updated to use the transferred file's path.\n *\n * __Note:__ This class depends on a non-standard command supported on the\n * Java Selenium server. The file detector will fail if used with a server that\n * only supports standard WebDriver commands (such as the ChromeDriver).\n *\n * @final\n */\nclass FileDetector extends input.FileDetector {\n  /**\n   * Prepares a `file` for use with the remote browser. If the provided path\n   * does not reference a normal file (i.e. it does not exist or is a\n   * directory), then the promise returned by this method will be resolved with\n   * the original file path. Otherwise, this method will upload the file to the\n   * remote server, which will return the file's path on the remote system so\n   * it may be referenced in subsequent commands.\n   *\n   * @override\n   */\n  handleFile(driver, file) {\n    return io.stat(file).then(\n      function (stats) {\n        if (stats.isDirectory()) {\n          return file // Not a valid file, return original input.\n        }\n\n        let zip = new Zip()\n        return zip\n          .addFile(file)\n          .then(() => zip.toBuffer())\n          .then((buf) => buf.toString('base64'))\n          .then((encodedZip) => {\n            let command = new cmd.Command(cmd.Name.UPLOAD_FILE).setParameter(\n              'file',\n              encodedZip\n            )\n            return driver.execute(command)\n          })\n      },\n      function (err) {\n        if (err.code === 'ENOENT') {\n          return file // Not a file; return original input.\n        }\n        throw err\n      }\n    )\n  }\n}\n\n// PUBLIC API\n\nmodule.exports = {\n  DriverService,\n  FileDetector,\n  SeleniumServer,\n  // Exported for API docs.\n  ServiceOptions,\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}