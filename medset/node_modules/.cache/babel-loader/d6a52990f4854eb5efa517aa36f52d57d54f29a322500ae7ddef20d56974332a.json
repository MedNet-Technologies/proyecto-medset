{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines a {@linkplain Driver WebDriver} client for\n * Microsoft's Edge web browser. Edge (Chromium) is supported and support\n * for Edge Legacy (EdgeHTML) as part of https://github.com/SeleniumHQ/selenium/issues/9166.\n * Before using this module, you must download and install the correct\n * [WebDriver](https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/) server.\n *\n * Ensure that the msedgedriver (Chromium)\n * is on your [PATH](http://en.wikipedia.org/wiki/PATH_%28variable%29).\n *\n * You may use {@link Options} to specify whether Edge Chromium options should be used:\n\n *     const edge = require('selenium-webdriver/edge');\n *     const options = new edge.Options();\n\n * There are three primary classes exported by this module:\n *\n * 1. {@linkplain ServiceBuilder}: configures the\n *     {@link ./remote.DriverService remote.DriverService}\n *     that manages the [WebDriver] child process.\n *\n * 2. {@linkplain Options}: defines configuration options for each new\n *     WebDriver session, such as which\n *     {@linkplain Options#setProxy proxy} to use when starting the browser.\n *\n * 3. {@linkplain Driver}: the WebDriver client; each new instance will control\n *     a unique browser session.\n *\n * __Customizing the WebDriver Server__ <a id=\"custom-server\"></a>\n *\n * By default, every MicrosoftEdge session will use a single driver service,\n * which is started the first time a {@link Driver} instance is created and\n * terminated when this process exits. The default service will inherit its\n * environment from the current process.\n * You may obtain a handle to this default service using\n * {@link #getDefaultService getDefaultService()} and change its configuration\n * with {@link #setDefaultService setDefaultService()}.\n *\n * You may also create a {@link Driver} with its own driver service. This is\n * useful if you need to capture the server's log output for a specific session:\n *\n *     const edge = require('selenium-webdriver/edge');\n *\n *     const service = new edge.ServiceBuilder()\n *         .setPort(55555)\n *         .build();\n *\n *     let options = new edge.Options();\n *     // configure browser options ...\n *\n *     let driver = edge.Driver.createSession(options, service);\n *\n * Users should only instantiate the {@link Driver} class directly when they\n * need a custom driver service configuration (as shown above). For normal\n * operation, users should start msedgedriver using the\n * {@link ./builder.Builder selenium-webdriver.Builder}.\n *\n * [WebDriver (Chromium)]: https://docs.microsoft.com/en-us/microsoft-edge/webdriver-chromium\n */\n\n'use strict';\n\nvar _get = require(\"D:/Guts/Documents/GitHub/proyecto-medset/medset/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"D:/Guts/Documents/GitHub/proyecto-medset/medset/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _createClass = require(\"D:/Guts/Documents/GitHub/proyecto-medset/medset/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _classCallCheck = require(\"D:/Guts/Documents/GitHub/proyecto-medset/medset/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _inherits = require(\"D:/Guts/Documents/GitHub/proyecto-medset/medset/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"D:/Guts/Documents/GitHub/proyecto-medset/medset/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _require = require('./lib/capabilities'),\n  Browser = _require.Browser;\nvar io = require('./io');\nvar chromium = require('./chromium');\n\n/**\n * Name of the EdgeDriver executable.\n * @type {string}\n * @const\n */\nvar EDGEDRIVER_CHROMIUM_EXE = process.platform === 'win32' ? 'msedgedriver.exe' : 'msedgedriver';\n\n/** @type {remote.DriverService} */\n\n/**\n * Creates {@link selenium-webdriver/remote.DriverService} instances that manage\n * a [MSEdgeDriver](https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/)\n * server in a child process.\n */\nvar ServiceBuilder = /*#__PURE__*/function (_chromium$ServiceBuil) {\n  _inherits(ServiceBuilder, _chromium$ServiceBuil);\n  var _super = _createSuper(ServiceBuilder);\n  /**\n   * @param {string=} opt_exe Path to the server executable to use. If omitted,\n   *     the builder will attempt to locate the msedgedriver on the current\n   *     PATH.\n   * @throws {Error} If provided executable does not exist, or the msedgedriver\n   *     cannot be found on the PATH.\n   */\n  function ServiceBuilder(opt_exe) {\n    var _this;\n    _classCallCheck(this, ServiceBuilder);\n    var exe = opt_exe || locateSynchronously();\n    _this = _super.call(this, exe);\n    _this.setLoopback(true);\n    return _this;\n  }\n  return _createClass(ServiceBuilder);\n}(chromium.ServiceBuilder);\n/**\n * Class for managing edge chromium specific options.\n */\nvar Options = /*#__PURE__*/function (_chromium$Options) {\n  _inherits(Options, _chromium$Options);\n  var _super2 = _createSuper(Options);\n  function Options() {\n    _classCallCheck(this, Options);\n    return _super2.apply(this, arguments);\n  }\n  _createClass(Options, [{\n    key: \"setEdgeChromiumBinaryPath\",\n    value:\n    /**\n     * Sets the path to the edge binary to use\n     *\n     * The binary path be absolute or relative to the msedgedriver server\n     * executable, but it must exist on the machine that will launch edge chromium.\n     *\n     * @param {string} path The path to the msedgedriver binary to use.\n     * @return {!Options} A self reference.\n     */\n    function setEdgeChromiumBinaryPath(path) {\n      return this.setBinaryPath(path);\n    }\n\n    /**\n     * Changes the browser name to 'webview2' to enable\n     * <a href=\"https://learn.microsoft.com/en-us/microsoft-edge/webview2/how-to/webdriver\">\n     *   test automation of WebView2 apps with Microsoft Edge WebDriver\n     * </a>\n     *\n     * @param {boolean} enable  flag to enable or disable the 'webview2' usage\n     */\n  }, {\n    key: \"useWebView\",\n    value: function useWebView(enable) {\n      var browserName = enable ? 'webview2' : Browser.EDGE;\n      return this.setBrowserName(browserName);\n    }\n  }]);\n  return Options;\n}(chromium.Options);\n/**\n * Creates a new WebDriver client for Microsoft's Edge.\n */\nvar Driver = /*#__PURE__*/function (_chromium$Driver) {\n  _inherits(Driver, _chromium$Driver);\n  var _super3 = _createSuper(Driver);\n  function Driver() {\n    _classCallCheck(this, Driver);\n    return _super3.apply(this, arguments);\n  }\n  _createClass(Driver, [{\n    key: \"setFileDetector\",\n    value:\n    /**\n     * This function is a no-op as file detectors are not supported by this\n     * implementation.\n     * @override\n     */\n    function setFileDetector() {}\n  }], [{\n    key: \"createSession\",\n    value:\n    /**\n     * Creates a new browser session for Microsoft's Edge browser.\n     *\n     * @param {(Capabilities|Options)=} opt_config The configuration options.\n     * @param {remote.DriverService=} opt_serviceExecutor The service to use; will create\n     *     a new Legacy or Chromium service based on {@linkplain Options} by default.\n     * @return {!Driver} A new driver instance.\n     */\n    function createSession(opt_config, opt_serviceExecutor) {\n      var caps = opt_config || new Options();\n      return (/** @type {!Driver} */_get(_getPrototypeOf(Driver), \"createSession\", this).call(this, caps, opt_serviceExecutor)\n      );\n    }\n\n    /**\n     * returns new instance of edge driver service\n     * @returns {remote.DriverService}\n     */\n  }, {\n    key: \"getDefaultService\",\n    value: function getDefaultService() {\n      return new ServiceBuilder().build();\n    }\n  }]);\n  return Driver;\n}(chromium.Driver);\n/**\n * _Synchronously_ attempts to locate the chromedriver executable on the current\n * system.\n *\n * @return {?string} the located executable, or `null`.\n */\nfunction locateSynchronously() {\n  return io.findInPath(EDGEDRIVER_CHROMIUM_EXE, true);\n}\nOptions.prototype.BROWSER_NAME_VALUE = Browser.EDGE;\nOptions.prototype.CAPABILITY_KEY = 'ms:edgeOptions';\nDriver.prototype.VENDOR_CAPABILITY_PREFIX = 'ms';\n\n// PUBLIC API\n\nmodule.exports = {\n  Driver: Driver,\n  Options: Options,\n  ServiceBuilder: ServiceBuilder,\n  locateSynchronously: locateSynchronously\n};","map":{"version":3,"names":["_get","require","default","_getPrototypeOf","_createClass","_classCallCheck","_inherits","_createSuper","_require","Browser","io","chromium","EDGEDRIVER_CHROMIUM_EXE","process","platform","ServiceBuilder","_chromium$ServiceBuil","_super","opt_exe","_this","exe","locateSynchronously","call","setLoopback","Options","_chromium$Options","_super2","apply","arguments","key","value","setEdgeChromiumBinaryPath","path","setBinaryPath","useWebView","enable","browserName","EDGE","setBrowserName","Driver","_chromium$Driver","_super3","setFileDetector","createSession","opt_config","opt_serviceExecutor","caps","getDefaultService","build","findInPath","prototype","BROWSER_NAME_VALUE","CAPABILITY_KEY","VENDOR_CAPABILITY_PREFIX","module","exports"],"sources":["D:/Guts/Documents/GitHub/proyecto-medset/medset/node_modules/selenium-webdriver/edge.js"],"sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines a {@linkplain Driver WebDriver} client for\n * Microsoft's Edge web browser. Edge (Chromium) is supported and support\n * for Edge Legacy (EdgeHTML) as part of https://github.com/SeleniumHQ/selenium/issues/9166.\n * Before using this module, you must download and install the correct\n * [WebDriver](https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/) server.\n *\n * Ensure that the msedgedriver (Chromium)\n * is on your [PATH](http://en.wikipedia.org/wiki/PATH_%28variable%29).\n *\n * You may use {@link Options} to specify whether Edge Chromium options should be used:\n\n *     const edge = require('selenium-webdriver/edge');\n *     const options = new edge.Options();\n\n * There are three primary classes exported by this module:\n *\n * 1. {@linkplain ServiceBuilder}: configures the\n *     {@link ./remote.DriverService remote.DriverService}\n *     that manages the [WebDriver] child process.\n *\n * 2. {@linkplain Options}: defines configuration options for each new\n *     WebDriver session, such as which\n *     {@linkplain Options#setProxy proxy} to use when starting the browser.\n *\n * 3. {@linkplain Driver}: the WebDriver client; each new instance will control\n *     a unique browser session.\n *\n * __Customizing the WebDriver Server__ <a id=\"custom-server\"></a>\n *\n * By default, every MicrosoftEdge session will use a single driver service,\n * which is started the first time a {@link Driver} instance is created and\n * terminated when this process exits. The default service will inherit its\n * environment from the current process.\n * You may obtain a handle to this default service using\n * {@link #getDefaultService getDefaultService()} and change its configuration\n * with {@link #setDefaultService setDefaultService()}.\n *\n * You may also create a {@link Driver} with its own driver service. This is\n * useful if you need to capture the server's log output for a specific session:\n *\n *     const edge = require('selenium-webdriver/edge');\n *\n *     const service = new edge.ServiceBuilder()\n *         .setPort(55555)\n *         .build();\n *\n *     let options = new edge.Options();\n *     // configure browser options ...\n *\n *     let driver = edge.Driver.createSession(options, service);\n *\n * Users should only instantiate the {@link Driver} class directly when they\n * need a custom driver service configuration (as shown above). For normal\n * operation, users should start msedgedriver using the\n * {@link ./builder.Builder selenium-webdriver.Builder}.\n *\n * [WebDriver (Chromium)]: https://docs.microsoft.com/en-us/microsoft-edge/webdriver-chromium\n */\n\n'use strict'\n\nconst { Browser } = require('./lib/capabilities')\nconst io = require('./io')\nconst chromium = require('./chromium')\n\n/**\n * Name of the EdgeDriver executable.\n * @type {string}\n * @const\n */\nconst EDGEDRIVER_CHROMIUM_EXE =\n  process.platform === 'win32' ? 'msedgedriver.exe' : 'msedgedriver'\n\n/** @type {remote.DriverService} */\n\n/**\n * Creates {@link selenium-webdriver/remote.DriverService} instances that manage\n * a [MSEdgeDriver](https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/)\n * server in a child process.\n */\nclass ServiceBuilder extends chromium.ServiceBuilder {\n  /**\n   * @param {string=} opt_exe Path to the server executable to use. If omitted,\n   *     the builder will attempt to locate the msedgedriver on the current\n   *     PATH.\n   * @throws {Error} If provided executable does not exist, or the msedgedriver\n   *     cannot be found on the PATH.\n   */\n  constructor(opt_exe) {\n    let exe = opt_exe || locateSynchronously()\n    super(exe)\n    this.setLoopback(true)\n  }\n}\n\n/**\n * Class for managing edge chromium specific options.\n */\nclass Options extends chromium.Options {\n  /**\n   * Sets the path to the edge binary to use\n   *\n   * The binary path be absolute or relative to the msedgedriver server\n   * executable, but it must exist on the machine that will launch edge chromium.\n   *\n   * @param {string} path The path to the msedgedriver binary to use.\n   * @return {!Options} A self reference.\n   */\n  setEdgeChromiumBinaryPath(path) {\n    return this.setBinaryPath(path)\n  }\n\n  /**\n   * Changes the browser name to 'webview2' to enable\n   * <a href=\"https://learn.microsoft.com/en-us/microsoft-edge/webview2/how-to/webdriver\">\n   *   test automation of WebView2 apps with Microsoft Edge WebDriver\n   * </a>\n   *\n   * @param {boolean} enable  flag to enable or disable the 'webview2' usage\n   */\n  useWebView(enable) {\n    const browserName = enable ? 'webview2' : Browser.EDGE\n    return this.setBrowserName(browserName)\n  }\n}\n\n/**\n * Creates a new WebDriver client for Microsoft's Edge.\n */\nclass Driver extends chromium.Driver {\n  /**\n   * Creates a new browser session for Microsoft's Edge browser.\n   *\n   * @param {(Capabilities|Options)=} opt_config The configuration options.\n   * @param {remote.DriverService=} opt_serviceExecutor The service to use; will create\n   *     a new Legacy or Chromium service based on {@linkplain Options} by default.\n   * @return {!Driver} A new driver instance.\n   */\n  static createSession(opt_config, opt_serviceExecutor) {\n    let caps = opt_config || new Options()\n    return /** @type {!Driver} */ (\n      super.createSession(caps, opt_serviceExecutor)\n    )\n  }\n\n  /**\n   * returns new instance of edge driver service\n   * @returns {remote.DriverService}\n   */\n  static getDefaultService() {\n    return new ServiceBuilder().build()\n  }\n\n  /**\n   * This function is a no-op as file detectors are not supported by this\n   * implementation.\n   * @override\n   */\n  setFileDetector() {}\n}\n\n/**\n * _Synchronously_ attempts to locate the chromedriver executable on the current\n * system.\n *\n * @return {?string} the located executable, or `null`.\n */\nfunction locateSynchronously() {\n  return io.findInPath(EDGEDRIVER_CHROMIUM_EXE, true)\n}\n\nOptions.prototype.BROWSER_NAME_VALUE = Browser.EDGE\nOptions.prototype.CAPABILITY_KEY = 'ms:edgeOptions'\nDriver.prototype.VENDOR_CAPABILITY_PREFIX = 'ms'\n\n// PUBLIC API\n\nmodule.exports = {\n  Driver,\n  Options,\n  ServiceBuilder,\n  locateSynchronously,\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}