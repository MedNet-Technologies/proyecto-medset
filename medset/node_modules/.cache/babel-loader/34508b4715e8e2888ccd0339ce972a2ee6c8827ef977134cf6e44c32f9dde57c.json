{"ast":null,"code":"const {\n  Options,\n  Builder\n} = require('selenium-webdriver');\nconst firefox = require('selenium-webdriver/firefox');\nconst path = require('path');\n\n// Set the path to the GeckoDriver executable\nconst geckoDriverPath = path.join(__dirname, '..', 'node_modules', 'geckodriver', 'geckodriver.exe');\n\n// Configure the Firefox browser options\nconst options = new firefox.Options();\noptions.setBinary(geckoDriverPath);\n\n// Create a new WebDriver instance with Firefox and the configured options\nconst driver = new Builder().forBrowser('firefox').setFirefoxOptions(options).build();\nasync function runSeleniumTest() {\n  // Create a new WebDriver instance\n  const driver = new Builder().forBrowser('firefox').build();\n  try {\n    // Navigate to the React app\n    await driver.get('http://localhost:3000/formulario_medicos');\n\n    // Fill in the form fields\n    await driver.findElement(By.id('first_name')).sendKeys('John');\n    await driver.findElement(By.id('last_name')).sendKeys('Doe');\n    await driver.findElement(By.id('specialization')).sendKeys('Cardiology');\n    await driver.findElement(By.id('geographic_location')).sendKeys('New York');\n    await driver.findElement(By.id('credentials')).sendKeys('MD', Key.RETURN);\n\n    // Wait for success alert to appear\n    await driver.wait(until.elementLocated(By.className('swal2-icon-success')), 5000);\n\n    // Print success message\n    console.log('Form submitted successfully.');\n  } catch (error) {\n    console.error('An error occurred:', error);\n  } finally {\n    // Quit the browser\n    await driver.quit();\n  }\n}\nrunSeleniumTest();","map":{"version":3,"names":["Options","Builder","require","firefox","path","geckoDriverPath","join","__dirname","options","setBinary","driver","forBrowser","setFirefoxOptions","build","runSeleniumTest","get","findElement","By","id","sendKeys","Key","RETURN","wait","until","elementLocated","className","console","log","error","quit"],"sources":["D:/Guts/Documents/GitHub/proyecto-medset/medset/src/seleniumAutomation.js"],"sourcesContent":["const { Options, Builder } = require('selenium-webdriver');\r\nconst firefox = require('selenium-webdriver/firefox');\r\nconst path = require('path');\r\n\r\n// Set the path to the GeckoDriver executable\r\nconst geckoDriverPath = path.join(__dirname, '..', 'node_modules', 'geckodriver', 'geckodriver.exe');\r\n\r\n// Configure the Firefox browser options\r\nconst options = new firefox.Options();\r\noptions.setBinary(geckoDriverPath);\r\n\r\n// Create a new WebDriver instance with Firefox and the configured options\r\nconst driver = new Builder()\r\n  .forBrowser('firefox')\r\n  .setFirefoxOptions(options)\r\n  .build();\r\n\r\n  \r\nasync function runSeleniumTest() {\r\n  // Create a new WebDriver instance\r\n  const driver = new Builder().forBrowser('firefox').build();\r\n\r\n  try {\r\n    // Navigate to the React app\r\n    await driver.get('http://localhost:3000/formulario_medicos');\r\n\r\n    // Fill in the form fields\r\n    await driver.findElement(By.id('first_name')).sendKeys('John');\r\n    await driver.findElement(By.id('last_name')).sendKeys('Doe');\r\n    await driver.findElement(By.id('specialization')).sendKeys('Cardiology');\r\n    await driver.findElement(By.id('geographic_location')).sendKeys('New York');\r\n    await driver.findElement(By.id('credentials')).sendKeys('MD', Key.RETURN);\r\n\r\n    // Wait for success alert to appear\r\n    await driver.wait(until.elementLocated(By.className('swal2-icon-success')), 5000);\r\n\r\n    // Print success message\r\n    console.log('Form submitted successfully.');\r\n\r\n  } catch (error) {\r\n    console.error('An error occurred:', error);\r\n\r\n  } finally {\r\n    // Quit the browser\r\n    await driver.quit();\r\n  }\r\n}\r\n\r\nrunSeleniumTest();\r\n"],"mappings":"AAAA,MAAM;EAAEA,OAAO;EAAEC;AAAQ,CAAC,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AAC1D,MAAMC,OAAO,GAAGD,OAAO,CAAC,4BAA4B,CAAC;AACrD,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;;AAE5B;AACA,MAAMG,eAAe,GAAGD,IAAI,CAACE,IAAI,CAACC,SAAS,EAAE,IAAI,EAAE,cAAc,EAAE,aAAa,EAAE,iBAAiB,CAAC;;AAEpG;AACA,MAAMC,OAAO,GAAG,IAAIL,OAAO,CAACH,OAAO,CAAC,CAAC;AACrCQ,OAAO,CAACC,SAAS,CAACJ,eAAe,CAAC;;AAElC;AACA,MAAMK,MAAM,GAAG,IAAIT,OAAO,CAAC,CAAC,CACzBU,UAAU,CAAC,SAAS,CAAC,CACrBC,iBAAiB,CAACJ,OAAO,CAAC,CAC1BK,KAAK,CAAC,CAAC;AAGV,eAAeC,eAAeA,CAAA,EAAG;EAC/B;EACA,MAAMJ,MAAM,GAAG,IAAIT,OAAO,CAAC,CAAC,CAACU,UAAU,CAAC,SAAS,CAAC,CAACE,KAAK,CAAC,CAAC;EAE1D,IAAI;IACF;IACA,MAAMH,MAAM,CAACK,GAAG,CAAC,0CAA0C,CAAC;;IAE5D;IACA,MAAML,MAAM,CAACM,WAAW,CAACC,EAAE,CAACC,EAAE,CAAC,YAAY,CAAC,CAAC,CAACC,QAAQ,CAAC,MAAM,CAAC;IAC9D,MAAMT,MAAM,CAACM,WAAW,CAACC,EAAE,CAACC,EAAE,CAAC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,KAAK,CAAC;IAC5D,MAAMT,MAAM,CAACM,WAAW,CAACC,EAAE,CAACC,EAAE,CAAC,gBAAgB,CAAC,CAAC,CAACC,QAAQ,CAAC,YAAY,CAAC;IACxE,MAAMT,MAAM,CAACM,WAAW,CAACC,EAAE,CAACC,EAAE,CAAC,qBAAqB,CAAC,CAAC,CAACC,QAAQ,CAAC,UAAU,CAAC;IAC3E,MAAMT,MAAM,CAACM,WAAW,CAACC,EAAE,CAACC,EAAE,CAAC,aAAa,CAAC,CAAC,CAACC,QAAQ,CAAC,IAAI,EAAEC,GAAG,CAACC,MAAM,CAAC;;IAEzE;IACA,MAAMX,MAAM,CAACY,IAAI,CAACC,KAAK,CAACC,cAAc,CAACP,EAAE,CAACQ,SAAS,CAAC,oBAAoB,CAAC,CAAC,EAAE,IAAI,CAAC;;IAEjF;IACAC,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;EAE7C,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;EAE5C,CAAC,SAAS;IACR;IACA,MAAMlB,MAAM,CAACmB,IAAI,CAAC,CAAC;EACrB;AACF;AAEAf,eAAe,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}