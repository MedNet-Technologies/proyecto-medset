{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview The main user facing module. Exports WebDriver's primary\n * public API and provides convenience assessors to certain sub-modules.\n */\n\n'use strict';\n\nvar _construct = require(\"D:/Guts/Documents/GitHub/proyecto-medset/medset/node_modules/@babel/runtime/helpers/construct.js\").default;\nvar _classCallCheck = require(\"D:/Guts/Documents/GitHub/proyecto-medset/medset/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"D:/Guts/Documents/GitHub/proyecto-medset/medset/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"D:/Guts/Documents/GitHub/proyecto-medset/medset/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"D:/Guts/Documents/GitHub/proyecto-medset/medset/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _http = require('./http');\nvar by = require('./lib/by');\nvar capabilities = require('./lib/capabilities');\nvar chrome = require('./chrome');\nvar edge = require('./edge');\nvar error = require('./lib/error');\nvar firefox = require('./firefox');\nvar ie = require('./ie');\nvar input = require('./lib/input');\nvar logging = require('./lib/logging');\nvar promise = require('./lib/promise');\nvar remote = require('./remote');\nvar safari = require('./safari');\nvar session = require('./lib/session');\nvar until = require('./lib/until');\nvar webdriver = require('./lib/webdriver');\nvar select = require('./lib/select');\nvar LogInspector = require('./bidi/logInspector');\nvar BrowsingContext = require('./bidi/browsingContext');\nvar BrowsingConextInspector = require('./bidi/browsingContextInspector');\nvar ScriptManager = require('./bidi/scriptManager');\nvar Browser = capabilities.Browser;\nvar Capabilities = capabilities.Capabilities;\nvar Capability = capabilities.Capability;\nvar WebDriver = webdriver.WebDriver;\nvar seleniumServer;\n\n/**\n * Starts an instance of the Selenium server if not yet running.\n * @param {string} jar Path to the server jar to use.\n * @return {!Promise<string>} A promise for the server's\n *     address once started.\n */\nfunction startSeleniumServer(jar) {\n  if (!seleniumServer) {\n    seleniumServer = new remote.SeleniumServer(jar);\n  }\n  return seleniumServer.start();\n}\n\n/**\n * {@linkplain webdriver.WebDriver#setFileDetector WebDriver's setFileDetector}\n * method uses a non-standard command to transfer files from the local client\n * to the remote end hosting the browser. Many of the WebDriver sub-types, like\n * the {@link chrome.Driver} and {@link firefox.Driver}, do not support this\n * command. Thus, these classes override the `setFileDetector` to no-op.\n *\n * This function uses a mixin to re-enable `setFileDetector` by calling the\n * original method on the WebDriver prototype directly. This is used only when\n * the builder creates a Chrome or Firefox instance that communicates with a\n * remote end (and thus, support for remote file detectors is unknown).\n *\n * @param {function(new: webdriver.WebDriver, ...?)} ctor\n * @return {function(new: webdriver.WebDriver, ...?)}\n */\nfunction ensureFileDetectorsAreEnabled(ctor) {\n  return /*#__PURE__*/function (_ctor) {\n    _inherits(_class, _ctor);\n    var _super = _createSuper(_class);\n    function _class() {\n      _classCallCheck(this, _class);\n      return _super.apply(this, arguments);\n    }\n    _createClass(_class, [{\n      key: \"setFileDetector\",\n      value: /** @param {input.FileDetector} detector */\n      function setFileDetector(detector) {\n        webdriver.WebDriver.prototype.setFileDetector.call(this, detector);\n      }\n    }]);\n    return _class;\n  }(ctor);\n}\n\n/**\n * A thenable wrapper around a {@linkplain webdriver.IWebDriver IWebDriver}\n * instance that allows commands to be issued directly instead of having to\n * repeatedly call `then`:\n *\n *     let driver = new Builder().build();\n *     driver.then(d => d.get(url));  // You can do this...\n *     driver.get(url);               // ...or this\n *\n * If the driver instance fails to resolve (e.g. the session cannot be created),\n * every issued command will fail.\n *\n * @extends {webdriver.IWebDriver}\n * @extends {IThenable<!webdriver.IWebDriver>}\n * @interface\n */\nvar ThenableWebDriver = /*#__PURE__*/function () {\n  function ThenableWebDriver() {\n    _classCallCheck(this, ThenableWebDriver);\n  }\n  _createClass(ThenableWebDriver, null, [{\n    key: \"createSession\",\n    value: /** @param {...?} args */\n    function createSession() {} // eslint-disable-line\n  }]);\n  return ThenableWebDriver;\n}();\n/**\n * @const {!Map<function(new: WebDriver, !IThenable<!Session>, ...?),\n *              function(new: ThenableWebDriver, !IThenable<!Session>, ...?)>}\n */\nvar THENABLE_DRIVERS = new Map();\n\n/**\n * @param {function(new: WebDriver, !IThenable<!Session>, ...?)} ctor\n * @param {...?} args\n * @return {!ThenableWebDriver}\n */\nfunction createDriver(ctor) {\n  var _thenableWebDriverPro;\n  var thenableWebDriverProxy = THENABLE_DRIVERS.get(ctor);\n  if (!thenableWebDriverProxy) {\n    /**\n     * @extends {WebDriver}  // Needed since `ctor` is dynamically typed.\n     * @implements {ThenableWebDriver}\n     */\n    thenableWebDriverProxy = /*#__PURE__*/function (_ctor2) {\n      _inherits(thenableWebDriverProxy, _ctor2);\n      var _super2 = _createSuper(thenableWebDriverProxy);\n      /**\n       * @param {!IThenable<!Session>} session\n       * @param {...?} rest\n       */\n      function thenableWebDriverProxy(session) {\n        var _this;\n        for (var _len2 = arguments.length, rest = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n          rest[_key2 - 1] = arguments[_key2];\n        }\n        _classCallCheck(this, thenableWebDriverProxy);\n        _this = _super2.call.apply(_super2, [this, session].concat(rest));\n        var pd = _this.getSession().then(function (session) {\n          return _construct(ctor, [session].concat(rest));\n        });\n\n        /** @override */\n        _this.then = pd.then.bind(pd);\n\n        /** @override */\n        _this.catch = pd.catch.bind(pd);\n        return _this;\n      }\n      return _createClass(thenableWebDriverProxy);\n    }(ctor);\n    THENABLE_DRIVERS.set(ctor, thenableWebDriverProxy);\n  }\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n  return (_thenableWebDriverPro = thenableWebDriverProxy).createSession.apply(_thenableWebDriverPro, args);\n}\n\n/**\n * Creates new {@link webdriver.WebDriver WebDriver} instances. The environment\n * variables listed below may be used to override a builder's configuration,\n * allowing quick runtime changes.\n *\n * - {@code SELENIUM_BROWSER}: defines the target browser in the form\n *   {@code browser[:version][:platform]}.\n *\n * - {@code SELENIUM_REMOTE_URL}: defines the remote URL for all builder\n *   instances. This environment variable should be set to a fully qualified\n *   URL for a WebDriver server (e.g. http://localhost:4444/wd/hub). This\n *   option always takes precedence over {@code SELENIUM_SERVER_JAR}.\n *\n * - {@code SELENIUM_SERVER_JAR}: defines the path to the\n *   <a href=\"https://www.selenium.dev/downloads/\">\n *   standalone Selenium server</a> jar to use. The server will be started the\n *   first time a WebDriver instance and be killed when the process exits.\n *\n * Suppose you had mytest.js that created WebDriver with\n *\n *     var driver = new webdriver.Builder()\n *         .forBrowser('chrome')\n *         .build();\n *\n * This test could be made to use Firefox on the local machine by running with\n * `SELENIUM_BROWSER=firefox node mytest.js`. Rather than change the code to\n * target Google Chrome on a remote machine, you can simply set the\n * `SELENIUM_BROWSER` and `SELENIUM_REMOTE_URL` environment variables:\n *\n *     SELENIUM_BROWSER=chrome:36:LINUX \\\n *     SELENIUM_REMOTE_URL=http://www.example.com:4444/wd/hub \\\n *     node mytest.js\n *\n * You could also use a local copy of the standalone Selenium server:\n *\n *     SELENIUM_BROWSER=chrome:36:LINUX \\\n *     SELENIUM_SERVER_JAR=/path/to/selenium-server-standalone.jar \\\n *     node mytest.js\n */\nvar Builder = /*#__PURE__*/function () {\n  function Builder() {\n    _classCallCheck(this, Builder);\n    /** @private @const */\n    this.log_ = logging.getLogger('webdriver.Builder');\n\n    /** @private {string} */\n    this.url_ = '';\n\n    /** @private {?string} */\n    this.proxy_ = null;\n\n    /** @private {!Capabilities} */\n    this.capabilities_ = new Capabilities();\n\n    /** @private {chrome.Options} */\n    this.chromeOptions_ = null;\n\n    /** @private {chrome.ServiceBuilder} */\n    this.chromeService_ = null;\n\n    /** @private {firefox.Options} */\n    this.firefoxOptions_ = null;\n\n    /** @private {firefox.ServiceBuilder} */\n    this.firefoxService_ = null;\n\n    /** @private {ie.Options} */\n    this.ieOptions_ = null;\n\n    /** @private {ie.ServiceBuilder} */\n    this.ieService_ = null;\n\n    /** @private {safari.Options} */\n    this.safariOptions_ = null;\n\n    /** @private {edge.Options} */\n    this.edgeOptions_ = null;\n\n    /** @private {remote.DriverService.Builder} */\n    this.edgeService_ = null;\n\n    /** @private {boolean} */\n    this.ignoreEnv_ = false;\n\n    /** @private {http.Agent} */\n    this.agent_ = null;\n  }\n\n  /**\n   * Configures this builder to ignore any environment variable overrides and to\n   * only use the configuration specified through this instance's API.\n   *\n   * @return {!Builder} A self reference.\n   */\n  _createClass(Builder, [{\n    key: \"disableEnvironmentOverrides\",\n    value: function disableEnvironmentOverrides() {\n      this.ignoreEnv_ = true;\n      return this;\n    }\n\n    /**\n     * Sets the URL of a remote WebDriver server to use. Once a remote URL has\n     * been specified, the builder direct all new clients to that server. If this\n     * method is never called, the Builder will attempt to create all clients\n     * locally.\n     *\n     * As an alternative to this method, you may also set the\n     * `SELENIUM_REMOTE_URL` environment variable.\n     *\n     * @param {string} url The URL of a remote server to use.\n     * @return {!Builder} A self reference.\n     */\n  }, {\n    key: \"usingServer\",\n    value: function usingServer(url) {\n      this.url_ = url;\n      return this;\n    }\n\n    /**\n     * @return {string} The URL of the WebDriver server this instance is\n     *     configured to use.\n     */\n  }, {\n    key: \"getServerUrl\",\n    value: function getServerUrl() {\n      return this.url_;\n    }\n\n    /**\n     * Sets the URL of the proxy to use for the WebDriver's HTTP connections.\n     * If this method is never called, the Builder will create a connection\n     * without a proxy.\n     *\n     * @param {string} proxy The URL of a proxy to use.\n     * @return {!Builder} A self reference.\n     */\n  }, {\n    key: \"usingWebDriverProxy\",\n    value: function usingWebDriverProxy(proxy) {\n      this.proxy_ = proxy;\n      return this;\n    }\n\n    /**\n     * @return {?string} The URL of the proxy server to use for the WebDriver's\n     *    HTTP connections, or `null` if not set.\n     */\n  }, {\n    key: \"getWebDriverProxy\",\n    value: function getWebDriverProxy() {\n      return this.proxy_;\n    }\n\n    /**\n     * Sets the http agent to use for each request.\n     * If this method is not called, the Builder will use http.globalAgent by default.\n     *\n     * @param {http.Agent} agent The agent to use for each request.\n     * @return {!Builder} A self reference.\n     */\n  }, {\n    key: \"usingHttpAgent\",\n    value: function usingHttpAgent(agent) {\n      this.agent_ = agent;\n      return this;\n    }\n\n    /**\n     * @return {http.Agent} The http agent used for each request\n     */\n  }, {\n    key: \"getHttpAgent\",\n    value: function getHttpAgent() {\n      return this.agent_;\n    }\n\n    /**\n     * Recommended way is to use set*Options where * is the browser(eg setChromeOptions)\n     *\n     * Sets the desired capabilities when requesting a new session. This will\n     * overwrite any previously set capabilities.\n     * @param {!(Object|Capabilities)} capabilities The desired capabilities for\n     *     a new session.\n     * @return {!Builder} A self reference.\n     */\n  }, {\n    key: \"withCapabilities\",\n    value: function withCapabilities(capabilities) {\n      this.capabilities_ = new Capabilities(capabilities);\n      return this;\n    }\n\n    /**\n     * Returns the base set of capabilities this instance is currently configured\n     * to use.\n     * @return {!Capabilities} The current capabilities for this builder.\n     */\n  }, {\n    key: \"getCapabilities\",\n    value: function getCapabilities() {\n      return this.capabilities_;\n    }\n\n    /**\n     * Sets the desired capability when requesting a new session.\n     * If there is already a capability named key, its value will be overwritten with value.\n     * This is a convenience wrapper around builder.getCapabilities().set(key, value) to support Builder method chaining.\n     * @param {string} key The capability key.\n     * @param {*} value The capability value.\n     * @return {!Builder} A self reference.\n     */\n  }, {\n    key: \"setCapability\",\n    value: function setCapability(key, value) {\n      this.capabilities_.set(key, value);\n      return this;\n    }\n\n    /**\n     * Configures the target browser for clients created by this instance.\n     * Any calls to {@link #withCapabilities} after this function will\n     * overwrite these settings.\n     *\n     * You may also define the target browser using the {@code SELENIUM_BROWSER}\n     * environment variable. If set, this environment variable should be of the\n     * form `browser[:[version][:platform]]`.\n     *\n     * @param {(string|!Browser)} name The name of the target browser;\n     *     common defaults are available on the {@link webdriver.Browser} enum.\n     * @param {string=} opt_version A desired version; may be omitted if any\n     *     version should be used.\n     * @param {(string|!capabilities.Platform)=} opt_platform\n     *     The desired platform; may be omitted if any platform may be used.\n     * @return {!Builder} A self reference.\n     */\n  }, {\n    key: \"forBrowser\",\n    value: function forBrowser(name, opt_version, opt_platform) {\n      this.capabilities_.setBrowserName(name);\n      if (opt_version) {\n        this.capabilities_.setBrowserVersion(opt_version);\n      }\n      if (opt_platform) {\n        this.capabilities_.setPlatform(opt_platform);\n      }\n      return this;\n    }\n\n    /**\n     * Sets the proxy configuration for the target browser.\n     * Any calls to {@link #withCapabilities} after this function will\n     * overwrite these settings.\n     *\n     * @param {!./lib/proxy.Config} config The configuration to use.\n     * @return {!Builder} A self reference.\n     */\n  }, {\n    key: \"setProxy\",\n    value: function setProxy(config) {\n      this.capabilities_.setProxy(config);\n      return this;\n    }\n\n    /**\n     * Sets the logging preferences for the created session. Preferences may be\n     * changed by repeated calls, or by calling {@link #withCapabilities}.\n     * @param {!(./lib/logging.Preferences|Object<string, string>)} prefs The\n     *     desired logging preferences.\n     * @return {!Builder} A self reference.\n     */\n  }, {\n    key: \"setLoggingPrefs\",\n    value: function setLoggingPrefs(prefs) {\n      this.capabilities_.setLoggingPrefs(prefs);\n      return this;\n    }\n\n    /**\n     * Sets the default action to take with an unexpected alert before returning\n     * an error.\n     *\n     * @param {?capabilities.UserPromptHandler} behavior The desired behavior.\n     * @return {!Builder} A self reference.\n     * @see capabilities.Capabilities#setAlertBehavior\n     */\n  }, {\n    key: \"setAlertBehavior\",\n    value: function setAlertBehavior(behavior) {\n      this.capabilities_.setAlertBehavior(behavior);\n      return this;\n    }\n\n    /**\n     * Sets Chrome specific {@linkplain chrome.Options options} for drivers\n     * created by this builder. Any logging or proxy settings defined on the given\n     * options will take precedence over those set through\n     * {@link #setLoggingPrefs} and {@link #setProxy}, respectively.\n     *\n     * @param {!chrome.Options} options The ChromeDriver options to use.\n     * @return {!Builder} A self reference.\n     */\n  }, {\n    key: \"setChromeOptions\",\n    value: function setChromeOptions(options) {\n      this.chromeOptions_ = options;\n      return this;\n    }\n\n    /**\n     * @return {chrome.Options} the Chrome specific options currently configured\n     *     for this builder.\n     */\n  }, {\n    key: \"getChromeOptions\",\n    value: function getChromeOptions() {\n      return this.chromeOptions_;\n    }\n\n    /**\n     * Sets the service builder to use for managing the chromedriver child process\n     * when creating new Chrome sessions.\n     *\n     * @param {chrome.ServiceBuilder} service the service to use.\n     * @return {!Builder} A self reference.\n     */\n  }, {\n    key: \"setChromeService\",\n    value: function setChromeService(service) {\n      if (service && !(service instanceof chrome.ServiceBuilder)) {\n        throw TypeError('not a chrome.ServiceBuilder object');\n      }\n      this.chromeService_ = service;\n      return this;\n    }\n\n    /**\n     * Sets Firefox specific {@linkplain firefox.Options options} for drivers\n     * created by this builder. Any logging or proxy settings defined on the given\n     * options will take precedence over those set through\n     * {@link #setLoggingPrefs} and {@link #setProxy}, respectively.\n     *\n     * @param {!firefox.Options} options The FirefoxDriver options to use.\n     * @return {!Builder} A self reference.\n     */\n  }, {\n    key: \"setFirefoxOptions\",\n    value: function setFirefoxOptions(options) {\n      this.firefoxOptions_ = options;\n      return this;\n    }\n\n    /**\n     * @return {firefox.Options} the Firefox specific options currently configured\n     *     for this instance.\n     */\n  }, {\n    key: \"getFirefoxOptions\",\n    value: function getFirefoxOptions() {\n      return this.firefoxOptions_;\n    }\n\n    /**\n     * Sets the {@link firefox.ServiceBuilder} to use to manage the geckodriver\n     * child process when creating Firefox sessions locally.\n     *\n     * @param {firefox.ServiceBuilder} service the service to use.\n     * @return {!Builder} a self reference.\n     */\n  }, {\n    key: \"setFirefoxService\",\n    value: function setFirefoxService(service) {\n      if (service && !(service instanceof firefox.ServiceBuilder)) {\n        throw TypeError('not a firefox.ServiceBuilder object');\n      }\n      this.firefoxService_ = service;\n      return this;\n    }\n\n    /**\n     * Set Internet Explorer specific {@linkplain ie.Options options} for drivers\n     * created by this builder. Any proxy settings defined on the given options\n     * will take precedence over those set through {@link #setProxy}.\n     *\n     * @param {!ie.Options} options The IEDriver options to use.\n     * @return {!Builder} A self reference.\n     */\n  }, {\n    key: \"setIeOptions\",\n    value: function setIeOptions(options) {\n      this.ieOptions_ = options;\n      return this;\n    }\n\n    /**\n     * Sets the {@link ie.ServiceBuilder} to use to manage the geckodriver\n     * child process when creating IE sessions locally.\n     *\n     * @param {ie.ServiceBuilder} service the service to use.\n     * @return {!Builder} a self reference.\n     */\n  }, {\n    key: \"setIeService\",\n    value: function setIeService(service) {\n      this.ieService_ = service;\n      return this;\n    }\n\n    /**\n     * Set {@linkplain edge.Options options} specific to Microsoft's Edge browser\n     * for drivers created by this builder. Any proxy settings defined on the\n     * given options will take precedence over those set through\n     * {@link #setProxy}.\n     *\n     * @param {!edge.Options} options The MicrosoftEdgeDriver options to use.\n     * @return {!Builder} A self reference.\n     */\n  }, {\n    key: \"setEdgeOptions\",\n    value: function setEdgeOptions(options) {\n      this.edgeOptions_ = options;\n      return this;\n    }\n\n    /**\n     * Sets the {@link edge.ServiceBuilder} to use to manage the\n     * MicrosoftEdgeDriver child process when creating sessions locally.\n     *\n     * @param {edge.ServiceBuilder} service the service to use.\n     * @return {!Builder} a self reference.\n     */\n  }, {\n    key: \"setEdgeService\",\n    value: function setEdgeService(service) {\n      if (service && !(service instanceof edge.ServiceBuilder)) {\n        throw TypeError('not a edge.ServiceBuilder object');\n      }\n      this.edgeService_ = service;\n      return this;\n    }\n\n    /**\n     * Sets Safari specific {@linkplain safari.Options options} for drivers\n     * created by this builder. Any logging settings defined on the given options\n     * will take precedence over those set through {@link #setLoggingPrefs}.\n     *\n     * @param {!safari.Options} options The Safari options to use.\n     * @return {!Builder} A self reference.\n     */\n  }, {\n    key: \"setSafariOptions\",\n    value: function setSafariOptions(options) {\n      this.safariOptions_ = options;\n      return this;\n    }\n\n    /**\n     * @return {safari.Options} the Safari specific options currently configured\n     *     for this instance.\n     */\n  }, {\n    key: \"getSafariOptions\",\n    value: function getSafariOptions() {\n      return this.safariOptions_;\n    }\n\n    /**\n     * Creates a new WebDriver client based on this builder's current\n     * configuration.\n     *\n     * This method will return a {@linkplain ThenableWebDriver} instance, allowing\n     * users to issue commands directly without calling `then()`. The returned\n     * thenable wraps a promise that will resolve to a concrete\n     * {@linkplain webdriver.WebDriver WebDriver} instance. The promise will be\n     * rejected if the remote end fails to create a new session.\n     *\n     * @return {!ThenableWebDriver} A new WebDriver instance.\n     * @throws {Error} If the current configuration is invalid.\n     */\n  }, {\n    key: \"build\",\n    value: function build() {\n      var _this2 = this;\n      // Create a copy for any changes we may need to make based on the current\n      // environment.\n      var capabilities = new Capabilities(this.capabilities_);\n      var browser;\n      if (!this.ignoreEnv_ && process.env.SELENIUM_BROWSER) {\n        this.log_.fine(\"SELENIUM_BROWSER=\".concat(process.env.SELENIUM_BROWSER));\n        browser = process.env.SELENIUM_BROWSER.split(/:/, 3);\n        capabilities.setBrowserName(browser[0]);\n        browser[1] && capabilities.setBrowserVersion(browser[1]);\n        browser[2] && capabilities.setPlatform(browser[2]);\n      }\n      browser = capabilities.get(Capability.BROWSER_NAME);\n      if (typeof browser !== 'string') {\n        throw TypeError(\"Target browser must be a string, but is <\".concat(typeof browser, \">;\") + ' did you forget to call forBrowser()?');\n      }\n      if (browser === 'ie') {\n        browser = Browser.INTERNET_EXPLORER;\n      }\n\n      // Apply browser specific overrides.\n      if (browser === Browser.CHROME && this.chromeOptions_) {\n        capabilities.merge(this.chromeOptions_);\n      } else if (browser === Browser.FIREFOX && this.firefoxOptions_) {\n        capabilities.merge(this.firefoxOptions_);\n      } else if (browser === Browser.INTERNET_EXPLORER && this.ieOptions_) {\n        capabilities.merge(this.ieOptions_);\n      } else if (browser === Browser.SAFARI && this.safariOptions_) {\n        capabilities.merge(this.safariOptions_);\n      } else if (browser === Browser.EDGE && this.edgeOptions_) {\n        capabilities.merge(this.edgeOptions_);\n      }\n      checkOptions(capabilities, 'chromeOptions', chrome.Options, 'setChromeOptions');\n      checkOptions(capabilities, 'moz:firefoxOptions', firefox.Options, 'setFirefoxOptions');\n      checkOptions(capabilities, 'safari.options', safari.Options, 'setSafariOptions');\n\n      // Check for a remote browser.\n      var url = this.url_;\n      if (!this.ignoreEnv_) {\n        if (process.env.SELENIUM_REMOTE_URL) {\n          this.log_.fine(\"SELENIUM_REMOTE_URL=\".concat(process.env.SELENIUM_REMOTE_URL));\n          url = process.env.SELENIUM_REMOTE_URL;\n        } else if (process.env.SELENIUM_SERVER_JAR) {\n          this.log_.fine(\"SELENIUM_SERVER_JAR=\".concat(process.env.SELENIUM_SERVER_JAR));\n          url = startSeleniumServer(process.env.SELENIUM_SERVER_JAR);\n        }\n      }\n      if (url) {\n        this.log_.fine('Creating session on remote server');\n        var client = Promise.resolve(url).then(function (url) {\n          return new _http.HttpClient(url, _this2.agent_, _this2.proxy_);\n        });\n        var executor = new _http.Executor(client);\n        if (browser === Browser.CHROME) {\n          var driver = ensureFileDetectorsAreEnabled(chrome.Driver);\n          return createDriver(driver, capabilities, executor);\n        }\n        if (browser === Browser.FIREFOX) {\n          var _driver = ensureFileDetectorsAreEnabled(firefox.Driver);\n          return createDriver(_driver, capabilities, executor);\n        }\n        return createDriver(WebDriver, executor, capabilities);\n      }\n\n      // Check for a native browser.\n      switch (browser) {\n        case Browser.CHROME:\n          {\n            var service = null;\n            if (this.chromeService_) {\n              service = this.chromeService_.build();\n            }\n            return createDriver(chrome.Driver, capabilities, service);\n          }\n        case Browser.FIREFOX:\n          {\n            var _service = null;\n            if (this.firefoxService_) {\n              _service = this.firefoxService_.build();\n            }\n            return createDriver(firefox.Driver, capabilities, _service);\n          }\n        case Browser.INTERNET_EXPLORER:\n          {\n            var _service2 = null;\n            if (this.ieService_) {\n              _service2 = this.ieService_.build();\n            }\n            return createDriver(ie.Driver, capabilities, _service2);\n          }\n        case Browser.EDGE:\n          {\n            var _service3 = null;\n            if (this.edgeService_) {\n              _service3 = this.edgeService_.build();\n            }\n            return createDriver(edge.Driver, capabilities, _service3);\n          }\n        case Browser.SAFARI:\n          return createDriver(safari.Driver, capabilities);\n        default:\n          throw new Error('Do not know how to build driver: ' + browser + '; did you forget to call usingServer(url)?');\n      }\n    }\n  }]);\n  return Builder;\n}();\n/**\n * In the 3.x releases, the various browser option classes\n * (e.g. firefox.Options) had to be manually set as an option using the\n * Capabilties class:\n *\n *     let ffo = new firefox.Options();\n *     // Configure firefox options...\n *\n *     let caps = new Capabilities();\n *     caps.set('moz:firefoxOptions', ffo);\n *\n *     let driver = new Builder()\n *         .withCapabilities(caps)\n *         .build();\n *\n * The options are now subclasses of Capabilities and can be used directly. A\n * direct translation of the above is:\n *\n *     let ffo = new firefox.Options();\n *     // Configure firefox options...\n *\n *     let driver = new Builder()\n *         .withCapabilities(ffo)\n *         .build();\n *\n * You can also set the options for various browsers at once and let the builder\n * choose the correct set at runtime (see Builder docs above):\n *\n *     let ffo = new firefox.Options();\n *     // Configure ...\n *\n *     let co = new chrome.Options();\n *     // Configure ...\n *\n *     let driver = new Builder()\n *         .setChromeOptions(co)\n *         .setFirefoxOptions(ffo)\n *         .build();\n *\n * @param {!Capabilities} caps\n * @param {string} key\n * @param {function(new: Capabilities)} optionType\n * @param {string} setMethod\n * @throws {error.InvalidArgumentError}\n */\nfunction checkOptions(caps, key, optionType, setMethod) {\n  var val = caps.get(key);\n  if (val instanceof optionType) {\n    throw new error.InvalidArgumentError('Options class extends Capabilities and should not be set as key ' + \"\\\"\".concat(key, \"\\\"; set browser-specific options with \") + \"Builder.\".concat(setMethod, \"(). For more information, see the \") + 'documentation attached to the function that threw this error');\n  }\n}\n\n// PUBLIC API\n\nexports.Browser = capabilities.Browser;\nexports.Builder = Builder;\nexports.Button = input.Button;\nexports.By = by.By;\nexports.RelativeBy = by.RelativeBy;\nexports.withTagName = by.withTagName;\nexports.locateWith = by.locateWith;\nexports.Capabilities = capabilities.Capabilities;\nexports.Capability = capabilities.Capability;\nexports.Condition = webdriver.Condition;\nexports.FileDetector = input.FileDetector;\nexports.Key = input.Key;\nexports.Origin = input.Origin;\nexports.Session = session.Session;\nexports.ThenableWebDriver = ThenableWebDriver;\nexports.WebDriver = webdriver.WebDriver;\nexports.WebElement = webdriver.WebElement;\nexports.WebElementCondition = webdriver.WebElementCondition;\nexports.WebElementPromise = webdriver.WebElementPromise;\nexports.error = error;\nexports.logging = logging;\nexports.promise = promise;\nexports.until = until;\nexports.Select = select.Select;\nexports.LogInspector = LogInspector;\nexports.BrowsingContext = BrowsingContext;\nexports.BrowsingConextInspector = BrowsingConextInspector;\nexports.ScriptManager = ScriptManager;","map":{"version":3,"names":["_construct","require","default","_classCallCheck","_createClass","_inherits","_createSuper","_http","by","capabilities","chrome","edge","error","firefox","ie","input","logging","promise","remote","safari","session","until","webdriver","select","LogInspector","BrowsingContext","BrowsingConextInspector","ScriptManager","Browser","Capabilities","Capability","WebDriver","seleniumServer","startSeleniumServer","jar","SeleniumServer","start","ensureFileDetectorsAreEnabled","ctor","_ctor","_class","_super","apply","arguments","key","value","setFileDetector","detector","prototype","call","ThenableWebDriver","createSession","THENABLE_DRIVERS","Map","createDriver","_thenableWebDriverPro","thenableWebDriverProxy","get","_ctor2","_super2","_this","_len2","length","rest","Array","_key2","concat","pd","getSession","then","bind","catch","set","_len","args","_key","Builder","log_","getLogger","url_","proxy_","capabilities_","chromeOptions_","chromeService_","firefoxOptions_","firefoxService_","ieOptions_","ieService_","safariOptions_","edgeOptions_","edgeService_","ignoreEnv_","agent_","disableEnvironmentOverrides","usingServer","url","getServerUrl","usingWebDriverProxy","proxy","getWebDriverProxy","usingHttpAgent","agent","getHttpAgent","withCapabilities","getCapabilities","setCapability","forBrowser","name","opt_version","opt_platform","setBrowserName","setBrowserVersion","setPlatform","setProxy","config","setLoggingPrefs","prefs","setAlertBehavior","behavior","setChromeOptions","options","getChromeOptions","setChromeService","service","ServiceBuilder","TypeError","setFirefoxOptions","getFirefoxOptions","setFirefoxService","setIeOptions","setIeService","setEdgeOptions","setEdgeService","setSafariOptions","getSafariOptions","build","_this2","browser","process","env","SELENIUM_BROWSER","fine","split","BROWSER_NAME","INTERNET_EXPLORER","CHROME","merge","FIREFOX","SAFARI","EDGE","checkOptions","Options","SELENIUM_REMOTE_URL","SELENIUM_SERVER_JAR","client","Promise","resolve","HttpClient","executor","Executor","driver","Driver","Error","caps","optionType","setMethod","val","InvalidArgumentError","exports","Button","By","RelativeBy","withTagName","locateWith","Condition","FileDetector","Key","Origin","Session","WebElement","WebElementCondition","WebElementPromise","Select"],"sources":["D:/Guts/Documents/GitHub/proyecto-medset/medset/node_modules/selenium-webdriver/index.js"],"sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview The main user facing module. Exports WebDriver's primary\n * public API and provides convenience assessors to certain sub-modules.\n */\n\n'use strict'\n\nconst _http = require('./http')\nconst by = require('./lib/by')\nconst capabilities = require('./lib/capabilities')\nconst chrome = require('./chrome')\nconst edge = require('./edge')\nconst error = require('./lib/error')\nconst firefox = require('./firefox')\nconst ie = require('./ie')\nconst input = require('./lib/input')\nconst logging = require('./lib/logging')\nconst promise = require('./lib/promise')\nconst remote = require('./remote')\nconst safari = require('./safari')\nconst session = require('./lib/session')\nconst until = require('./lib/until')\nconst webdriver = require('./lib/webdriver')\nconst select = require('./lib/select')\nconst LogInspector = require('./bidi/logInspector')\nconst BrowsingContext = require('./bidi/browsingContext')\nconst BrowsingConextInspector = require('./bidi/browsingContextInspector')\nconst ScriptManager = require('./bidi/scriptManager')\n\nconst Browser = capabilities.Browser\nconst Capabilities = capabilities.Capabilities\nconst Capability = capabilities.Capability\nconst WebDriver = webdriver.WebDriver\n\nlet seleniumServer\n\n/**\n * Starts an instance of the Selenium server if not yet running.\n * @param {string} jar Path to the server jar to use.\n * @return {!Promise<string>} A promise for the server's\n *     address once started.\n */\nfunction startSeleniumServer(jar) {\n  if (!seleniumServer) {\n    seleniumServer = new remote.SeleniumServer(jar)\n  }\n  return seleniumServer.start()\n}\n\n/**\n * {@linkplain webdriver.WebDriver#setFileDetector WebDriver's setFileDetector}\n * method uses a non-standard command to transfer files from the local client\n * to the remote end hosting the browser. Many of the WebDriver sub-types, like\n * the {@link chrome.Driver} and {@link firefox.Driver}, do not support this\n * command. Thus, these classes override the `setFileDetector` to no-op.\n *\n * This function uses a mixin to re-enable `setFileDetector` by calling the\n * original method on the WebDriver prototype directly. This is used only when\n * the builder creates a Chrome or Firefox instance that communicates with a\n * remote end (and thus, support for remote file detectors is unknown).\n *\n * @param {function(new: webdriver.WebDriver, ...?)} ctor\n * @return {function(new: webdriver.WebDriver, ...?)}\n */\nfunction ensureFileDetectorsAreEnabled(ctor) {\n  return class extends ctor {\n    /** @param {input.FileDetector} detector */\n    setFileDetector(detector) {\n      webdriver.WebDriver.prototype.setFileDetector.call(this, detector)\n    }\n  }\n}\n\n/**\n * A thenable wrapper around a {@linkplain webdriver.IWebDriver IWebDriver}\n * instance that allows commands to be issued directly instead of having to\n * repeatedly call `then`:\n *\n *     let driver = new Builder().build();\n *     driver.then(d => d.get(url));  // You can do this...\n *     driver.get(url);               // ...or this\n *\n * If the driver instance fails to resolve (e.g. the session cannot be created),\n * every issued command will fail.\n *\n * @extends {webdriver.IWebDriver}\n * @extends {IThenable<!webdriver.IWebDriver>}\n * @interface\n */\nclass ThenableWebDriver {\n  /** @param {...?} args */\n  static createSession(...args) {} // eslint-disable-line\n}\n\n/**\n * @const {!Map<function(new: WebDriver, !IThenable<!Session>, ...?),\n *              function(new: ThenableWebDriver, !IThenable<!Session>, ...?)>}\n */\nconst THENABLE_DRIVERS = new Map()\n\n/**\n * @param {function(new: WebDriver, !IThenable<!Session>, ...?)} ctor\n * @param {...?} args\n * @return {!ThenableWebDriver}\n */\nfunction createDriver(ctor, ...args) {\n  let thenableWebDriverProxy = THENABLE_DRIVERS.get(ctor)\n  if (!thenableWebDriverProxy) {\n    /**\n     * @extends {WebDriver}  // Needed since `ctor` is dynamically typed.\n     * @implements {ThenableWebDriver}\n     */\n    thenableWebDriverProxy = class extends ctor {\n      /**\n       * @param {!IThenable<!Session>} session\n       * @param {...?} rest\n       */\n      constructor(session, ...rest) {\n        super(session, ...rest)\n\n        const pd = this.getSession().then((session) => {\n          return new ctor(session, ...rest)\n        })\n\n        /** @override */\n        this.then = pd.then.bind(pd)\n\n        /** @override */\n        this.catch = pd.catch.bind(pd)\n      }\n    }\n    THENABLE_DRIVERS.set(ctor, thenableWebDriverProxy)\n  }\n  return thenableWebDriverProxy.createSession(...args)\n}\n\n/**\n * Creates new {@link webdriver.WebDriver WebDriver} instances. The environment\n * variables listed below may be used to override a builder's configuration,\n * allowing quick runtime changes.\n *\n * - {@code SELENIUM_BROWSER}: defines the target browser in the form\n *   {@code browser[:version][:platform]}.\n *\n * - {@code SELENIUM_REMOTE_URL}: defines the remote URL for all builder\n *   instances. This environment variable should be set to a fully qualified\n *   URL for a WebDriver server (e.g. http://localhost:4444/wd/hub). This\n *   option always takes precedence over {@code SELENIUM_SERVER_JAR}.\n *\n * - {@code SELENIUM_SERVER_JAR}: defines the path to the\n *   <a href=\"https://www.selenium.dev/downloads/\">\n *   standalone Selenium server</a> jar to use. The server will be started the\n *   first time a WebDriver instance and be killed when the process exits.\n *\n * Suppose you had mytest.js that created WebDriver with\n *\n *     var driver = new webdriver.Builder()\n *         .forBrowser('chrome')\n *         .build();\n *\n * This test could be made to use Firefox on the local machine by running with\n * `SELENIUM_BROWSER=firefox node mytest.js`. Rather than change the code to\n * target Google Chrome on a remote machine, you can simply set the\n * `SELENIUM_BROWSER` and `SELENIUM_REMOTE_URL` environment variables:\n *\n *     SELENIUM_BROWSER=chrome:36:LINUX \\\n *     SELENIUM_REMOTE_URL=http://www.example.com:4444/wd/hub \\\n *     node mytest.js\n *\n * You could also use a local copy of the standalone Selenium server:\n *\n *     SELENIUM_BROWSER=chrome:36:LINUX \\\n *     SELENIUM_SERVER_JAR=/path/to/selenium-server-standalone.jar \\\n *     node mytest.js\n */\nclass Builder {\n  constructor() {\n    /** @private @const */\n    this.log_ = logging.getLogger('webdriver.Builder')\n\n    /** @private {string} */\n    this.url_ = ''\n\n    /** @private {?string} */\n    this.proxy_ = null\n\n    /** @private {!Capabilities} */\n    this.capabilities_ = new Capabilities()\n\n    /** @private {chrome.Options} */\n    this.chromeOptions_ = null\n\n    /** @private {chrome.ServiceBuilder} */\n    this.chromeService_ = null\n\n    /** @private {firefox.Options} */\n    this.firefoxOptions_ = null\n\n    /** @private {firefox.ServiceBuilder} */\n    this.firefoxService_ = null\n\n    /** @private {ie.Options} */\n    this.ieOptions_ = null\n\n    /** @private {ie.ServiceBuilder} */\n    this.ieService_ = null\n\n    /** @private {safari.Options} */\n    this.safariOptions_ = null\n\n    /** @private {edge.Options} */\n    this.edgeOptions_ = null\n\n    /** @private {remote.DriverService.Builder} */\n    this.edgeService_ = null\n\n    /** @private {boolean} */\n    this.ignoreEnv_ = false\n\n    /** @private {http.Agent} */\n    this.agent_ = null\n  }\n\n  /**\n   * Configures this builder to ignore any environment variable overrides and to\n   * only use the configuration specified through this instance's API.\n   *\n   * @return {!Builder} A self reference.\n   */\n  disableEnvironmentOverrides() {\n    this.ignoreEnv_ = true\n    return this\n  }\n\n  /**\n   * Sets the URL of a remote WebDriver server to use. Once a remote URL has\n   * been specified, the builder direct all new clients to that server. If this\n   * method is never called, the Builder will attempt to create all clients\n   * locally.\n   *\n   * As an alternative to this method, you may also set the\n   * `SELENIUM_REMOTE_URL` environment variable.\n   *\n   * @param {string} url The URL of a remote server to use.\n   * @return {!Builder} A self reference.\n   */\n  usingServer(url) {\n    this.url_ = url\n    return this\n  }\n\n  /**\n   * @return {string} The URL of the WebDriver server this instance is\n   *     configured to use.\n   */\n  getServerUrl() {\n    return this.url_\n  }\n\n  /**\n   * Sets the URL of the proxy to use for the WebDriver's HTTP connections.\n   * If this method is never called, the Builder will create a connection\n   * without a proxy.\n   *\n   * @param {string} proxy The URL of a proxy to use.\n   * @return {!Builder} A self reference.\n   */\n  usingWebDriverProxy(proxy) {\n    this.proxy_ = proxy\n    return this\n  }\n\n  /**\n   * @return {?string} The URL of the proxy server to use for the WebDriver's\n   *    HTTP connections, or `null` if not set.\n   */\n  getWebDriverProxy() {\n    return this.proxy_\n  }\n\n  /**\n   * Sets the http agent to use for each request.\n   * If this method is not called, the Builder will use http.globalAgent by default.\n   *\n   * @param {http.Agent} agent The agent to use for each request.\n   * @return {!Builder} A self reference.\n   */\n  usingHttpAgent(agent) {\n    this.agent_ = agent\n    return this\n  }\n\n  /**\n   * @return {http.Agent} The http agent used for each request\n   */\n  getHttpAgent() {\n    return this.agent_\n  }\n\n  /**\n   * Recommended way is to use set*Options where * is the browser(eg setChromeOptions)\n   *\n   * Sets the desired capabilities when requesting a new session. This will\n   * overwrite any previously set capabilities.\n   * @param {!(Object|Capabilities)} capabilities The desired capabilities for\n   *     a new session.\n   * @return {!Builder} A self reference.\n   */\n  withCapabilities(capabilities) {\n    this.capabilities_ = new Capabilities(capabilities)\n    return this\n  }\n\n  /**\n   * Returns the base set of capabilities this instance is currently configured\n   * to use.\n   * @return {!Capabilities} The current capabilities for this builder.\n   */\n  getCapabilities() {\n    return this.capabilities_\n  }\n\n  /**\n   * Sets the desired capability when requesting a new session.\n   * If there is already a capability named key, its value will be overwritten with value.\n   * This is a convenience wrapper around builder.getCapabilities().set(key, value) to support Builder method chaining.\n   * @param {string} key The capability key.\n   * @param {*} value The capability value.\n   * @return {!Builder} A self reference.\n   */\n  setCapability(key, value) {\n    this.capabilities_.set(key, value)\n    return this\n  }\n\n  /**\n   * Configures the target browser for clients created by this instance.\n   * Any calls to {@link #withCapabilities} after this function will\n   * overwrite these settings.\n   *\n   * You may also define the target browser using the {@code SELENIUM_BROWSER}\n   * environment variable. If set, this environment variable should be of the\n   * form `browser[:[version][:platform]]`.\n   *\n   * @param {(string|!Browser)} name The name of the target browser;\n   *     common defaults are available on the {@link webdriver.Browser} enum.\n   * @param {string=} opt_version A desired version; may be omitted if any\n   *     version should be used.\n   * @param {(string|!capabilities.Platform)=} opt_platform\n   *     The desired platform; may be omitted if any platform may be used.\n   * @return {!Builder} A self reference.\n   */\n  forBrowser(name, opt_version, opt_platform) {\n    this.capabilities_.setBrowserName(name)\n    if (opt_version) {\n      this.capabilities_.setBrowserVersion(opt_version)\n    }\n    if (opt_platform) {\n      this.capabilities_.setPlatform(opt_platform)\n    }\n    return this\n  }\n\n  /**\n   * Sets the proxy configuration for the target browser.\n   * Any calls to {@link #withCapabilities} after this function will\n   * overwrite these settings.\n   *\n   * @param {!./lib/proxy.Config} config The configuration to use.\n   * @return {!Builder} A self reference.\n   */\n  setProxy(config) {\n    this.capabilities_.setProxy(config)\n    return this\n  }\n\n  /**\n   * Sets the logging preferences for the created session. Preferences may be\n   * changed by repeated calls, or by calling {@link #withCapabilities}.\n   * @param {!(./lib/logging.Preferences|Object<string, string>)} prefs The\n   *     desired logging preferences.\n   * @return {!Builder} A self reference.\n   */\n  setLoggingPrefs(prefs) {\n    this.capabilities_.setLoggingPrefs(prefs)\n    return this\n  }\n\n  /**\n   * Sets the default action to take with an unexpected alert before returning\n   * an error.\n   *\n   * @param {?capabilities.UserPromptHandler} behavior The desired behavior.\n   * @return {!Builder} A self reference.\n   * @see capabilities.Capabilities#setAlertBehavior\n   */\n  setAlertBehavior(behavior) {\n    this.capabilities_.setAlertBehavior(behavior)\n    return this\n  }\n\n  /**\n   * Sets Chrome specific {@linkplain chrome.Options options} for drivers\n   * created by this builder. Any logging or proxy settings defined on the given\n   * options will take precedence over those set through\n   * {@link #setLoggingPrefs} and {@link #setProxy}, respectively.\n   *\n   * @param {!chrome.Options} options The ChromeDriver options to use.\n   * @return {!Builder} A self reference.\n   */\n  setChromeOptions(options) {\n    this.chromeOptions_ = options\n    return this\n  }\n\n  /**\n   * @return {chrome.Options} the Chrome specific options currently configured\n   *     for this builder.\n   */\n  getChromeOptions() {\n    return this.chromeOptions_\n  }\n\n  /**\n   * Sets the service builder to use for managing the chromedriver child process\n   * when creating new Chrome sessions.\n   *\n   * @param {chrome.ServiceBuilder} service the service to use.\n   * @return {!Builder} A self reference.\n   */\n  setChromeService(service) {\n    if (service && !(service instanceof chrome.ServiceBuilder)) {\n      throw TypeError('not a chrome.ServiceBuilder object')\n    }\n    this.chromeService_ = service\n    return this\n  }\n\n  /**\n   * Sets Firefox specific {@linkplain firefox.Options options} for drivers\n   * created by this builder. Any logging or proxy settings defined on the given\n   * options will take precedence over those set through\n   * {@link #setLoggingPrefs} and {@link #setProxy}, respectively.\n   *\n   * @param {!firefox.Options} options The FirefoxDriver options to use.\n   * @return {!Builder} A self reference.\n   */\n  setFirefoxOptions(options) {\n    this.firefoxOptions_ = options\n    return this\n  }\n\n  /**\n   * @return {firefox.Options} the Firefox specific options currently configured\n   *     for this instance.\n   */\n  getFirefoxOptions() {\n    return this.firefoxOptions_\n  }\n\n  /**\n   * Sets the {@link firefox.ServiceBuilder} to use to manage the geckodriver\n   * child process when creating Firefox sessions locally.\n   *\n   * @param {firefox.ServiceBuilder} service the service to use.\n   * @return {!Builder} a self reference.\n   */\n  setFirefoxService(service) {\n    if (service && !(service instanceof firefox.ServiceBuilder)) {\n      throw TypeError('not a firefox.ServiceBuilder object')\n    }\n    this.firefoxService_ = service\n    return this\n  }\n\n  /**\n   * Set Internet Explorer specific {@linkplain ie.Options options} for drivers\n   * created by this builder. Any proxy settings defined on the given options\n   * will take precedence over those set through {@link #setProxy}.\n   *\n   * @param {!ie.Options} options The IEDriver options to use.\n   * @return {!Builder} A self reference.\n   */\n  setIeOptions(options) {\n    this.ieOptions_ = options\n    return this\n  }\n\n  /**\n   * Sets the {@link ie.ServiceBuilder} to use to manage the geckodriver\n   * child process when creating IE sessions locally.\n   *\n   * @param {ie.ServiceBuilder} service the service to use.\n   * @return {!Builder} a self reference.\n   */\n  setIeService(service) {\n    this.ieService_ = service\n    return this\n  }\n\n  /**\n   * Set {@linkplain edge.Options options} specific to Microsoft's Edge browser\n   * for drivers created by this builder. Any proxy settings defined on the\n   * given options will take precedence over those set through\n   * {@link #setProxy}.\n   *\n   * @param {!edge.Options} options The MicrosoftEdgeDriver options to use.\n   * @return {!Builder} A self reference.\n   */\n  setEdgeOptions(options) {\n    this.edgeOptions_ = options\n    return this\n  }\n\n  /**\n   * Sets the {@link edge.ServiceBuilder} to use to manage the\n   * MicrosoftEdgeDriver child process when creating sessions locally.\n   *\n   * @param {edge.ServiceBuilder} service the service to use.\n   * @return {!Builder} a self reference.\n   */\n  setEdgeService(service) {\n    if (service && !(service instanceof edge.ServiceBuilder)) {\n      throw TypeError('not a edge.ServiceBuilder object')\n    }\n    this.edgeService_ = service\n    return this\n  }\n\n  /**\n   * Sets Safari specific {@linkplain safari.Options options} for drivers\n   * created by this builder. Any logging settings defined on the given options\n   * will take precedence over those set through {@link #setLoggingPrefs}.\n   *\n   * @param {!safari.Options} options The Safari options to use.\n   * @return {!Builder} A self reference.\n   */\n  setSafariOptions(options) {\n    this.safariOptions_ = options\n    return this\n  }\n\n  /**\n   * @return {safari.Options} the Safari specific options currently configured\n   *     for this instance.\n   */\n  getSafariOptions() {\n    return this.safariOptions_\n  }\n\n  /**\n   * Creates a new WebDriver client based on this builder's current\n   * configuration.\n   *\n   * This method will return a {@linkplain ThenableWebDriver} instance, allowing\n   * users to issue commands directly without calling `then()`. The returned\n   * thenable wraps a promise that will resolve to a concrete\n   * {@linkplain webdriver.WebDriver WebDriver} instance. The promise will be\n   * rejected if the remote end fails to create a new session.\n   *\n   * @return {!ThenableWebDriver} A new WebDriver instance.\n   * @throws {Error} If the current configuration is invalid.\n   */\n  build() {\n    // Create a copy for any changes we may need to make based on the current\n    // environment.\n    const capabilities = new Capabilities(this.capabilities_)\n\n    let browser\n    if (!this.ignoreEnv_ && process.env.SELENIUM_BROWSER) {\n      this.log_.fine(`SELENIUM_BROWSER=${process.env.SELENIUM_BROWSER}`)\n      browser = process.env.SELENIUM_BROWSER.split(/:/, 3)\n      capabilities.setBrowserName(browser[0])\n\n      browser[1] && capabilities.setBrowserVersion(browser[1])\n      browser[2] && capabilities.setPlatform(browser[2])\n    }\n\n    browser = capabilities.get(Capability.BROWSER_NAME)\n\n    if (typeof browser !== 'string') {\n      throw TypeError(\n        `Target browser must be a string, but is <${typeof browser}>;` +\n          ' did you forget to call forBrowser()?'\n      )\n    }\n\n    if (browser === 'ie') {\n      browser = Browser.INTERNET_EXPLORER\n    }\n\n    // Apply browser specific overrides.\n    if (browser === Browser.CHROME && this.chromeOptions_) {\n      capabilities.merge(this.chromeOptions_)\n    } else if (browser === Browser.FIREFOX && this.firefoxOptions_) {\n      capabilities.merge(this.firefoxOptions_)\n    } else if (browser === Browser.INTERNET_EXPLORER && this.ieOptions_) {\n      capabilities.merge(this.ieOptions_)\n    } else if (browser === Browser.SAFARI && this.safariOptions_) {\n      capabilities.merge(this.safariOptions_)\n    } else if (browser === Browser.EDGE && this.edgeOptions_) {\n      capabilities.merge(this.edgeOptions_)\n    }\n\n    checkOptions(\n      capabilities,\n      'chromeOptions',\n      chrome.Options,\n      'setChromeOptions'\n    )\n    checkOptions(\n      capabilities,\n      'moz:firefoxOptions',\n      firefox.Options,\n      'setFirefoxOptions'\n    )\n    checkOptions(\n      capabilities,\n      'safari.options',\n      safari.Options,\n      'setSafariOptions'\n    )\n\n    // Check for a remote browser.\n    let url = this.url_\n    if (!this.ignoreEnv_) {\n      if (process.env.SELENIUM_REMOTE_URL) {\n        this.log_.fine(`SELENIUM_REMOTE_URL=${process.env.SELENIUM_REMOTE_URL}`)\n        url = process.env.SELENIUM_REMOTE_URL\n      } else if (process.env.SELENIUM_SERVER_JAR) {\n        this.log_.fine(`SELENIUM_SERVER_JAR=${process.env.SELENIUM_SERVER_JAR}`)\n        url = startSeleniumServer(process.env.SELENIUM_SERVER_JAR)\n      }\n    }\n\n    if (url) {\n      this.log_.fine('Creating session on remote server')\n      let client = Promise.resolve(url).then(\n        (url) => new _http.HttpClient(url, this.agent_, this.proxy_)\n      )\n      let executor = new _http.Executor(client)\n\n      if (browser === Browser.CHROME) {\n        const driver = ensureFileDetectorsAreEnabled(chrome.Driver)\n        return createDriver(driver, capabilities, executor)\n      }\n\n      if (browser === Browser.FIREFOX) {\n        const driver = ensureFileDetectorsAreEnabled(firefox.Driver)\n        return createDriver(driver, capabilities, executor)\n      }\n      return createDriver(WebDriver, executor, capabilities)\n    }\n\n    // Check for a native browser.\n    switch (browser) {\n      case Browser.CHROME: {\n        let service = null\n        if (this.chromeService_) {\n          service = this.chromeService_.build()\n        }\n        return createDriver(chrome.Driver, capabilities, service)\n      }\n\n      case Browser.FIREFOX: {\n        let service = null\n        if (this.firefoxService_) {\n          service = this.firefoxService_.build()\n        }\n        return createDriver(firefox.Driver, capabilities, service)\n      }\n\n      case Browser.INTERNET_EXPLORER: {\n        let service = null\n        if (this.ieService_) {\n          service = this.ieService_.build()\n        }\n        return createDriver(ie.Driver, capabilities, service)\n      }\n\n      case Browser.EDGE: {\n        let service = null\n        if (this.edgeService_) {\n          service = this.edgeService_.build()\n        }\n        return createDriver(edge.Driver, capabilities, service)\n      }\n\n      case Browser.SAFARI:\n        return createDriver(safari.Driver, capabilities)\n\n      default:\n        throw new Error(\n          'Do not know how to build driver: ' +\n            browser +\n            '; did you forget to call usingServer(url)?'\n        )\n    }\n  }\n}\n\n/**\n * In the 3.x releases, the various browser option classes\n * (e.g. firefox.Options) had to be manually set as an option using the\n * Capabilties class:\n *\n *     let ffo = new firefox.Options();\n *     // Configure firefox options...\n *\n *     let caps = new Capabilities();\n *     caps.set('moz:firefoxOptions', ffo);\n *\n *     let driver = new Builder()\n *         .withCapabilities(caps)\n *         .build();\n *\n * The options are now subclasses of Capabilities and can be used directly. A\n * direct translation of the above is:\n *\n *     let ffo = new firefox.Options();\n *     // Configure firefox options...\n *\n *     let driver = new Builder()\n *         .withCapabilities(ffo)\n *         .build();\n *\n * You can also set the options for various browsers at once and let the builder\n * choose the correct set at runtime (see Builder docs above):\n *\n *     let ffo = new firefox.Options();\n *     // Configure ...\n *\n *     let co = new chrome.Options();\n *     // Configure ...\n *\n *     let driver = new Builder()\n *         .setChromeOptions(co)\n *         .setFirefoxOptions(ffo)\n *         .build();\n *\n * @param {!Capabilities} caps\n * @param {string} key\n * @param {function(new: Capabilities)} optionType\n * @param {string} setMethod\n * @throws {error.InvalidArgumentError}\n */\nfunction checkOptions(caps, key, optionType, setMethod) {\n  let val = caps.get(key)\n  if (val instanceof optionType) {\n    throw new error.InvalidArgumentError(\n      'Options class extends Capabilities and should not be set as key ' +\n        `\"${key}\"; set browser-specific options with ` +\n        `Builder.${setMethod}(). For more information, see the ` +\n        'documentation attached to the function that threw this error'\n    )\n  }\n}\n\n// PUBLIC API\n\nexports.Browser = capabilities.Browser\nexports.Builder = Builder\nexports.Button = input.Button\nexports.By = by.By\nexports.RelativeBy = by.RelativeBy\nexports.withTagName = by.withTagName\nexports.locateWith = by.locateWith\nexports.Capabilities = capabilities.Capabilities\nexports.Capability = capabilities.Capability\nexports.Condition = webdriver.Condition\nexports.FileDetector = input.FileDetector\nexports.Key = input.Key\nexports.Origin = input.Origin\nexports.Session = session.Session\nexports.ThenableWebDriver = ThenableWebDriver\nexports.WebDriver = webdriver.WebDriver\nexports.WebElement = webdriver.WebElement\nexports.WebElementCondition = webdriver.WebElementCondition\nexports.WebElementPromise = webdriver.WebElementPromise\nexports.error = error\nexports.logging = logging\nexports.promise = promise\nexports.until = until\nexports.Select = select.Select\nexports.LogInspector = LogInspector\nexports.BrowsingContext = BrowsingContext\nexports.BrowsingConextInspector = BrowsingConextInspector\nexports.ScriptManager = ScriptManager\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}