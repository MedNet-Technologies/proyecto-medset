{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n'use strict';\n\n/**\n * @fileoverview Defines types related to user input with the WebDriver API.\n */\nvar _regeneratorRuntime = require(\"D:/Guts/Documents/GitHub/proyecto-medset/medset/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"D:/Guts/Documents/GitHub/proyecto-medset/medset/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _createForOfIteratorHelper = require(\"D:/Guts/Documents/GitHub/proyecto-medset/medset/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _get = require(\"D:/Guts/Documents/GitHub/proyecto-medset/medset/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"D:/Guts/Documents/GitHub/proyecto-medset/medset/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"D:/Guts/Documents/GitHub/proyecto-medset/medset/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"D:/Guts/Documents/GitHub/proyecto-medset/medset/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _classCallCheck = require(\"D:/Guts/Documents/GitHub/proyecto-medset/medset/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"D:/Guts/Documents/GitHub/proyecto-medset/medset/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _require = require('./command'),\n  Command = _require.Command,\n  Name = _require.Name;\nvar _require2 = require('./error'),\n  InvalidArgumentError = _require2.InvalidArgumentError;\n\n/**\n * Enumeration of the buttons used in the advanced interactions API.\n * @enum {number}\n */\nvar Button = {\n  LEFT: 0,\n  MIDDLE: 1,\n  RIGHT: 2,\n  BACK: 3,\n  FORWARD: 4\n};\n\n/**\n * Representations of pressable keys that aren't text.  These are stored in\n * the Unicode PUA (Private Use Area) code points, 0xE000-0xF8FF.  Refer to\n * http://www.google.com.au/search?&q=unicode+pua&btnK=Search\n *\n * @enum {string}\n * @see <https://www.w3.org/TR/webdriver/#keyboard-actions>\n */\nvar Key = {\n  NULL: \"\\uE000\",\n  CANCEL: \"\\uE001\",\n  // ^break\n  HELP: \"\\uE002\",\n  BACK_SPACE: \"\\uE003\",\n  TAB: \"\\uE004\",\n  CLEAR: \"\\uE005\",\n  RETURN: \"\\uE006\",\n  ENTER: \"\\uE007\",\n  SHIFT: \"\\uE008\",\n  CONTROL: \"\\uE009\",\n  ALT: \"\\uE00A\",\n  PAUSE: \"\\uE00B\",\n  ESCAPE: \"\\uE00C\",\n  SPACE: \"\\uE00D\",\n  PAGE_UP: \"\\uE00E\",\n  PAGE_DOWN: \"\\uE00F\",\n  END: \"\\uE010\",\n  HOME: \"\\uE011\",\n  ARROW_LEFT: \"\\uE012\",\n  LEFT: \"\\uE012\",\n  ARROW_UP: \"\\uE013\",\n  UP: \"\\uE013\",\n  ARROW_RIGHT: \"\\uE014\",\n  RIGHT: \"\\uE014\",\n  ARROW_DOWN: \"\\uE015\",\n  DOWN: \"\\uE015\",\n  INSERT: \"\\uE016\",\n  DELETE: \"\\uE017\",\n  SEMICOLON: \"\\uE018\",\n  EQUALS: \"\\uE019\",\n  NUMPAD0: \"\\uE01A\",\n  // number pad keys\n  NUMPAD1: \"\\uE01B\",\n  NUMPAD2: \"\\uE01C\",\n  NUMPAD3: \"\\uE01D\",\n  NUMPAD4: \"\\uE01E\",\n  NUMPAD5: \"\\uE01F\",\n  NUMPAD6: \"\\uE020\",\n  NUMPAD7: \"\\uE021\",\n  NUMPAD8: \"\\uE022\",\n  NUMPAD9: \"\\uE023\",\n  MULTIPLY: \"\\uE024\",\n  ADD: \"\\uE025\",\n  SEPARATOR: \"\\uE026\",\n  SUBTRACT: \"\\uE027\",\n  DECIMAL: \"\\uE028\",\n  DIVIDE: \"\\uE029\",\n  F1: \"\\uE031\",\n  // function keys\n  F2: \"\\uE032\",\n  F3: \"\\uE033\",\n  F4: \"\\uE034\",\n  F5: \"\\uE035\",\n  F6: \"\\uE036\",\n  F7: \"\\uE037\",\n  F8: \"\\uE038\",\n  F9: \"\\uE039\",\n  F10: \"\\uE03A\",\n  F11: \"\\uE03B\",\n  F12: \"\\uE03C\",\n  COMMAND: \"\\uE03D\",\n  // Apple command key\n  META: \"\\uE03D\",\n  // alias for Windows key\n\n  /**\n   * Japanese modifier key for switching between full- and half-width\n   * characters.\n   * @see <https://en.wikipedia.org/wiki/Language_input_keys>\n   */\n  ZENKAKU_HANKAKU: \"\\uE040\"\n};\n\n/**\n * Simulate pressing many keys at once in a \"chord\". Takes a sequence of\n * {@linkplain Key keys} or strings, appends each of the values to a string,\n * adds the chord termination key ({@link Key.NULL}) and returns the resulting\n * string.\n *\n * Note: when the low-level webdriver key handlers see Keys.NULL, active\n * modifier keys (CTRL/ALT/SHIFT/etc) release via a keyup event.\n *\n * @param {...string} keys The key sequence to concatenate.\n * @return {string} The null-terminated key sequence.\n */\nKey.chord = function () {\n  for (var _len = arguments.length, keys = new Array(_len), _key = 0; _key < _len; _key++) {\n    keys[_key] = arguments[_key];\n  }\n  return keys.join('') + Key.NULL;\n};\n\n/**\n * Used with {@link ./webelement.WebElement#sendKeys WebElement#sendKeys} on\n * file input elements (`<input type=\"file\">`) to detect when the entered key\n * sequence defines the path to a file.\n *\n * By default, {@linkplain ./webelement.WebElement WebElement's} will enter all\n * key sequences exactly as entered. You may set a\n * {@linkplain ./webdriver.WebDriver#setFileDetector file detector} on the\n * parent WebDriver instance to define custom behavior for handling file\n * elements. Of particular note is the\n * {@link selenium-webdriver/remote.FileDetector}, which should be used when\n * running against a remote\n * [Selenium Server](https://selenium.dev/downloads/).\n */\nvar FileDetector = /*#__PURE__*/function () {\n  function FileDetector() {\n    _classCallCheck(this, FileDetector);\n  }\n  _createClass(FileDetector, [{\n    key: \"handleFile\",\n    value:\n    /**\n     * Handles the file specified by the given path, preparing it for use with\n     * the current browser. If the path does not refer to a valid file, it will\n     * be returned unchanged, otherwise a path suitable for use with the current\n     * browser will be returned.\n     *\n     * This default implementation is a no-op. Subtypes may override this function\n     * for custom tailored file handling.\n     *\n     * @param {!./webdriver.WebDriver} driver The driver for the current browser.\n     * @param {string} path The path to process.\n     * @return {!Promise<string>} A promise for the processed file path.\n     * @package\n     */\n    function handleFile(_driver, path) {\n      // eslint-disable-line\n      return Promise.resolve(path);\n    }\n  }]);\n  return FileDetector;\n}();\n/**\n * Generic description of a single action to send to the remote end.\n *\n * @record\n * @package\n */\nvar Action = /*#__PURE__*/_createClass(function Action() {\n  _classCallCheck(this, Action);\n  /** @type {!Action.Type} */\n  this.type;\n  /** @type {(number|undefined)} */\n  this.duration;\n  /** @type {(string|undefined)} */\n  this.value;\n  /** @type {(Button|undefined)} */\n  this.button;\n  /** @type {(number|undefined)} */\n  this.x;\n  /** @type {(number|undefined)} */\n  this.y;\n});\n/**\n * @enum {string}\n * @package\n * @see <https://w3c.github.io/webdriver/webdriver-spec.html#terminology-0>\n */\nAction.Type = {\n  KEY_DOWN: 'keyDown',\n  KEY_UP: 'keyUp',\n  PAUSE: 'pause',\n  POINTER_DOWN: 'pointerDown',\n  POINTER_UP: 'pointerUp',\n  POINTER_MOVE: 'pointerMove',\n  POINTER_CANCEL: 'pointerCancel',\n  SCROLL: 'scroll'\n};\n\n/**\n * Represents a user input device.\n *\n * @abstract\n */\nvar Device = /*#__PURE__*/function () {\n  /**\n   * @param {Device.Type} type the input type.\n   * @param {string} id a unique ID for this device.\n   */\n  function Device(type, id) {\n    _classCallCheck(this, Device);\n    /** @private @const */this.type_ = type;\n    /** @private @const */\n    this.id_ = id;\n  }\n\n  /** @return {!Object} the JSON encoding for this device. */\n  _createClass(Device, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        type: this.type_,\n        id: this.id_\n      };\n    }\n  }]);\n  return Device;\n}();\n/**\n * Device types supported by the WebDriver protocol.\n *\n * @enum {string}\n * @see <https://w3c.github.io/webdriver/webdriver-spec.html#input-source-state>\n */\nDevice.Type = {\n  KEY: 'key',\n  NONE: 'none',\n  POINTER: 'pointer',\n  WHEEL: 'wheel'\n};\n\n/**\n * @param {(string|Key|number)} key\n * @return {string}\n * @throws {!(InvalidArgumentError|RangeError)}\n */\nfunction checkCodePoint(key) {\n  if (typeof key === 'number') {\n    return String.fromCodePoint(key);\n  }\n  if (typeof key !== 'string') {\n    throw new InvalidArgumentError(\"key is not a string: \".concat(key));\n  }\n  key = key.normalize();\n  if (Array.from(key).length !== 1) {\n    throw new InvalidArgumentError(\"key input is not a single code point: \".concat(key));\n  }\n  return key;\n}\n\n/**\n * Keyboard input device.\n *\n * @final\n * @see <https://www.w3.org/TR/webdriver/#dfn-key-input-source>\n */\nvar Keyboard = /*#__PURE__*/function (_Device) {\n  _inherits(Keyboard, _Device);\n  var _super = _createSuper(Keyboard);\n  /** @param {string} id the device ID. */\n  function Keyboard(id) {\n    _classCallCheck(this, Keyboard);\n    return _super.call(this, Device.Type.KEY, id);\n  }\n\n  /**\n   * Generates a key down action.\n   *\n   * @param {(Key|string|number)} key the key to press. This key may be\n   *     specified as a {@link Key} value, a specific unicode code point,\n   *     or a string containing a single unicode code point.\n   * @return {!Action} a new key down action.\n   * @package\n   */\n  _createClass(Keyboard, [{\n    key: \"keyDown\",\n    value: function keyDown(key) {\n      return {\n        type: Action.Type.KEY_DOWN,\n        value: checkCodePoint(key)\n      };\n    }\n\n    /**\n     * Generates a key up action.\n     *\n     * @param {(Key|string|number)} key the key to press. This key may be\n     *     specified as a {@link Key} value, a specific unicode code point,\n     *     or a string containing a single unicode code point.\n     * @return {!Action} a new key up action.\n     * @package\n     */\n  }, {\n    key: \"keyUp\",\n    value: function keyUp(key) {\n      return {\n        type: Action.Type.KEY_UP,\n        value: checkCodePoint(key)\n      };\n    }\n  }]);\n  return Keyboard;\n}(Device);\n/**\n * Defines the reference point from which to compute offsets for\n * {@linkplain ./input.Pointer#move pointer move} actions.\n *\n * @enum {string}\n */\nvar Origin = {\n  /** Compute offsets relative to the pointer's current position. */\n  POINTER: 'pointer',\n  /** Compute offsets relative to the viewport. */\n  VIEWPORT: 'viewport'\n};\n\n/**\n * Pointer input device.\n *\n * @final\n * @see <https://www.w3.org/TR/webdriver/#dfn-pointer-input-source>\n */\nvar Pointer = /*#__PURE__*/function (_Device2) {\n  _inherits(Pointer, _Device2);\n  var _super2 = _createSuper(Pointer);\n  /**\n   * @param {string} id the device ID.\n   * @param {Pointer.Type} type the pointer type.\n   */\n  function Pointer(id, type) {\n    var _this;\n    _classCallCheck(this, Pointer);\n    _this = _super2.call(this, Device.Type.POINTER, id);\n    /** @private @const */\n    _this.pointerType_ = type;\n    return _this;\n  }\n\n  /** @override */\n  _createClass(Pointer, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      return Object.assign({\n        parameters: {\n          pointerType: this.pointerType_\n        }\n      }, _get(_getPrototypeOf(Pointer.prototype), \"toJSON\", this).call(this));\n    }\n\n    /**\n     * @return {!Action} An action that cancels this pointer's current input.\n     * @package\n     */\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      return {\n        type: Action.Type.POINTER_CANCEL\n      };\n    }\n\n    /**\n     * @param {!Button=} button The button to press.\n     * @param width\n     * @param height\n     * @param pressure\n     * @param tangentialPressure\n     * @param tiltX\n     * @param tiltY\n     * @param twist\n     * @param altitudeAngle\n     * @param azimuthAngle\n     * @return {!Action} An action to press the specified button with this device.\n     * @package\n     */\n  }, {\n    key: \"press\",\n    value: function press() {\n      var button = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Button.LEFT;\n      var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var pressure = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      var tangentialPressure = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n      var tiltX = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n      var tiltY = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n      var twist = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;\n      var altitudeAngle = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 0;\n      var azimuthAngle = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;\n      return {\n        type: Action.Type.POINTER_DOWN,\n        button: button,\n        width: width,\n        height: height,\n        pressure: pressure,\n        tangentialPressure: tangentialPressure,\n        tiltX: tiltX,\n        tiltY: tiltY,\n        twist: twist,\n        altitudeAngle: altitudeAngle,\n        azimuthAngle: azimuthAngle\n      };\n    }\n\n    /**\n     * @param {!Button=} button The button to release.\n     * @return {!Action} An action to release the specified button with this\n     *     device.\n     * @package\n     */\n  }, {\n    key: \"release\",\n    value: function release() {\n      var button = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Button.LEFT;\n      return {\n        type: Action.Type.POINTER_UP,\n        button: button\n      };\n    }\n\n    /**\n     * Creates an action for moving the pointer `x` and `y` pixels from the\n     * specified `origin`. The `origin` may be defined as the pointer's\n     * {@linkplain Origin.POINTER current position}, the\n     * {@linkplain Origin.VIEWPORT viewport}, or the center of a specific\n     * {@linkplain ./webdriver.WebElement WebElement}.\n     *\n     * @param {{\n     *   x: (number|undefined),\n     *   y: (number|undefined),\n     *   duration: (number|undefined),\n     *   origin: (!Origin|!./webdriver.WebElement|undefined),\n     * }=} options the move options.\n     * @return {!Action} The new action.\n     * @package\n     */\n  }, {\n    key: \"move\",\n    value: function move(_ref) {\n      var _ref$x = _ref.x,\n        x = _ref$x === void 0 ? 0 : _ref$x,\n        _ref$y = _ref.y,\n        y = _ref$y === void 0 ? 0 : _ref$y,\n        _ref$duration = _ref.duration,\n        duration = _ref$duration === void 0 ? 100 : _ref$duration,\n        _ref$origin = _ref.origin,\n        origin = _ref$origin === void 0 ? Origin.VIEWPORT : _ref$origin,\n        _ref$width = _ref.width,\n        width = _ref$width === void 0 ? 0 : _ref$width,\n        _ref$height = _ref.height,\n        height = _ref$height === void 0 ? 0 : _ref$height,\n        _ref$pressure = _ref.pressure,\n        pressure = _ref$pressure === void 0 ? 0 : _ref$pressure,\n        _ref$tangentialPressu = _ref.tangentialPressure,\n        tangentialPressure = _ref$tangentialPressu === void 0 ? 0 : _ref$tangentialPressu,\n        _ref$tiltX = _ref.tiltX,\n        tiltX = _ref$tiltX === void 0 ? 0 : _ref$tiltX,\n        _ref$tiltY = _ref.tiltY,\n        tiltY = _ref$tiltY === void 0 ? 0 : _ref$tiltY,\n        _ref$twist = _ref.twist,\n        twist = _ref$twist === void 0 ? 0 : _ref$twist,\n        _ref$altitudeAngle = _ref.altitudeAngle,\n        altitudeAngle = _ref$altitudeAngle === void 0 ? 0 : _ref$altitudeAngle,\n        _ref$azimuthAngle = _ref.azimuthAngle,\n        azimuthAngle = _ref$azimuthAngle === void 0 ? 0 : _ref$azimuthAngle;\n      return {\n        type: Action.Type.POINTER_MOVE,\n        origin: origin,\n        duration: duration,\n        x: x,\n        y: y,\n        width: width,\n        height: height,\n        pressure: pressure,\n        tangentialPressure: tangentialPressure,\n        tiltX: tiltX,\n        tiltY: tiltY,\n        twist: twist,\n        altitudeAngle: altitudeAngle,\n        azimuthAngle: azimuthAngle\n      };\n    }\n  }]);\n  return Pointer;\n}(Device);\n/**\n * The supported types of pointers.\n * @enum {string}\n */\nPointer.Type = {\n  MOUSE: 'mouse',\n  PEN: 'pen',\n  TOUCH: 'touch'\n};\nvar Wheel = /*#__PURE__*/function (_Device3) {\n  _inherits(Wheel, _Device3);\n  var _super3 = _createSuper(Wheel);\n  /**\n   * @param {string} id the device ID..\n   */\n  function Wheel(id) {\n    _classCallCheck(this, Wheel);\n    return _super3.call(this, Device.Type.WHEEL, id);\n  }\n\n  /**\n   * Scrolls a page via the coordinates given\n   * @param {number} x starting x coordinate\n   * @param {number} y starting y coordinate\n   * @param {number} deltaX Delta X to scroll to target\n   * @param {number} deltaY Delta Y to scroll to target\n   * @param {WebElement} origin element origin\n   * @param {number} duration duration ratio be the ratio of time delta and duration\n   * @returns {!Action} An action to scroll with this device.\n   */\n  _createClass(Wheel, [{\n    key: \"scroll\",\n    value: function scroll(x, y, deltaX, deltaY, origin, duration) {\n      return {\n        type: Action.Type.SCROLL,\n        duration: duration,\n        x: x,\n        y: y,\n        deltaX: deltaX,\n        deltaY: deltaY,\n        origin: origin\n      };\n    }\n  }]);\n  return Wheel;\n}(Device);\n/**\n * User facing API for generating complex user gestures. This class should not\n * be instantiated directly. Instead, users should create new instances by\n * calling {@link ./webdriver.WebDriver#actions WebDriver.actions()}.\n *\n * ### Action Ticks\n *\n * Action sequences are divided into a series of \"ticks\". At each tick, the\n * WebDriver remote end will perform a single action for each device included\n * in the action sequence. At tick 0, the driver will perform the first action\n * defined for each device, at tick 1 the second action for each device, and\n * so on until all actions have been executed. If an individual device does\n * not have an action defined at a particular tick, it will automatically\n * pause.\n *\n * By default, action sequences will be synchronized so only one device has a\n * define action in each tick. Consider the following code sample:\n *\n *     const actions = driver.actions();\n *\n *     await actions\n *         .keyDown(SHIFT)\n *         .move({origin: el})\n *         .press()\n *         .release()\n *         .keyUp(SHIFT)\n *         .perform();\n *\n * This sample produces the following sequence of ticks:\n *\n * | Device   | Tick 1         | Tick 2             | Tick 3  | Tick 4    | Tick 5       |\n * | -------- | -------------- | ------------------ | ------- | --------- | ------------ |\n * | Keyboard | keyDown(SHIFT) | pause()            | pause() | pause()   | keyUp(SHIFT) |\n * | Mouse    | pause()        | move({origin: el}) | press() | release() | pause()      |\n *\n * If you'd like the remote end to execute actions with multiple devices\n * simultaneously, you may pass `{async: true}` when creating the actions\n * builder. With synchronization disabled (`{async: true}`), the ticks from our\n * previous example become:\n *\n * | Device   | Tick 1             | Tick 2       | Tick 3    |\n * | -------- | ------------------ | ------------ | --------- |\n * | Keyboard | keyDown(SHIFT)     | keyUp(SHIFT) |           |\n * | Mouse    | move({origin: el}) | press()      | release() |\n *\n * When synchronization is disabled, it is your responsibility to insert\n * {@linkplain #pause() pauses} for each device, as needed:\n *\n *     const actions = driver.actions({async: true});\n *     const kb = actions.keyboard();\n *     const mouse = actions.mouse();\n *\n *     actions.keyDown(SHIFT).pause(kb).pause(kb).key(SHIFT);\n *     actions.pause(mouse).move({origin: el}).press().release();\n *     actions.perform();\n *\n * With pauses insert for individual devices, we're back to:\n *\n * | Device   | Tick 1         | Tick 2             | Tick 3  | Tick 4       |\n * | -------- | -------------- | ------------------ | ------- | ------------ |\n * | Keyboard | keyDown(SHIFT) | pause()            | pause() | keyUp(SHIFT) |\n * | Mouse    | pause()        | move({origin: el}) | press() | release()    |\n *\n * #### Tick Durations\n *\n * The length of each action tick is however long it takes the remote end to\n * execute the actions for every device in that tick. Most actions are\n * \"instantaneous\", however, {@linkplain #pause pause} and\n * {@linkplain #move pointer move} actions allow you to specify a duration for\n * how long that action should take. The remote end will always wait for all\n * actions within a tick to finish before starting the next tick, so a device\n * may implicitly pause while waiting for other devices to finish.\n *\n * | Device    | Tick 1                | Tick 2  |\n * | --------- | --------------------- | ------- |\n * | Pointer 1 | move({duration: 200}) | press() |\n * | Pointer 2 | move({duration: 300}) | press() |\n *\n * In table above, the move for Pointer 1 should only take 200 ms, but the\n * remote end will wait for the move for Pointer 2 to finish\n * (an additional 100 ms) before proceeding to Tick 2.\n *\n * This implicit waiting also applies to pauses. In the table below, even though\n * the keyboard only defines a pause of 100 ms, the remote end will wait an\n * additional 200 ms for the mouse move to finish before moving to Tick 2.\n *\n * | Device   | Tick 1                | Tick 2         |\n * | -------- | --------------------- | -------------- |\n * | Keyboard | pause(100)            | keyDown(SHIFT) |\n * | Mouse    | move({duration: 300}) |                |\n *\n * [client rect]: https://developer.mozilla.org/en-US/docs/Web/API/Element/getClientRects\n * [bounding client rect]: https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect\n *\n * @final\n * @see <https://www.w3.org/TR/webdriver/#actions>\n */\nvar Actions = /*#__PURE__*/function () {\n  /**\n   * @param {!Executor} executor The object to execute the configured\n   *     actions with.\n   * @param {{async: (boolean|undefined)}} options Options for this action\n   *     sequence (see class description for details).\n   */\n  function Actions(executor) {\n    var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref2$async = _ref2.async,\n      async = _ref2$async === void 0 ? false : _ref2$async;\n    _classCallCheck(this, Actions);\n    /** @private @const */\n    this.executor_ = executor;\n\n    /** @private @const */\n    this.sync_ = !async;\n\n    /** @private @const */\n    this.keyboard_ = new Keyboard('default keyboard');\n\n    /** @private @const */\n    this.mouse_ = new Pointer('default mouse', Pointer.Type.MOUSE);\n\n    /** @private @const */\n    this.wheel_ = new Wheel('default wheel');\n\n    /** @private @const {!Map<!Device, !Array<!Action>>} */\n    this.sequences_ = new Map([[this.keyboard_, []], [this.mouse_, []], [this.wheel_, []]]);\n  }\n\n  /** @return {!Keyboard} the keyboard device handle. */\n  _createClass(Actions, [{\n    key: \"keyboard\",\n    value: function keyboard() {\n      return this.keyboard_;\n    }\n\n    /** @return {!Pointer} the mouse pointer device handle. */\n  }, {\n    key: \"mouse\",\n    value: function mouse() {\n      return this.mouse_;\n    }\n\n    /** @return {!Wheel} the wheel device handle. */\n  }, {\n    key: \"wheel\",\n    value: function wheel() {\n      return this.wheel_;\n    }\n\n    /**\n     * @param {!Device} device\n     * @return {!Array<!Action>}\n     * @private\n     */\n  }, {\n    key: \"sequence_\",\n    value: function sequence_(device) {\n      var sequence = this.sequences_.get(device);\n      if (!sequence) {\n        sequence = [];\n        this.sequences_.set(device, sequence);\n      }\n      return sequence;\n    }\n\n    /**\n     * Appends `actions` to the end of the current sequence for the given\n     * `device`. If device synchronization is enabled, after inserting the\n     * actions, pauses will be inserted for all other devices to ensure all action\n     * sequences are the same length.\n     *\n     * @param {!Device} device the device to update.\n     * @param {...!Action} actions the actions to insert.\n     * @return {!Actions} a self reference.\n     */\n  }, {\n    key: \"insert\",\n    value: function insert(device) {\n      var _this$sequence_;\n      for (var _len2 = arguments.length, actions = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        actions[_key2 - 1] = arguments[_key2];\n      }\n      (_this$sequence_ = this.sequence_(device)).push.apply(_this$sequence_, actions);\n      return this.sync_ ? this.synchronize() : this;\n    }\n\n    /**\n     * Ensures the action sequence for every device referenced in this action\n     * sequence is the same length. For devices whose sequence is too short,\n     * this will insert {@linkplain #pause pauses} so that every device has an\n     * explicit action defined at each tick.\n     *\n     * @param {...!Device} devices The specific devices to synchronize.\n     *     If unspecified, the action sequences for every device will be\n     *     synchronized.\n     * @return {!Actions} a self reference.\n     */\n  }, {\n    key: \"synchronize\",\n    value: function synchronize() {\n      var sequences;\n      var max = 0;\n      for (var _len3 = arguments.length, devices = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        devices[_key3] = arguments[_key3];\n      }\n      if (devices.length === 0) {\n        var _iterator = _createForOfIteratorHelper(this.sequences_.values()),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var s = _step.value;\n            max = Math.max(max, s.length);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n        sequences = this.sequences_.values();\n      } else {\n        sequences = [];\n        var _iterator2 = _createForOfIteratorHelper(devices),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var device = _step2.value;\n            var seq = this.sequence_(device);\n            max = Math.max(max, seq.length);\n            sequences.push(seq);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n      var pause = {\n        type: Action.Type.PAUSE,\n        duration: 0\n      };\n      var _iterator3 = _createForOfIteratorHelper(sequences),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _seq = _step3.value;\n          while (_seq.length < max) {\n            _seq.push(pause);\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      return this;\n    }\n\n    /**\n     * Inserts a pause action for the specified devices, ensuring each device is\n     * idle for a tick. The length of the pause (in milliseconds) may be specified\n     * as the first parameter to this method (defaults to 0). Otherwise, you may\n     * just specify the individual devices that should pause.\n     *\n     * If no devices are specified, a pause action will be created (using the same\n     * duration) for every device.\n     *\n     * When device synchronization is enabled (the default for new {@link Actions}\n     * objects), there is no need to specify devices as pausing one automatically\n     * pauses the others for the same duration. In other words, the following are\n     * all equivalent:\n     *\n     *     let a1 = driver.actions();\n     *     a1.pause(100).perform();\n     *\n     *     let a2 = driver.actions();\n     *     a2.pause(100, a2.keyboard()).perform();\n     *     // Synchronization ensures a2.mouse() is automatically paused too.\n     *\n     *     let a3 = driver.actions();\n     *     a3.pause(100, a3.keyboard(), a3.mouse()).perform();\n     *\n     * When device synchronization is _disabled_, you can cause individual devices\n     * to pause during a tick. For example, to hold the SHIFT key down while\n     * moving the mouse:\n     *\n     *     let actions = driver.actions({async: true});\n     *\n     *     actions.keyDown(Key.SHIFT);\n     *     actions.pause(actions.mouse())  // Pause for shift down\n     *         .press(Button.LEFT)\n     *         .move({x: 10, y: 10})\n     *         .release(Button.LEFT);\n     *     actions\n     *         .pause(\n     *             actions.keyboard(),  // Pause for press left\n     *             actions.keyboard(),  // Pause for move\n     *             actions.keyboard())  // Pause for release left\n     *        .keyUp(Key.SHIFT);\n     *     await actions.perform();\n     *\n     * @param {(number|!Device)=} duration The length of the pause to insert, in\n     *     milliseconds. Alternatively, the duration may be omitted (yielding a\n     *     default 0 ms pause), and the first device to pause may be specified.\n     * @param {...!Device} devices The devices to insert the pause for. If no\n     *     devices are specified, the pause will be inserted for _all_ devices.\n     * @return {!Actions} a self reference.\n     */\n  }, {\n    key: \"pause\",\n    value: function pause(duration) {\n      for (var _len4 = arguments.length, devices = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n        devices[_key4 - 1] = arguments[_key4];\n      }\n      if (duration instanceof Device) {\n        devices.push(duration);\n        duration = 0;\n      } else if (!duration) {\n        duration = 0;\n      }\n      var action = {\n        type: Action.Type.PAUSE,\n        duration: duration\n      };\n\n      // NB: need a properly typed variable for type checking.\n      /** @type {!Iterable<!Device>} */\n      var iterable = devices.length === 0 ? this.sequences_.keys() : devices;\n      var _iterator4 = _createForOfIteratorHelper(iterable),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var device = _step4.value;\n          this.sequence_(device).push(action);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      return this.sync_ ? this.synchronize() : this;\n    }\n\n    /**\n     * Inserts an action to press a single key.\n     *\n     * @param {(Key|string|number)} key the key to press. This key may be\n     *     specified as a {@link Key} value, a specific unicode code point,\n     *     or a string containing a single unicode code point.\n     * @return {!Actions} a self reference.\n     */\n  }, {\n    key: \"keyDown\",\n    value: function keyDown(key) {\n      return this.insert(this.keyboard_, this.keyboard_.keyDown(key));\n    }\n\n    /**\n     * Inserts an action to release a single key.\n     *\n     * @param {(Key|string|number)} key the key to release. This key may be\n     *     specified as a {@link Key} value, a specific unicode code point,\n     *     or a string containing a single unicode code point.\n     * @return {!Actions} a self reference.\n     */\n  }, {\n    key: \"keyUp\",\n    value: function keyUp(key) {\n      return this.insert(this.keyboard_, this.keyboard_.keyUp(key));\n    }\n\n    /**\n     * Inserts a sequence of actions to type the provided key sequence.\n     * For each key, this will record a pair of {@linkplain #keyDown keyDown}\n     * and {@linkplain #keyUp keyUp} actions. An implication of this pairing\n     * is that modifier keys (e.g. {@link ./input.Key.SHIFT Key.SHIFT}) will\n     * always be immediately released. In other words, `sendKeys(Key.SHIFT, 'a')`\n     * is the same as typing `sendKeys('a')`, _not_ `sendKeys('A')`.\n     *\n     * @param {...(Key|string|number)} keys the keys to type.\n     * @return {!Actions} a self reference.\n     */\n  }, {\n    key: \"sendKeys\",\n    value: function sendKeys() {\n      var _require3 = require('./webdriver'),\n        WebElement = _require3.WebElement;\n      var actions = [];\n      for (var _len5 = arguments.length, keys = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        keys[_key5] = arguments[_key5];\n      }\n      if (keys.length > 1 && keys[0] instanceof WebElement) {\n        this.click(keys[0]);\n        keys.shift();\n      }\n      for (var _i = 0, _keys = keys; _i < _keys.length; _i++) {\n        var key = _keys[_i];\n        if (typeof key === 'string') {\n          var _iterator5 = _createForOfIteratorHelper(key),\n            _step5;\n          try {\n            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n              var symbol = _step5.value;\n              actions.push(this.keyboard_.keyDown(symbol), this.keyboard_.keyUp(symbol));\n            }\n          } catch (err) {\n            _iterator5.e(err);\n          } finally {\n            _iterator5.f();\n          }\n        } else {\n          actions.push(this.keyboard_.keyDown(key), this.keyboard_.keyUp(key));\n        }\n      }\n      return this.insert.apply(this, [this.keyboard_].concat(actions));\n    }\n\n    /**\n     * Inserts an action to press a mouse button at the mouse's current location.\n     *\n     * @param {!Button=} button The button to press; defaults to `LEFT`.\n     * @return {!Actions} a self reference.\n     */\n  }, {\n    key: \"press\",\n    value: function press() {\n      var button = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Button.LEFT;\n      return this.insert(this.mouse_, this.mouse_.press(button));\n    }\n\n    /**\n     * Inserts an action to release a mouse button at the mouse's current\n     * location.\n     *\n     * @param {!Button=} button The button to release; defaults to `LEFT`.\n     * @return {!Actions} a self reference.\n     */\n  }, {\n    key: \"release\",\n    value: function release() {\n      var button = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Button.LEFT;\n      return this.insert(this.mouse_, this.mouse_.release(button));\n    }\n\n    /**\n     * scrolls a page via the coordinates given\n     * @param {number} x starting x coordinate\n     * @param {number} y starting y coordinate\n     * @param {number} deltax delta x to scroll to target\n     * @param {number} deltay delta y to scroll to target\n     * @param {number} duration duration ratio be the ratio of time delta and duration\n     * @returns {!Actions} An action to scroll with this device.\n     */\n  }, {\n    key: \"scroll\",\n    value: function scroll(x, y, targetDeltaX, targetDeltaY, origin, duration) {\n      return this.insert(this.wheel_, this.wheel_.scroll(x, y, targetDeltaX, targetDeltaY, origin, duration));\n    }\n\n    /**\n     * Inserts an action for moving the mouse `x` and `y` pixels relative to the\n     * specified `origin`. The `origin` may be defined as the mouse's\n     * {@linkplain ./input.Origin.POINTER current position}, the top-left corner of the\n     * {@linkplain ./input.Origin.VIEWPORT viewport}, or the center of a specific\n     * {@linkplain ./webdriver.WebElement WebElement}. Default is top left corner of the view-port if origin is not specified\n     *\n     * You may adjust how long the remote end should take, in milliseconds, to\n     * perform the move using the `duration` parameter (defaults to 100 ms).\n     * The number of incremental move events generated over this duration is an\n     * implementation detail for the remote end.\n     *\n     * @param {{\n     *   x: (number|undefined),\n     *   y: (number|undefined),\n     *   duration: (number|undefined),\n     *   origin: (!Origin|!./webdriver.WebElement|undefined),\n     * }=} options The move options. Defaults to moving the mouse to the top-left\n     *     corner of the viewport over 100ms.\n     * @return {!Actions} a self reference.\n     */\n  }, {\n    key: \"move\",\n    value: function move() {\n      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref3$x = _ref3.x,\n        x = _ref3$x === void 0 ? 0 : _ref3$x,\n        _ref3$y = _ref3.y,\n        y = _ref3$y === void 0 ? 0 : _ref3$y,\n        _ref3$duration = _ref3.duration,\n        duration = _ref3$duration === void 0 ? 100 : _ref3$duration,\n        _ref3$origin = _ref3.origin,\n        origin = _ref3$origin === void 0 ? Origin.VIEWPORT : _ref3$origin;\n      return this.insert(this.mouse_, this.mouse_.move({\n        x: x,\n        y: y,\n        duration: duration,\n        origin: origin\n      }));\n    }\n\n    /**\n     * Short-hand for performing a simple left-click (down/up) with the mouse.\n     *\n     * @param {./webdriver.WebElement=} element If specified, the mouse will\n     *     first be moved to the center of the element before performing the\n     *     click.\n     * @return {!Actions} a self reference.\n     */\n  }, {\n    key: \"click\",\n    value: function click(element) {\n      if (element) {\n        this.move({\n          origin: element\n        });\n      }\n      return this.press().release();\n    }\n\n    /**\n     * Short-hand for performing a simple right-click (down/up) with the mouse.\n     *\n     * @param {./webdriver.WebElement=} element If specified, the mouse will\n     *     first be moved to the center of the element before performing the\n     *     click.\n     * @return {!Actions} a self reference.\n     */\n  }, {\n    key: \"contextClick\",\n    value: function contextClick(element) {\n      if (element) {\n        this.move({\n          origin: element\n        });\n      }\n      return this.press(Button.RIGHT).release(Button.RIGHT);\n    }\n\n    /**\n     * Short-hand for performing a double left-click with the mouse.\n     *\n     * @param {./webdriver.WebElement=} element If specified, the mouse will\n     *     first be moved to the center of the element before performing the\n     *     click.\n     * @return {!Actions} a self reference.\n     */\n  }, {\n    key: \"doubleClick\",\n    value: function doubleClick(element) {\n      return this.click(element).press().release();\n    }\n\n    /**\n     * Configures a drag-and-drop action consisting of the following steps:\n     *\n     * 1.  Move to the center of the `from` element (element to be dragged).\n     * 2.  Press the left mouse button.\n     * 3.  If the `to` target is a {@linkplain ./webdriver.WebElement WebElement},\n     *     move the mouse to its center. Otherwise, move the mouse by the\n     *     specified offset.\n     * 4.  Release the left mouse button.\n     *\n     * @param {!./webdriver.WebElement} from The element to press the left mouse\n     *     button on to start the drag.\n     * @param {(!./webdriver.WebElement|{x: number, y: number})} to Either another\n     *     element to drag to (will drag to the center of the element), or an\n     *     object specifying the offset to drag by, in pixels.\n     * @return {!Actions} a self reference.\n     */\n  }, {\n    key: \"dragAndDrop\",\n    value: function dragAndDrop(from, to) {\n      // Do not require up top to avoid a cycle that breaks static analysis.\n      var _require4 = require('./webdriver'),\n        WebElement = _require4.WebElement;\n      if (!(to instanceof WebElement) && (!to || typeof to.x !== 'number' || typeof to.y !== 'number')) {\n        throw new InvalidArgumentError('Invalid drag target; must specify a WebElement or {x, y} offset');\n      }\n      this.move({\n        origin: from\n      }).press();\n      if (to instanceof WebElement) {\n        this.move({\n          origin: to\n        });\n      } else {\n        this.move({\n          x: to.x,\n          y: to.y,\n          origin: Origin.POINTER\n        });\n      }\n      return this.release();\n    }\n\n    /**\n     * Releases all keys, pointers, and clears internal state.\n     *\n     * @return {!Promise<void>} a promise that will resolve when finished\n     *     clearing all action state.\n     */\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      var _iterator6 = _createForOfIteratorHelper(this.sequences_.values()),\n        _step6;\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var s = _step6.value;\n          s.length = 0;\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n      return this.executor_.execute(new Command(Name.CLEAR_ACTIONS));\n    }\n\n    /**\n     * Performs the configured action sequence.\n     *\n     * @return {!Promise<void>} a promise that will resolve when all actions have\n     *     been completed.\n     */\n  }, {\n    key: \"perform\",\n    value: function () {\n      var _perform = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _actions;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _actions = [];\n              this.sequences_.forEach(function (actions, device) {\n                if (!isIdle(actions)) {\n                  actions = actions.concat(); // Defensive copy.\n                  _actions.push(Object.assign({\n                    actions: actions\n                  }, device.toJSON()));\n                }\n              });\n              if (!(_actions.length === 0)) {\n                _context.next = 4;\n                break;\n              }\n              return _context.abrupt(\"return\", Promise.resolve());\n            case 4:\n              _context.next = 6;\n              return this.executor_.execute(new Command(Name.ACTIONS).setParameter('actions', _actions));\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function perform() {\n        return _perform.apply(this, arguments);\n      }\n      return perform;\n    }()\n  }]);\n  return Actions;\n}();\n/**\n * @param {!Array<!Action>} actions\n * @return {boolean}\n */\nfunction isIdle(actions) {\n  return actions.length === 0 || actions.every(function (a) {\n    return a.type === Action.Type.PAUSE && !a.duration;\n  });\n}\n\n/**\n * Script used to compute the offset from the center of a DOM element's first\n * client rect from the top-left corner of the element's bounding client rect.\n * The element's center point is computed using the algorithm defined here:\n * <https://w3c.github.io/webdriver/webdriver-spec.html#dfn-center-point>.\n *\n * __This is only exported for use in internal unit tests. DO NOT USE.__\n *\n * @package\n */\nvar INTERNAL_COMPUTE_OFFSET_SCRIPT = \"\\nfunction computeOffset(el) {\\n  var rect = el.getClientRects()[0];\\n  var left = Math.max(0, Math.min(rect.x, rect.x + rect.width));\\n  var right =\\n      Math.min(window.innerWidth, Math.max(rect.x, rect.x + rect.width));\\n  var top = Math.max(0, Math.min(rect.y, rect.y + rect.height));\\n  var bot =\\n      Math.min(window.innerHeight, Math.max(rect.y, rect.y + rect.height));\\n  var x = Math.floor(0.5 * (left + right));\\n  var y = Math.floor(0.5 * (top + bot));\\n\\n  var bbox = el.getBoundingClientRect();\\n  return [x - bbox.left, y - bbox.top];\\n}\\nreturn computeOffset(arguments[0]);\";\n\n// PUBLIC API\n\nmodule.exports = {\n  Action: Action,\n  // For documentation only.\n  Actions: Actions,\n  Button: Button,\n  Device: Device,\n  Key: Key,\n  Keyboard: Keyboard,\n  FileDetector: FileDetector,\n  Origin: Origin,\n  Pointer: Pointer,\n  INTERNAL_COMPUTE_OFFSET_SCRIPT: INTERNAL_COMPUTE_OFFSET_SCRIPT\n};","map":{"version":3,"names":["_regeneratorRuntime","require","default","_asyncToGenerator","_createForOfIteratorHelper","_get","_getPrototypeOf","_inherits","_createSuper","_classCallCheck","_createClass","_require","Command","Name","_require2","InvalidArgumentError","Button","LEFT","MIDDLE","RIGHT","BACK","FORWARD","Key","NULL","CANCEL","HELP","BACK_SPACE","TAB","CLEAR","RETURN","ENTER","SHIFT","CONTROL","ALT","PAUSE","ESCAPE","SPACE","PAGE_UP","PAGE_DOWN","END","HOME","ARROW_LEFT","ARROW_UP","UP","ARROW_RIGHT","ARROW_DOWN","DOWN","INSERT","DELETE","SEMICOLON","EQUALS","NUMPAD0","NUMPAD1","NUMPAD2","NUMPAD3","NUMPAD4","NUMPAD5","NUMPAD6","NUMPAD7","NUMPAD8","NUMPAD9","MULTIPLY","ADD","SEPARATOR","SUBTRACT","DECIMAL","DIVIDE","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","COMMAND","META","ZENKAKU_HANKAKU","chord","_len","arguments","length","keys","Array","_key","join","FileDetector","key","value","handleFile","_driver","path","Promise","resolve","Action","type","duration","button","x","y","Type","KEY_DOWN","KEY_UP","POINTER_DOWN","POINTER_UP","POINTER_MOVE","POINTER_CANCEL","SCROLL","Device","id","type_","id_","toJSON","KEY","NONE","POINTER","WHEEL","checkCodePoint","String","fromCodePoint","concat","normalize","from","Keyboard","_Device","_super","call","keyDown","keyUp","Origin","VIEWPORT","Pointer","_Device2","_super2","_this","pointerType_","Object","assign","parameters","pointerType","prototype","cancel","press","undefined","width","height","pressure","tangentialPressure","tiltX","tiltY","twist","altitudeAngle","azimuthAngle","release","move","_ref","_ref$x","_ref$y","_ref$duration","_ref$origin","origin","_ref$width","_ref$height","_ref$pressure","_ref$tangentialPressu","_ref$tiltX","_ref$tiltY","_ref$twist","_ref$altitudeAngle","_ref$azimuthAngle","MOUSE","PEN","TOUCH","Wheel","_Device3","_super3","scroll","deltaX","deltaY","Actions","executor","_ref2","_ref2$async","async","executor_","sync_","keyboard_","mouse_","wheel_","sequences_","Map","keyboard","mouse","wheel","sequence_","device","sequence","get","set","insert","_this$sequence_","_len2","actions","_key2","push","apply","synchronize","sequences","max","_len3","devices","_key3","_iterator","values","_step","s","n","done","Math","err","e","f","_iterator2","_step2","seq","pause","_iterator3","_step3","_len4","_key4","action","iterable","_iterator4","_step4","sendKeys","_require3","WebElement","_len5","_key5","click","shift","_i","_keys","_iterator5","_step5","symbol","targetDeltaX","targetDeltaY","_ref3","_ref3$x","_ref3$y","_ref3$duration","_ref3$origin","element","contextClick","doubleClick","dragAndDrop","to","_require4","clear","_iterator6","_step6","execute","CLEAR_ACTIONS","_perform","mark","_callee","_actions","wrap","_callee$","_context","prev","next","forEach","isIdle","abrupt","ACTIONS","setParameter","stop","perform","every","a","INTERNAL_COMPUTE_OFFSET_SCRIPT","module","exports"],"sources":["D:/Guts/Documents/GitHub/proyecto-medset/medset/node_modules/selenium-webdriver/lib/input.js"],"sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n'use strict'\n\n/**\n * @fileoverview Defines types related to user input with the WebDriver API.\n */\nconst { Command, Name } = require('./command')\nconst { InvalidArgumentError } = require('./error')\n\n/**\n * Enumeration of the buttons used in the advanced interactions API.\n * @enum {number}\n */\nconst Button = {\n  LEFT: 0,\n  MIDDLE: 1,\n  RIGHT: 2,\n  BACK: 3,\n  FORWARD: 4,\n}\n\n/**\n * Representations of pressable keys that aren't text.  These are stored in\n * the Unicode PUA (Private Use Area) code points, 0xE000-0xF8FF.  Refer to\n * http://www.google.com.au/search?&q=unicode+pua&btnK=Search\n *\n * @enum {string}\n * @see <https://www.w3.org/TR/webdriver/#keyboard-actions>\n */\nconst Key = {\n  NULL: '\\uE000',\n  CANCEL: '\\uE001', // ^break\n  HELP: '\\uE002',\n  BACK_SPACE: '\\uE003',\n  TAB: '\\uE004',\n  CLEAR: '\\uE005',\n  RETURN: '\\uE006',\n  ENTER: '\\uE007',\n  SHIFT: '\\uE008',\n  CONTROL: '\\uE009',\n  ALT: '\\uE00A',\n  PAUSE: '\\uE00B',\n  ESCAPE: '\\uE00C',\n  SPACE: '\\uE00D',\n  PAGE_UP: '\\uE00E',\n  PAGE_DOWN: '\\uE00F',\n  END: '\\uE010',\n  HOME: '\\uE011',\n  ARROW_LEFT: '\\uE012',\n  LEFT: '\\uE012',\n  ARROW_UP: '\\uE013',\n  UP: '\\uE013',\n  ARROW_RIGHT: '\\uE014',\n  RIGHT: '\\uE014',\n  ARROW_DOWN: '\\uE015',\n  DOWN: '\\uE015',\n  INSERT: '\\uE016',\n  DELETE: '\\uE017',\n  SEMICOLON: '\\uE018',\n  EQUALS: '\\uE019',\n\n  NUMPAD0: '\\uE01A', // number pad keys\n  NUMPAD1: '\\uE01B',\n  NUMPAD2: '\\uE01C',\n  NUMPAD3: '\\uE01D',\n  NUMPAD4: '\\uE01E',\n  NUMPAD5: '\\uE01F',\n  NUMPAD6: '\\uE020',\n  NUMPAD7: '\\uE021',\n  NUMPAD8: '\\uE022',\n  NUMPAD9: '\\uE023',\n  MULTIPLY: '\\uE024',\n  ADD: '\\uE025',\n  SEPARATOR: '\\uE026',\n  SUBTRACT: '\\uE027',\n  DECIMAL: '\\uE028',\n  DIVIDE: '\\uE029',\n\n  F1: '\\uE031', // function keys\n  F2: '\\uE032',\n  F3: '\\uE033',\n  F4: '\\uE034',\n  F5: '\\uE035',\n  F6: '\\uE036',\n  F7: '\\uE037',\n  F8: '\\uE038',\n  F9: '\\uE039',\n  F10: '\\uE03A',\n  F11: '\\uE03B',\n  F12: '\\uE03C',\n\n  COMMAND: '\\uE03D', // Apple command key\n  META: '\\uE03D', // alias for Windows key\n\n  /**\n   * Japanese modifier key for switching between full- and half-width\n   * characters.\n   * @see <https://en.wikipedia.org/wiki/Language_input_keys>\n   */\n  ZENKAKU_HANKAKU: '\\uE040',\n}\n\n/**\n * Simulate pressing many keys at once in a \"chord\". Takes a sequence of\n * {@linkplain Key keys} or strings, appends each of the values to a string,\n * adds the chord termination key ({@link Key.NULL}) and returns the resulting\n * string.\n *\n * Note: when the low-level webdriver key handlers see Keys.NULL, active\n * modifier keys (CTRL/ALT/SHIFT/etc) release via a keyup event.\n *\n * @param {...string} keys The key sequence to concatenate.\n * @return {string} The null-terminated key sequence.\n */\nKey.chord = function (...keys) {\n  return keys.join('') + Key.NULL\n}\n\n/**\n * Used with {@link ./webelement.WebElement#sendKeys WebElement#sendKeys} on\n * file input elements (`<input type=\"file\">`) to detect when the entered key\n * sequence defines the path to a file.\n *\n * By default, {@linkplain ./webelement.WebElement WebElement's} will enter all\n * key sequences exactly as entered. You may set a\n * {@linkplain ./webdriver.WebDriver#setFileDetector file detector} on the\n * parent WebDriver instance to define custom behavior for handling file\n * elements. Of particular note is the\n * {@link selenium-webdriver/remote.FileDetector}, which should be used when\n * running against a remote\n * [Selenium Server](https://selenium.dev/downloads/).\n */\nclass FileDetector {\n  /**\n   * Handles the file specified by the given path, preparing it for use with\n   * the current browser. If the path does not refer to a valid file, it will\n   * be returned unchanged, otherwise a path suitable for use with the current\n   * browser will be returned.\n   *\n   * This default implementation is a no-op. Subtypes may override this function\n   * for custom tailored file handling.\n   *\n   * @param {!./webdriver.WebDriver} driver The driver for the current browser.\n   * @param {string} path The path to process.\n   * @return {!Promise<string>} A promise for the processed file path.\n   * @package\n   */\n  handleFile(_driver, path) {\n    // eslint-disable-line\n    return Promise.resolve(path)\n  }\n}\n\n/**\n * Generic description of a single action to send to the remote end.\n *\n * @record\n * @package\n */\nclass Action {\n  constructor() {\n    /** @type {!Action.Type} */\n    this.type\n    /** @type {(number|undefined)} */\n    this.duration\n    /** @type {(string|undefined)} */\n    this.value\n    /** @type {(Button|undefined)} */\n    this.button\n    /** @type {(number|undefined)} */\n    this.x\n    /** @type {(number|undefined)} */\n    this.y\n  }\n}\n\n/**\n * @enum {string}\n * @package\n * @see <https://w3c.github.io/webdriver/webdriver-spec.html#terminology-0>\n */\nAction.Type = {\n  KEY_DOWN: 'keyDown',\n  KEY_UP: 'keyUp',\n  PAUSE: 'pause',\n  POINTER_DOWN: 'pointerDown',\n  POINTER_UP: 'pointerUp',\n  POINTER_MOVE: 'pointerMove',\n  POINTER_CANCEL: 'pointerCancel',\n  SCROLL: 'scroll',\n}\n\n/**\n * Represents a user input device.\n *\n * @abstract\n */\nclass Device {\n  /**\n   * @param {Device.Type} type the input type.\n   * @param {string} id a unique ID for this device.\n   */\n  constructor(type, id) {\n    /** @private @const */ this.type_ = type\n    /** @private @const */ this.id_ = id\n  }\n\n  /** @return {!Object} the JSON encoding for this device. */\n  toJSON() {\n    return { type: this.type_, id: this.id_ }\n  }\n}\n\n/**\n * Device types supported by the WebDriver protocol.\n *\n * @enum {string}\n * @see <https://w3c.github.io/webdriver/webdriver-spec.html#input-source-state>\n */\nDevice.Type = {\n  KEY: 'key',\n  NONE: 'none',\n  POINTER: 'pointer',\n  WHEEL: 'wheel',\n}\n\n/**\n * @param {(string|Key|number)} key\n * @return {string}\n * @throws {!(InvalidArgumentError|RangeError)}\n */\nfunction checkCodePoint(key) {\n  if (typeof key === 'number') {\n    return String.fromCodePoint(key)\n  }\n\n  if (typeof key !== 'string') {\n    throw new InvalidArgumentError(`key is not a string: ${key}`)\n  }\n\n  key = key.normalize()\n  if (Array.from(key).length !== 1) {\n    throw new InvalidArgumentError(\n      `key input is not a single code point: ${key}`\n    )\n  }\n  return key\n}\n\n/**\n * Keyboard input device.\n *\n * @final\n * @see <https://www.w3.org/TR/webdriver/#dfn-key-input-source>\n */\nclass Keyboard extends Device {\n  /** @param {string} id the device ID. */\n  constructor(id) {\n    super(Device.Type.KEY, id)\n  }\n\n  /**\n   * Generates a key down action.\n   *\n   * @param {(Key|string|number)} key the key to press. This key may be\n   *     specified as a {@link Key} value, a specific unicode code point,\n   *     or a string containing a single unicode code point.\n   * @return {!Action} a new key down action.\n   * @package\n   */\n  keyDown(key) {\n    return { type: Action.Type.KEY_DOWN, value: checkCodePoint(key) }\n  }\n\n  /**\n   * Generates a key up action.\n   *\n   * @param {(Key|string|number)} key the key to press. This key may be\n   *     specified as a {@link Key} value, a specific unicode code point,\n   *     or a string containing a single unicode code point.\n   * @return {!Action} a new key up action.\n   * @package\n   */\n  keyUp(key) {\n    return { type: Action.Type.KEY_UP, value: checkCodePoint(key) }\n  }\n}\n\n/**\n * Defines the reference point from which to compute offsets for\n * {@linkplain ./input.Pointer#move pointer move} actions.\n *\n * @enum {string}\n */\nconst Origin = {\n  /** Compute offsets relative to the pointer's current position. */\n  POINTER: 'pointer',\n  /** Compute offsets relative to the viewport. */\n  VIEWPORT: 'viewport',\n}\n\n/**\n * Pointer input device.\n *\n * @final\n * @see <https://www.w3.org/TR/webdriver/#dfn-pointer-input-source>\n */\nclass Pointer extends Device {\n  /**\n   * @param {string} id the device ID.\n   * @param {Pointer.Type} type the pointer type.\n   */\n  constructor(id, type) {\n    super(Device.Type.POINTER, id)\n    /** @private @const */ this.pointerType_ = type\n  }\n\n  /** @override */\n  toJSON() {\n    return Object.assign(\n      { parameters: { pointerType: this.pointerType_ } },\n      super.toJSON()\n    )\n  }\n\n  /**\n   * @return {!Action} An action that cancels this pointer's current input.\n   * @package\n   */\n  cancel() {\n    return { type: Action.Type.POINTER_CANCEL }\n  }\n\n  /**\n   * @param {!Button=} button The button to press.\n   * @param width\n   * @param height\n   * @param pressure\n   * @param tangentialPressure\n   * @param tiltX\n   * @param tiltY\n   * @param twist\n   * @param altitudeAngle\n   * @param azimuthAngle\n   * @return {!Action} An action to press the specified button with this device.\n   * @package\n   */\n  press(\n    button = Button.LEFT,\n    width = 0,\n    height = 0,\n    pressure = 0,\n    tangentialPressure = 0,\n    tiltX = 0,\n    tiltY = 0,\n    twist = 0,\n    altitudeAngle = 0,\n    azimuthAngle = 0\n  ) {\n    return {\n      type: Action.Type.POINTER_DOWN,\n      button,\n      width,\n      height,\n      pressure,\n      tangentialPressure,\n      tiltX,\n      tiltY,\n      twist,\n      altitudeAngle,\n      azimuthAngle,\n    }\n  }\n\n  /**\n   * @param {!Button=} button The button to release.\n   * @return {!Action} An action to release the specified button with this\n   *     device.\n   * @package\n   */\n  release(button = Button.LEFT) {\n    return { type: Action.Type.POINTER_UP, button }\n  }\n\n  /**\n   * Creates an action for moving the pointer `x` and `y` pixels from the\n   * specified `origin`. The `origin` may be defined as the pointer's\n   * {@linkplain Origin.POINTER current position}, the\n   * {@linkplain Origin.VIEWPORT viewport}, or the center of a specific\n   * {@linkplain ./webdriver.WebElement WebElement}.\n   *\n   * @param {{\n   *   x: (number|undefined),\n   *   y: (number|undefined),\n   *   duration: (number|undefined),\n   *   origin: (!Origin|!./webdriver.WebElement|undefined),\n   * }=} options the move options.\n   * @return {!Action} The new action.\n   * @package\n   */\n  move({\n    x = 0,\n    y = 0,\n    duration = 100,\n    origin = Origin.VIEWPORT,\n    width = 0,\n    height = 0,\n    pressure = 0,\n    tangentialPressure = 0,\n    tiltX = 0,\n    tiltY = 0,\n    twist = 0,\n    altitudeAngle = 0,\n    azimuthAngle = 0,\n  }) {\n    return {\n      type: Action.Type.POINTER_MOVE,\n      origin,\n      duration,\n      x,\n      y,\n      width,\n      height,\n      pressure,\n      tangentialPressure,\n      tiltX,\n      tiltY,\n      twist,\n      altitudeAngle,\n      azimuthAngle,\n    }\n  }\n}\n\n/**\n * The supported types of pointers.\n * @enum {string}\n */\nPointer.Type = {\n  MOUSE: 'mouse',\n  PEN: 'pen',\n  TOUCH: 'touch',\n}\n\nclass Wheel extends Device {\n  /**\n   * @param {string} id the device ID..\n   */\n  constructor(id) {\n    super(Device.Type.WHEEL, id)\n  }\n\n  /**\n   * Scrolls a page via the coordinates given\n   * @param {number} x starting x coordinate\n   * @param {number} y starting y coordinate\n   * @param {number} deltaX Delta X to scroll to target\n   * @param {number} deltaY Delta Y to scroll to target\n   * @param {WebElement} origin element origin\n   * @param {number} duration duration ratio be the ratio of time delta and duration\n   * @returns {!Action} An action to scroll with this device.\n   */\n  scroll(x, y, deltaX, deltaY, origin, duration) {\n    return {\n      type: Action.Type.SCROLL,\n      duration: duration,\n      x: x,\n      y: y,\n      deltaX: deltaX,\n      deltaY: deltaY,\n      origin: origin,\n    }\n  }\n}\n\n/**\n * User facing API for generating complex user gestures. This class should not\n * be instantiated directly. Instead, users should create new instances by\n * calling {@link ./webdriver.WebDriver#actions WebDriver.actions()}.\n *\n * ### Action Ticks\n *\n * Action sequences are divided into a series of \"ticks\". At each tick, the\n * WebDriver remote end will perform a single action for each device included\n * in the action sequence. At tick 0, the driver will perform the first action\n * defined for each device, at tick 1 the second action for each device, and\n * so on until all actions have been executed. If an individual device does\n * not have an action defined at a particular tick, it will automatically\n * pause.\n *\n * By default, action sequences will be synchronized so only one device has a\n * define action in each tick. Consider the following code sample:\n *\n *     const actions = driver.actions();\n *\n *     await actions\n *         .keyDown(SHIFT)\n *         .move({origin: el})\n *         .press()\n *         .release()\n *         .keyUp(SHIFT)\n *         .perform();\n *\n * This sample produces the following sequence of ticks:\n *\n * | Device   | Tick 1         | Tick 2             | Tick 3  | Tick 4    | Tick 5       |\n * | -------- | -------------- | ------------------ | ------- | --------- | ------------ |\n * | Keyboard | keyDown(SHIFT) | pause()            | pause() | pause()   | keyUp(SHIFT) |\n * | Mouse    | pause()        | move({origin: el}) | press() | release() | pause()      |\n *\n * If you'd like the remote end to execute actions with multiple devices\n * simultaneously, you may pass `{async: true}` when creating the actions\n * builder. With synchronization disabled (`{async: true}`), the ticks from our\n * previous example become:\n *\n * | Device   | Tick 1             | Tick 2       | Tick 3    |\n * | -------- | ------------------ | ------------ | --------- |\n * | Keyboard | keyDown(SHIFT)     | keyUp(SHIFT) |           |\n * | Mouse    | move({origin: el}) | press()      | release() |\n *\n * When synchronization is disabled, it is your responsibility to insert\n * {@linkplain #pause() pauses} for each device, as needed:\n *\n *     const actions = driver.actions({async: true});\n *     const kb = actions.keyboard();\n *     const mouse = actions.mouse();\n *\n *     actions.keyDown(SHIFT).pause(kb).pause(kb).key(SHIFT);\n *     actions.pause(mouse).move({origin: el}).press().release();\n *     actions.perform();\n *\n * With pauses insert for individual devices, we're back to:\n *\n * | Device   | Tick 1         | Tick 2             | Tick 3  | Tick 4       |\n * | -------- | -------------- | ------------------ | ------- | ------------ |\n * | Keyboard | keyDown(SHIFT) | pause()            | pause() | keyUp(SHIFT) |\n * | Mouse    | pause()        | move({origin: el}) | press() | release()    |\n *\n * #### Tick Durations\n *\n * The length of each action tick is however long it takes the remote end to\n * execute the actions for every device in that tick. Most actions are\n * \"instantaneous\", however, {@linkplain #pause pause} and\n * {@linkplain #move pointer move} actions allow you to specify a duration for\n * how long that action should take. The remote end will always wait for all\n * actions within a tick to finish before starting the next tick, so a device\n * may implicitly pause while waiting for other devices to finish.\n *\n * | Device    | Tick 1                | Tick 2  |\n * | --------- | --------------------- | ------- |\n * | Pointer 1 | move({duration: 200}) | press() |\n * | Pointer 2 | move({duration: 300}) | press() |\n *\n * In table above, the move for Pointer 1 should only take 200 ms, but the\n * remote end will wait for the move for Pointer 2 to finish\n * (an additional 100 ms) before proceeding to Tick 2.\n *\n * This implicit waiting also applies to pauses. In the table below, even though\n * the keyboard only defines a pause of 100 ms, the remote end will wait an\n * additional 200 ms for the mouse move to finish before moving to Tick 2.\n *\n * | Device   | Tick 1                | Tick 2         |\n * | -------- | --------------------- | -------------- |\n * | Keyboard | pause(100)            | keyDown(SHIFT) |\n * | Mouse    | move({duration: 300}) |                |\n *\n * [client rect]: https://developer.mozilla.org/en-US/docs/Web/API/Element/getClientRects\n * [bounding client rect]: https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect\n *\n * @final\n * @see <https://www.w3.org/TR/webdriver/#actions>\n */\nclass Actions {\n  /**\n   * @param {!Executor} executor The object to execute the configured\n   *     actions with.\n   * @param {{async: (boolean|undefined)}} options Options for this action\n   *     sequence (see class description for details).\n   */\n  constructor(executor, { async = false } = {}) {\n    /** @private @const */\n    this.executor_ = executor\n\n    /** @private @const */\n    this.sync_ = !async\n\n    /** @private @const */\n    this.keyboard_ = new Keyboard('default keyboard')\n\n    /** @private @const */\n    this.mouse_ = new Pointer('default mouse', Pointer.Type.MOUSE)\n\n    /** @private @const */\n    this.wheel_ = new Wheel('default wheel')\n\n    /** @private @const {!Map<!Device, !Array<!Action>>} */\n    this.sequences_ = new Map([\n      [this.keyboard_, []],\n      [this.mouse_, []],\n      [this.wheel_, []],\n    ])\n  }\n\n  /** @return {!Keyboard} the keyboard device handle. */\n  keyboard() {\n    return this.keyboard_\n  }\n\n  /** @return {!Pointer} the mouse pointer device handle. */\n  mouse() {\n    return this.mouse_\n  }\n\n  /** @return {!Wheel} the wheel device handle. */\n  wheel() {\n    return this.wheel_\n  }\n\n  /**\n   * @param {!Device} device\n   * @return {!Array<!Action>}\n   * @private\n   */\n  sequence_(device) {\n    let sequence = this.sequences_.get(device)\n    if (!sequence) {\n      sequence = []\n      this.sequences_.set(device, sequence)\n    }\n    return sequence\n  }\n\n  /**\n   * Appends `actions` to the end of the current sequence for the given\n   * `device`. If device synchronization is enabled, after inserting the\n   * actions, pauses will be inserted for all other devices to ensure all action\n   * sequences are the same length.\n   *\n   * @param {!Device} device the device to update.\n   * @param {...!Action} actions the actions to insert.\n   * @return {!Actions} a self reference.\n   */\n  insert(device, ...actions) {\n    this.sequence_(device).push(...actions)\n    return this.sync_ ? this.synchronize() : this\n  }\n\n  /**\n   * Ensures the action sequence for every device referenced in this action\n   * sequence is the same length. For devices whose sequence is too short,\n   * this will insert {@linkplain #pause pauses} so that every device has an\n   * explicit action defined at each tick.\n   *\n   * @param {...!Device} devices The specific devices to synchronize.\n   *     If unspecified, the action sequences for every device will be\n   *     synchronized.\n   * @return {!Actions} a self reference.\n   */\n  synchronize(...devices) {\n    let sequences\n    let max = 0\n    if (devices.length === 0) {\n      for (const s of this.sequences_.values()) {\n        max = Math.max(max, s.length)\n      }\n      sequences = this.sequences_.values()\n    } else {\n      sequences = []\n      for (const device of devices) {\n        const seq = this.sequence_(device)\n        max = Math.max(max, seq.length)\n        sequences.push(seq)\n      }\n    }\n\n    const pause = { type: Action.Type.PAUSE, duration: 0 }\n    for (const seq of sequences) {\n      while (seq.length < max) {\n        seq.push(pause)\n      }\n    }\n\n    return this\n  }\n\n  /**\n   * Inserts a pause action for the specified devices, ensuring each device is\n   * idle for a tick. The length of the pause (in milliseconds) may be specified\n   * as the first parameter to this method (defaults to 0). Otherwise, you may\n   * just specify the individual devices that should pause.\n   *\n   * If no devices are specified, a pause action will be created (using the same\n   * duration) for every device.\n   *\n   * When device synchronization is enabled (the default for new {@link Actions}\n   * objects), there is no need to specify devices as pausing one automatically\n   * pauses the others for the same duration. In other words, the following are\n   * all equivalent:\n   *\n   *     let a1 = driver.actions();\n   *     a1.pause(100).perform();\n   *\n   *     let a2 = driver.actions();\n   *     a2.pause(100, a2.keyboard()).perform();\n   *     // Synchronization ensures a2.mouse() is automatically paused too.\n   *\n   *     let a3 = driver.actions();\n   *     a3.pause(100, a3.keyboard(), a3.mouse()).perform();\n   *\n   * When device synchronization is _disabled_, you can cause individual devices\n   * to pause during a tick. For example, to hold the SHIFT key down while\n   * moving the mouse:\n   *\n   *     let actions = driver.actions({async: true});\n   *\n   *     actions.keyDown(Key.SHIFT);\n   *     actions.pause(actions.mouse())  // Pause for shift down\n   *         .press(Button.LEFT)\n   *         .move({x: 10, y: 10})\n   *         .release(Button.LEFT);\n   *     actions\n   *         .pause(\n   *             actions.keyboard(),  // Pause for press left\n   *             actions.keyboard(),  // Pause for move\n   *             actions.keyboard())  // Pause for release left\n   *        .keyUp(Key.SHIFT);\n   *     await actions.perform();\n   *\n   * @param {(number|!Device)=} duration The length of the pause to insert, in\n   *     milliseconds. Alternatively, the duration may be omitted (yielding a\n   *     default 0 ms pause), and the first device to pause may be specified.\n   * @param {...!Device} devices The devices to insert the pause for. If no\n   *     devices are specified, the pause will be inserted for _all_ devices.\n   * @return {!Actions} a self reference.\n   */\n  pause(duration, ...devices) {\n    if (duration instanceof Device) {\n      devices.push(duration)\n      duration = 0\n    } else if (!duration) {\n      duration = 0\n    }\n\n    const action = { type: Action.Type.PAUSE, duration }\n\n    // NB: need a properly typed variable for type checking.\n    /** @type {!Iterable<!Device>} */\n    const iterable = devices.length === 0 ? this.sequences_.keys() : devices\n    for (const device of iterable) {\n      this.sequence_(device).push(action)\n    }\n    return this.sync_ ? this.synchronize() : this\n  }\n\n  /**\n   * Inserts an action to press a single key.\n   *\n   * @param {(Key|string|number)} key the key to press. This key may be\n   *     specified as a {@link Key} value, a specific unicode code point,\n   *     or a string containing a single unicode code point.\n   * @return {!Actions} a self reference.\n   */\n  keyDown(key) {\n    return this.insert(this.keyboard_, this.keyboard_.keyDown(key))\n  }\n\n  /**\n   * Inserts an action to release a single key.\n   *\n   * @param {(Key|string|number)} key the key to release. This key may be\n   *     specified as a {@link Key} value, a specific unicode code point,\n   *     or a string containing a single unicode code point.\n   * @return {!Actions} a self reference.\n   */\n  keyUp(key) {\n    return this.insert(this.keyboard_, this.keyboard_.keyUp(key))\n  }\n\n  /**\n   * Inserts a sequence of actions to type the provided key sequence.\n   * For each key, this will record a pair of {@linkplain #keyDown keyDown}\n   * and {@linkplain #keyUp keyUp} actions. An implication of this pairing\n   * is that modifier keys (e.g. {@link ./input.Key.SHIFT Key.SHIFT}) will\n   * always be immediately released. In other words, `sendKeys(Key.SHIFT, 'a')`\n   * is the same as typing `sendKeys('a')`, _not_ `sendKeys('A')`.\n   *\n   * @param {...(Key|string|number)} keys the keys to type.\n   * @return {!Actions} a self reference.\n   */\n  sendKeys(...keys) {\n    const { WebElement } = require('./webdriver')\n\n    const actions = []\n    if (keys.length > 1 && keys[0] instanceof WebElement) {\n      this.click(keys[0])\n      keys.shift()\n    }\n    for (const key of keys) {\n      if (typeof key === 'string') {\n        for (const symbol of key) {\n          actions.push(\n            this.keyboard_.keyDown(symbol),\n            this.keyboard_.keyUp(symbol)\n          )\n        }\n      } else {\n        actions.push(this.keyboard_.keyDown(key), this.keyboard_.keyUp(key))\n      }\n    }\n    return this.insert(this.keyboard_, ...actions)\n  }\n\n  /**\n   * Inserts an action to press a mouse button at the mouse's current location.\n   *\n   * @param {!Button=} button The button to press; defaults to `LEFT`.\n   * @return {!Actions} a self reference.\n   */\n  press(button = Button.LEFT) {\n    return this.insert(this.mouse_, this.mouse_.press(button))\n  }\n\n  /**\n   * Inserts an action to release a mouse button at the mouse's current\n   * location.\n   *\n   * @param {!Button=} button The button to release; defaults to `LEFT`.\n   * @return {!Actions} a self reference.\n   */\n  release(button = Button.LEFT) {\n    return this.insert(this.mouse_, this.mouse_.release(button))\n  }\n\n  /**\n   * scrolls a page via the coordinates given\n   * @param {number} x starting x coordinate\n   * @param {number} y starting y coordinate\n   * @param {number} deltax delta x to scroll to target\n   * @param {number} deltay delta y to scroll to target\n   * @param {number} duration duration ratio be the ratio of time delta and duration\n   * @returns {!Actions} An action to scroll with this device.\n   */\n  scroll(x, y, targetDeltaX, targetDeltaY, origin, duration) {\n    return this.insert(\n      this.wheel_,\n      this.wheel_.scroll(x, y, targetDeltaX, targetDeltaY, origin, duration)\n    )\n  }\n\n  /**\n   * Inserts an action for moving the mouse `x` and `y` pixels relative to the\n   * specified `origin`. The `origin` may be defined as the mouse's\n   * {@linkplain ./input.Origin.POINTER current position}, the top-left corner of the\n   * {@linkplain ./input.Origin.VIEWPORT viewport}, or the center of a specific\n   * {@linkplain ./webdriver.WebElement WebElement}. Default is top left corner of the view-port if origin is not specified\n   *\n   * You may adjust how long the remote end should take, in milliseconds, to\n   * perform the move using the `duration` parameter (defaults to 100 ms).\n   * The number of incremental move events generated over this duration is an\n   * implementation detail for the remote end.\n   *\n   * @param {{\n   *   x: (number|undefined),\n   *   y: (number|undefined),\n   *   duration: (number|undefined),\n   *   origin: (!Origin|!./webdriver.WebElement|undefined),\n   * }=} options The move options. Defaults to moving the mouse to the top-left\n   *     corner of the viewport over 100ms.\n   * @return {!Actions} a self reference.\n   */\n  move({ x = 0, y = 0, duration = 100, origin = Origin.VIEWPORT } = {}) {\n    return this.insert(\n      this.mouse_,\n      this.mouse_.move({ x, y, duration, origin })\n    )\n  }\n\n  /**\n   * Short-hand for performing a simple left-click (down/up) with the mouse.\n   *\n   * @param {./webdriver.WebElement=} element If specified, the mouse will\n   *     first be moved to the center of the element before performing the\n   *     click.\n   * @return {!Actions} a self reference.\n   */\n  click(element) {\n    if (element) {\n      this.move({ origin: element })\n    }\n    return this.press().release()\n  }\n\n  /**\n   * Short-hand for performing a simple right-click (down/up) with the mouse.\n   *\n   * @param {./webdriver.WebElement=} element If specified, the mouse will\n   *     first be moved to the center of the element before performing the\n   *     click.\n   * @return {!Actions} a self reference.\n   */\n  contextClick(element) {\n    if (element) {\n      this.move({ origin: element })\n    }\n    return this.press(Button.RIGHT).release(Button.RIGHT)\n  }\n\n  /**\n   * Short-hand for performing a double left-click with the mouse.\n   *\n   * @param {./webdriver.WebElement=} element If specified, the mouse will\n   *     first be moved to the center of the element before performing the\n   *     click.\n   * @return {!Actions} a self reference.\n   */\n  doubleClick(element) {\n    return this.click(element).press().release()\n  }\n\n  /**\n   * Configures a drag-and-drop action consisting of the following steps:\n   *\n   * 1.  Move to the center of the `from` element (element to be dragged).\n   * 2.  Press the left mouse button.\n   * 3.  If the `to` target is a {@linkplain ./webdriver.WebElement WebElement},\n   *     move the mouse to its center. Otherwise, move the mouse by the\n   *     specified offset.\n   * 4.  Release the left mouse button.\n   *\n   * @param {!./webdriver.WebElement} from The element to press the left mouse\n   *     button on to start the drag.\n   * @param {(!./webdriver.WebElement|{x: number, y: number})} to Either another\n   *     element to drag to (will drag to the center of the element), or an\n   *     object specifying the offset to drag by, in pixels.\n   * @return {!Actions} a self reference.\n   */\n  dragAndDrop(from, to) {\n    // Do not require up top to avoid a cycle that breaks static analysis.\n    const { WebElement } = require('./webdriver')\n    if (\n      !(to instanceof WebElement) &&\n      (!to || typeof to.x !== 'number' || typeof to.y !== 'number')\n    ) {\n      throw new InvalidArgumentError(\n        'Invalid drag target; must specify a WebElement or {x, y} offset'\n      )\n    }\n\n    this.move({ origin: from }).press()\n    if (to instanceof WebElement) {\n      this.move({ origin: to })\n    } else {\n      this.move({ x: to.x, y: to.y, origin: Origin.POINTER })\n    }\n    return this.release()\n  }\n\n  /**\n   * Releases all keys, pointers, and clears internal state.\n   *\n   * @return {!Promise<void>} a promise that will resolve when finished\n   *     clearing all action state.\n   */\n  clear() {\n    for (const s of this.sequences_.values()) {\n      s.length = 0\n    }\n    return this.executor_.execute(new Command(Name.CLEAR_ACTIONS))\n  }\n\n  /**\n   * Performs the configured action sequence.\n   *\n   * @return {!Promise<void>} a promise that will resolve when all actions have\n   *     been completed.\n   */\n  async perform() {\n    const _actions = []\n    this.sequences_.forEach((actions, device) => {\n      if (!isIdle(actions)) {\n        actions = actions.concat() // Defensive copy.\n        _actions.push(Object.assign({ actions }, device.toJSON()))\n      }\n    })\n\n    if (_actions.length === 0) {\n      return Promise.resolve()\n    }\n\n    await this.executor_.execute(\n      new Command(Name.ACTIONS).setParameter('actions', _actions)\n    )\n  }\n}\n\n/**\n * @param {!Array<!Action>} actions\n * @return {boolean}\n */\nfunction isIdle(actions) {\n  return (\n    actions.length === 0 ||\n    actions.every((a) => a.type === Action.Type.PAUSE && !a.duration)\n  )\n}\n\n/**\n * Script used to compute the offset from the center of a DOM element's first\n * client rect from the top-left corner of the element's bounding client rect.\n * The element's center point is computed using the algorithm defined here:\n * <https://w3c.github.io/webdriver/webdriver-spec.html#dfn-center-point>.\n *\n * __This is only exported for use in internal unit tests. DO NOT USE.__\n *\n * @package\n */\nconst INTERNAL_COMPUTE_OFFSET_SCRIPT = `\nfunction computeOffset(el) {\n  var rect = el.getClientRects()[0];\n  var left = Math.max(0, Math.min(rect.x, rect.x + rect.width));\n  var right =\n      Math.min(window.innerWidth, Math.max(rect.x, rect.x + rect.width));\n  var top = Math.max(0, Math.min(rect.y, rect.y + rect.height));\n  var bot =\n      Math.min(window.innerHeight, Math.max(rect.y, rect.y + rect.height));\n  var x = Math.floor(0.5 * (left + right));\n  var y = Math.floor(0.5 * (top + bot));\n\n  var bbox = el.getBoundingClientRect();\n  return [x - bbox.left, y - bbox.top];\n}\nreturn computeOffset(arguments[0]);`\n\n// PUBLIC API\n\nmodule.exports = {\n  Action, // For documentation only.\n  Actions,\n  Button,\n  Device,\n  Key,\n  Keyboard,\n  FileDetector,\n  Origin,\n  Pointer,\n  INTERNAL_COMPUTE_OFFSET_SCRIPT,\n}\n"],"mappings":"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AACA;AACA;AACA;EATEvG,YAAA,CAAAuK,KAAA;IAAAtF,GAAA;IAAAC,KAAA,EAUA,SAAAwF,OAAO9E,CAAC,EAAEC,CAAC,EAAE8E,MAAM,EAAEC,MAAM,EAAElB,MAAM,EAAEhE,QAAQ,EAAE;MAC7C,OAAO;QACLD,IAAI,EAAED,MAAM,CAACM,IAAI,CAACO,MAAM;QACxBX,QAAQ,EAAEA,QAAQ;QAClBE,CAAC,EAAEA,CAAC;QACJC,CAAC,EAAEA,CAAC;QACJ8E,MAAM,EAAEA,MAAM;QACdC,MAAM,EAAEA,MAAM;QACdlB,MAAM,EAAEA;MACV,CAAC;IACH;EAAC;EAAA,OAAAa,KAAA;AAAA,EA5BiBjE,MAAM;AA+B1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhGA,IAiGMuE,OAAO;EACX;AACF;AACA;AACA;AACA;AACA;EACE,SAAAA,QAAYC,QAAQ,EAA0B;IAAA,IAAAC,KAAA,GAAArG,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAA+D,SAAA,GAAA/D,SAAA,MAAJ,CAAC,CAAC;MAAAsG,WAAA,GAAAD,KAAA,CAApBE,KAAK;MAALA,KAAK,GAAAD,WAAA,cAAG,KAAK,GAAAA,WAAA;IAAAjL,eAAA,OAAA8K,OAAA;IACnC;IACA,IAAI,CAACK,SAAS,GAAGJ,QAAQ;;IAEzB;IACA,IAAI,CAACK,KAAK,GAAG,CAACF,KAAK;;IAEnB;IACA,IAAI,CAACG,SAAS,GAAG,IAAI/D,QAAQ,CAAC,kBAAkB,CAAC;;IAEjD;IACA,IAAI,CAACgE,MAAM,GAAG,IAAIxD,OAAO,CAAC,eAAe,EAAEA,OAAO,CAAC/B,IAAI,CAACsE,KAAK,CAAC;;IAE9D;IACA,IAAI,CAACkB,MAAM,GAAG,IAAIf,KAAK,CAAC,eAAe,CAAC;;IAExC;IACA,IAAI,CAACgB,UAAU,GAAG,IAAIC,GAAG,CAAC,CACxB,CAAC,IAAI,CAACJ,SAAS,EAAE,EAAE,CAAC,EACpB,CAAC,IAAI,CAACC,MAAM,EAAE,EAAE,CAAC,EACjB,CAAC,IAAI,CAACC,MAAM,EAAE,EAAE,CAAC,CAClB,CAAC;EACJ;;EAEA;EAAAtL,YAAA,CAAA6K,OAAA;IAAA5F,GAAA;IAAAC,KAAA,EACA,SAAAuG,SAAA,EAAW;MACT,OAAO,IAAI,CAACL,SAAS;IACvB;;IAEA;EAAA;IAAAnG,GAAA;IAAAC,KAAA,EACA,SAAAwG,MAAA,EAAQ;MACN,OAAO,IAAI,CAACL,MAAM;IACpB;;IAEA;EAAA;IAAApG,GAAA;IAAAC,KAAA,EACA,SAAAyG,MAAA,EAAQ;MACN,OAAO,IAAI,CAACL,MAAM;IACpB;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAArG,GAAA;IAAAC,KAAA,EAKA,SAAA0G,UAAUC,MAAM,EAAE;MAChB,IAAIC,QAAQ,GAAG,IAAI,CAACP,UAAU,CAACQ,GAAG,CAACF,MAAM,CAAC;MAC1C,IAAI,CAACC,QAAQ,EAAE;QACbA,QAAQ,GAAG,EAAE;QACb,IAAI,CAACP,UAAU,CAACS,GAAG,CAACH,MAAM,EAAEC,QAAQ,CAAC;MACvC;MACA,OAAOA,QAAQ;IACjB;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EATE;IAAA7G,GAAA;IAAAC,KAAA,EAUA,SAAA+G,OAAOJ,MAAM,EAAc;MAAA,IAAAK,eAAA;MAAA,SAAAC,KAAA,GAAAzH,SAAA,CAAAC,MAAA,EAATyH,OAAO,OAAAvH,KAAA,CAAAsH,KAAA,OAAAA,KAAA,WAAAE,KAAA,MAAAA,KAAA,GAAAF,KAAA,EAAAE,KAAA;QAAPD,OAAO,CAAAC,KAAA,QAAA3H,SAAA,CAAA2H,KAAA;MAAA;MACvB,CAAAH,eAAA,OAAI,CAACN,SAAS,CAACC,MAAM,CAAC,EAACS,IAAI,CAAAC,KAAA,CAAAL,eAAA,EAAIE,OAAO,CAAC;MACvC,OAAO,IAAI,CAACjB,KAAK,GAAG,IAAI,CAACqB,WAAW,CAAC,CAAC,GAAG,IAAI;IAC/C;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAVE;IAAAvH,GAAA;IAAAC,KAAA,EAWA,SAAAsH,YAAA,EAAwB;MACtB,IAAIC,SAAS;MACb,IAAIC,GAAG,GAAG,CAAC;MAAA,SAAAC,KAAA,GAAAjI,SAAA,CAAAC,MAAA,EAFEiI,OAAO,OAAA/H,KAAA,CAAA8H,KAAA,GAAAE,KAAA,MAAAA,KAAA,GAAAF,KAAA,EAAAE,KAAA;QAAPD,OAAO,CAAAC,KAAA,IAAAnI,SAAA,CAAAmI,KAAA;MAAA;MAGpB,IAAID,OAAO,CAACjI,MAAM,KAAK,CAAC,EAAE;QAAA,IAAAmI,SAAA,GAAApN,0BAAA,CACR,IAAI,CAAC6L,UAAU,CAACwB,MAAM,CAAC,CAAC;UAAAC,KAAA;QAAA;UAAxC,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAA0C;YAAA,IAA/BF,CAAC,GAAAD,KAAA,CAAA9H,KAAA;YACVwH,GAAG,GAAGU,IAAI,CAACV,GAAG,CAACA,GAAG,EAAEO,CAAC,CAACtI,MAAM,CAAC;UAC/B;QAAC,SAAA0I,GAAA;UAAAP,SAAA,CAAAQ,CAAA,CAAAD,GAAA;QAAA;UAAAP,SAAA,CAAAS,CAAA;QAAA;QACDd,SAAS,GAAG,IAAI,CAAClB,UAAU,CAACwB,MAAM,CAAC,CAAC;MACtC,CAAC,MAAM;QACLN,SAAS,GAAG,EAAE;QAAA,IAAAe,UAAA,GAAA9N,0BAAA,CACOkN,OAAO;UAAAa,MAAA;QAAA;UAA5B,KAAAD,UAAA,CAAAP,CAAA,MAAAQ,MAAA,GAAAD,UAAA,CAAAN,CAAA,IAAAC,IAAA,GAA8B;YAAA,IAAnBtB,MAAM,GAAA4B,MAAA,CAAAvI,KAAA;YACf,IAAMwI,GAAG,GAAG,IAAI,CAAC9B,SAAS,CAACC,MAAM,CAAC;YAClCa,GAAG,GAAGU,IAAI,CAACV,GAAG,CAACA,GAAG,EAAEgB,GAAG,CAAC/I,MAAM,CAAC;YAC/B8H,SAAS,CAACH,IAAI,CAACoB,GAAG,CAAC;UACrB;QAAC,SAAAL,GAAA;UAAAG,UAAA,CAAAF,CAAA,CAAAD,GAAA;QAAA;UAAAG,UAAA,CAAAD,CAAA;QAAA;MACH;MAEA,IAAMI,KAAK,GAAG;QAAElI,IAAI,EAAED,MAAM,CAACM,IAAI,CAACtE,KAAK;QAAEkE,QAAQ,EAAE;MAAE,CAAC;MAAA,IAAAkI,UAAA,GAAAlO,0BAAA,CACpC+M,SAAS;QAAAoB,MAAA;MAAA;QAA3B,KAAAD,UAAA,CAAAX,CAAA,MAAAY,MAAA,GAAAD,UAAA,CAAAV,CAAA,IAAAC,IAAA,GAA6B;UAAA,IAAlBO,IAAG,GAAAG,MAAA,CAAA3I,KAAA;UACZ,OAAOwI,IAAG,CAAC/I,MAAM,GAAG+H,GAAG,EAAE;YACvBgB,IAAG,CAACpB,IAAI,CAACqB,KAAK,CAAC;UACjB;QACF;MAAC,SAAAN,GAAA;QAAAO,UAAA,CAAAN,CAAA,CAAAD,GAAA;MAAA;QAAAO,UAAA,CAAAL,CAAA;MAAA;MAED,OAAO,IAAI;IACb;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAjDE;IAAAtI,GAAA;IAAAC,KAAA,EAkDA,SAAAyI,MAAMjI,QAAQ,EAAc;MAAA,SAAAoI,KAAA,GAAApJ,SAAA,CAAAC,MAAA,EAATiI,OAAO,OAAA/H,KAAA,CAAAiJ,KAAA,OAAAA,KAAA,WAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;QAAPnB,OAAO,CAAAmB,KAAA,QAAArJ,SAAA,CAAAqJ,KAAA;MAAA;MACxB,IAAIrI,QAAQ,YAAYY,MAAM,EAAE;QAC9BsG,OAAO,CAACN,IAAI,CAAC5G,QAAQ,CAAC;QACtBA,QAAQ,GAAG,CAAC;MACd,CAAC,MAAM,IAAI,CAACA,QAAQ,EAAE;QACpBA,QAAQ,GAAG,CAAC;MACd;MAEA,IAAMsI,MAAM,GAAG;QAAEvI,IAAI,EAAED,MAAM,CAACM,IAAI,CAACtE,KAAK;QAAEkE,QAAQ,EAARA;MAAS,CAAC;;MAEpD;MACA;MACA,IAAMuI,QAAQ,GAAGrB,OAAO,CAACjI,MAAM,KAAK,CAAC,GAAG,IAAI,CAAC4G,UAAU,CAAC3G,IAAI,CAAC,CAAC,GAAGgI,OAAO;MAAA,IAAAsB,UAAA,GAAAxO,0BAAA,CACnDuO,QAAQ;QAAAE,MAAA;MAAA;QAA7B,KAAAD,UAAA,CAAAjB,CAAA,MAAAkB,MAAA,GAAAD,UAAA,CAAAhB,CAAA,IAAAC,IAAA,GAA+B;UAAA,IAApBtB,MAAM,GAAAsC,MAAA,CAAAjJ,KAAA;UACf,IAAI,CAAC0G,SAAS,CAACC,MAAM,CAAC,CAACS,IAAI,CAAC0B,MAAM,CAAC;QACrC;MAAC,SAAAX,GAAA;QAAAa,UAAA,CAAAZ,CAAA,CAAAD,GAAA;MAAA;QAAAa,UAAA,CAAAX,CAAA;MAAA;MACD,OAAO,IAAI,CAACpC,KAAK,GAAG,IAAI,CAACqB,WAAW,CAAC,CAAC,GAAG,IAAI;IAC/C;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EAPE;IAAAvH,GAAA;IAAAC,KAAA,EAQA,SAAAuC,QAAQxC,GAAG,EAAE;MACX,OAAO,IAAI,CAACgH,MAAM,CAAC,IAAI,CAACb,SAAS,EAAE,IAAI,CAACA,SAAS,CAAC3D,OAAO,CAACxC,GAAG,CAAC,CAAC;IACjE;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EAPE;IAAAA,GAAA;IAAAC,KAAA,EAQA,SAAAwC,MAAMzC,GAAG,EAAE;MACT,OAAO,IAAI,CAACgH,MAAM,CAAC,IAAI,CAACb,SAAS,EAAE,IAAI,CAACA,SAAS,CAAC1D,KAAK,CAACzC,GAAG,CAAC,CAAC;IAC/D;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAVE;IAAAA,GAAA;IAAAC,KAAA,EAWA,SAAAkJ,SAAA,EAAkB;MAChB,IAAAC,SAAA,GAAuB9O,OAAO,CAAC,aAAa,CAAC;QAArC+O,UAAU,GAAAD,SAAA,CAAVC,UAAU;MAElB,IAAMlC,OAAO,GAAG,EAAE;MAAA,SAAAmC,KAAA,GAAA7J,SAAA,CAAAC,MAAA,EAHRC,IAAI,OAAAC,KAAA,CAAA0J,KAAA,GAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;QAAJ5J,IAAI,CAAA4J,KAAA,IAAA9J,SAAA,CAAA8J,KAAA;MAAA;MAId,IAAI5J,IAAI,CAACD,MAAM,GAAG,CAAC,IAAIC,IAAI,CAAC,CAAC,CAAC,YAAY0J,UAAU,EAAE;QACpD,IAAI,CAACG,KAAK,CAAC7J,IAAI,CAAC,CAAC,CAAC,CAAC;QACnBA,IAAI,CAAC8J,KAAK,CAAC,CAAC;MACd;MACA,SAAAC,EAAA,MAAAC,KAAA,GAAkBhK,IAAI,EAAA+J,EAAA,GAAAC,KAAA,CAAAjK,MAAA,EAAAgK,EAAA,IAAE;QAAnB,IAAM1J,GAAG,GAAA2J,KAAA,CAAAD,EAAA;QACZ,IAAI,OAAO1J,GAAG,KAAK,QAAQ,EAAE;UAAA,IAAA4J,UAAA,GAAAnP,0BAAA,CACNuF,GAAG;YAAA6J,MAAA;UAAA;YAAxB,KAAAD,UAAA,CAAA5B,CAAA,MAAA6B,MAAA,GAAAD,UAAA,CAAA3B,CAAA,IAAAC,IAAA,GAA0B;cAAA,IAAf4B,MAAM,GAAAD,MAAA,CAAA5J,KAAA;cACfkH,OAAO,CAACE,IAAI,CACV,IAAI,CAAClB,SAAS,CAAC3D,OAAO,CAACsH,MAAM,CAAC,EAC9B,IAAI,CAAC3D,SAAS,CAAC1D,KAAK,CAACqH,MAAM,CAC7B,CAAC;YACH;UAAC,SAAA1B,GAAA;YAAAwB,UAAA,CAAAvB,CAAA,CAAAD,GAAA;UAAA;YAAAwB,UAAA,CAAAtB,CAAA;UAAA;QACH,CAAC,MAAM;UACLnB,OAAO,CAACE,IAAI,CAAC,IAAI,CAAClB,SAAS,CAAC3D,OAAO,CAACxC,GAAG,CAAC,EAAE,IAAI,CAACmG,SAAS,CAAC1D,KAAK,CAACzC,GAAG,CAAC,CAAC;QACtE;MACF;MACA,OAAO,IAAI,CAACgH,MAAM,CAAAM,KAAA,CAAX,IAAI,GAAQ,IAAI,CAACnB,SAAS,EAAAlE,MAAA,CAAKkF,OAAO,EAAC;IAChD;;IAEA;AACF;AACA;AACA;AACA;AACA;EALE;IAAAnH,GAAA;IAAAC,KAAA,EAMA,SAAAsD,MAAA,EAA4B;MAAA,IAAtB7C,MAAM,GAAAjB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAA+D,SAAA,GAAA/D,SAAA,MAAGpE,MAAM,CAACC,IAAI;MACxB,OAAO,IAAI,CAAC0L,MAAM,CAAC,IAAI,CAACZ,MAAM,EAAE,IAAI,CAACA,MAAM,CAAC7C,KAAK,CAAC7C,MAAM,CAAC,CAAC;IAC5D;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;EANE;IAAAV,GAAA;IAAAC,KAAA,EAOA,SAAAiE,QAAA,EAA8B;MAAA,IAAtBxD,MAAM,GAAAjB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAA+D,SAAA,GAAA/D,SAAA,MAAGpE,MAAM,CAACC,IAAI;MAC1B,OAAO,IAAI,CAAC0L,MAAM,CAAC,IAAI,CAACZ,MAAM,EAAE,IAAI,CAACA,MAAM,CAAClC,OAAO,CAACxD,MAAM,CAAC,CAAC;IAC9D;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EARE;IAAAV,GAAA;IAAAC,KAAA,EASA,SAAAwF,OAAO9E,CAAC,EAAEC,CAAC,EAAEmJ,YAAY,EAAEC,YAAY,EAAEvF,MAAM,EAAEhE,QAAQ,EAAE;MACzD,OAAO,IAAI,CAACuG,MAAM,CAChB,IAAI,CAACX,MAAM,EACX,IAAI,CAACA,MAAM,CAACZ,MAAM,CAAC9E,CAAC,EAAEC,CAAC,EAAEmJ,YAAY,EAAEC,YAAY,EAAEvF,MAAM,EAAEhE,QAAQ,CACvE,CAAC;IACH;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EApBE;IAAAT,GAAA;IAAAC,KAAA,EAqBA,SAAAkE,KAAA,EAAsE;MAAA,IAAA8F,KAAA,GAAAxK,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAA+D,SAAA,GAAA/D,SAAA,MAAJ,CAAC,CAAC;QAAAyK,OAAA,GAAAD,KAAA,CAA7DtJ,CAAC;QAADA,CAAC,GAAAuJ,OAAA,cAAG,CAAC,GAAAA,OAAA;QAAAC,OAAA,GAAAF,KAAA,CAAErJ,CAAC;QAADA,CAAC,GAAAuJ,OAAA,cAAG,CAAC,GAAAA,OAAA;QAAAC,cAAA,GAAAH,KAAA,CAAExJ,QAAQ;QAARA,QAAQ,GAAA2J,cAAA,cAAG,GAAG,GAAAA,cAAA;QAAAC,YAAA,GAAAJ,KAAA,CAAExF,MAAM;QAANA,MAAM,GAAA4F,YAAA,cAAG3H,MAAM,CAACC,QAAQ,GAAA0H,YAAA;MAC3D,OAAO,IAAI,CAACrD,MAAM,CAChB,IAAI,CAACZ,MAAM,EACX,IAAI,CAACA,MAAM,CAACjC,IAAI,CAAC;QAAExD,CAAC,EAADA,CAAC;QAAEC,CAAC,EAADA,CAAC;QAAEH,QAAQ,EAARA,QAAQ;QAAEgE,MAAM,EAANA;MAAO,CAAC,CAC7C,CAAC;IACH;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EAPE;IAAAzE,GAAA;IAAAC,KAAA,EAQA,SAAAuJ,MAAMc,OAAO,EAAE;MACb,IAAIA,OAAO,EAAE;QACX,IAAI,CAACnG,IAAI,CAAC;UAAEM,MAAM,EAAE6F;QAAQ,CAAC,CAAC;MAChC;MACA,OAAO,IAAI,CAAC/G,KAAK,CAAC,CAAC,CAACW,OAAO,CAAC,CAAC;IAC/B;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EAPE;IAAAlE,GAAA;IAAAC,KAAA,EAQA,SAAAsK,aAAaD,OAAO,EAAE;MACpB,IAAIA,OAAO,EAAE;QACX,IAAI,CAACnG,IAAI,CAAC;UAAEM,MAAM,EAAE6F;QAAQ,CAAC,CAAC;MAChC;MACA,OAAO,IAAI,CAAC/G,KAAK,CAAClI,MAAM,CAACG,KAAK,CAAC,CAAC0I,OAAO,CAAC7I,MAAM,CAACG,KAAK,CAAC;IACvD;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EAPE;IAAAwE,GAAA;IAAAC,KAAA,EAQA,SAAAuK,YAAYF,OAAO,EAAE;MACnB,OAAO,IAAI,CAACd,KAAK,CAACc,OAAO,CAAC,CAAC/G,KAAK,CAAC,CAAC,CAACW,OAAO,CAAC,CAAC;IAC9C;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAhBE;IAAAlE,GAAA;IAAAC,KAAA,EAiBA,SAAAwK,YAAYtI,IAAI,EAAEuI,EAAE,EAAE;MACpB;MACA,IAAAC,SAAA,GAAuBrQ,OAAO,CAAC,aAAa,CAAC;QAArC+O,UAAU,GAAAsB,SAAA,CAAVtB,UAAU;MAClB,IACE,EAAEqB,EAAE,YAAYrB,UAAU,CAAC,KAC1B,CAACqB,EAAE,IAAI,OAAOA,EAAE,CAAC/J,CAAC,KAAK,QAAQ,IAAI,OAAO+J,EAAE,CAAC9J,CAAC,KAAK,QAAQ,CAAC,EAC7D;QACA,MAAM,IAAIxF,oBAAoB,CAC5B,iEACF,CAAC;MACH;MAEA,IAAI,CAAC+I,IAAI,CAAC;QAAEM,MAAM,EAAEtC;MAAK,CAAC,CAAC,CAACoB,KAAK,CAAC,CAAC;MACnC,IAAImH,EAAE,YAAYrB,UAAU,EAAE;QAC5B,IAAI,CAAClF,IAAI,CAAC;UAAEM,MAAM,EAAEiG;QAAG,CAAC,CAAC;MAC3B,CAAC,MAAM;QACL,IAAI,CAACvG,IAAI,CAAC;UAAExD,CAAC,EAAE+J,EAAE,CAAC/J,CAAC;UAAEC,CAAC,EAAE8J,EAAE,CAAC9J,CAAC;UAAE6D,MAAM,EAAE/B,MAAM,CAACd;QAAQ,CAAC,CAAC;MACzD;MACA,OAAO,IAAI,CAACsC,OAAO,CAAC,CAAC;IACvB;;IAEA;AACF;AACA;AACA;AACA;AACA;EALE;IAAAlE,GAAA;IAAAC,KAAA,EAMA,SAAA2K,MAAA,EAAQ;MAAA,IAAAC,UAAA,GAAApQ,0BAAA,CACU,IAAI,CAAC6L,UAAU,CAACwB,MAAM,CAAC,CAAC;QAAAgD,MAAA;MAAA;QAAxC,KAAAD,UAAA,CAAA7C,CAAA,MAAA8C,MAAA,GAAAD,UAAA,CAAA5C,CAAA,IAAAC,IAAA,GAA0C;UAAA,IAA/BF,CAAC,GAAA8C,MAAA,CAAA7K,KAAA;UACV+H,CAAC,CAACtI,MAAM,GAAG,CAAC;QACd;MAAC,SAAA0I,GAAA;QAAAyC,UAAA,CAAAxC,CAAA,CAAAD,GAAA;MAAA;QAAAyC,UAAA,CAAAvC,CAAA;MAAA;MACD,OAAO,IAAI,CAACrC,SAAS,CAAC8E,OAAO,CAAC,IAAI9P,OAAO,CAACC,IAAI,CAAC8P,aAAa,CAAC,CAAC;IAChE;;IAEA;AACF;AACA;AACA;AACA;AACA;EALE;IAAAhL,GAAA;IAAAC,KAAA;MAAA,IAAAgL,QAAA,GAAAzQ,iBAAA,eAAAH,mBAAA,GAAA6Q,IAAA,CAMA,SAAAC,QAAA;QAAA,IAAAC,QAAA;QAAA,OAAA/Q,mBAAA,GAAAgR,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cACQL,QAAQ,GAAG,EAAE;cACnB,IAAI,CAAC9E,UAAU,CAACoF,OAAO,CAAC,UAACvE,OAAO,EAAEP,MAAM,EAAK;gBAC3C,IAAI,CAAC+E,MAAM,CAACxE,OAAO,CAAC,EAAE;kBACpBA,OAAO,GAAGA,OAAO,CAAClF,MAAM,CAAC,CAAC,EAAC;kBAC3BmJ,QAAQ,CAAC/D,IAAI,CAACpE,MAAM,CAACC,MAAM,CAAC;oBAAEiE,OAAO,EAAPA;kBAAQ,CAAC,EAAEP,MAAM,CAACnF,MAAM,CAAC,CAAC,CAAC,CAAC;gBAC5D;cACF,CAAC,CAAC;cAAA,MAEE2J,QAAQ,CAAC1L,MAAM,KAAK,CAAC;gBAAA6L,QAAA,CAAAE,IAAA;gBAAA;cAAA;cAAA,OAAAF,QAAA,CAAAK,MAAA,WAChBvL,OAAO,CAACC,OAAO,CAAC,CAAC;YAAA;cAAAiL,QAAA,CAAAE,IAAA;cAAA,OAGpB,IAAI,CAACxF,SAAS,CAAC8E,OAAO,CAC1B,IAAI9P,OAAO,CAACC,IAAI,CAAC2Q,OAAO,CAAC,CAACC,YAAY,CAAC,SAAS,EAAEV,QAAQ,CAC5D,CAAC;YAAA;YAAA;cAAA,OAAAG,QAAA,CAAAQ,IAAA;UAAA;QAAA,GAAAZ,OAAA;MAAA,CACF;MAAA,SAAAa,QAAA;QAAA,OAAAf,QAAA,CAAA3D,KAAA,OAAA7H,SAAA;MAAA;MAAA,OAAAuM,OAAA;IAAA;EAAA;EAAA,OAAApG,OAAA;AAAA;AAGH;AACA;AACA;AACA;AACA,SAAS+F,MAAMA,CAACxE,OAAO,EAAE;EACvB,OACEA,OAAO,CAACzH,MAAM,KAAK,CAAC,IACpByH,OAAO,CAAC8E,KAAK,CAAC,UAACC,CAAC;IAAA,OAAKA,CAAC,CAAC1L,IAAI,KAAKD,MAAM,CAACM,IAAI,CAACtE,KAAK,IAAI,CAAC2P,CAAC,CAACzL,QAAQ;EAAA,EAAC;AAErE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAM0L,8BAA8B,qlBAeA;;AAEpC;;AAEAC,MAAM,CAACC,OAAO,GAAG;EACf9L,MAAM,EAANA,MAAM;EAAE;EACRqF,OAAO,EAAPA,OAAO;EACPvK,MAAM,EAANA,MAAM;EACNgG,MAAM,EAANA,MAAM;EACN1F,GAAG,EAAHA,GAAG;EACHyG,QAAQ,EAARA,QAAQ;EACRrC,YAAY,EAAZA,YAAY;EACZ2C,MAAM,EAANA,MAAM;EACNE,OAAO,EAAPA,OAAO;EACPuJ,8BAA8B,EAA9BA;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}