{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n'use strict';\n\n/**\n * @fileoverview Defines WebDriver's logging system. The logging system is\n * broken into major components: local and remote logging.\n *\n * The local logging API, which is anchored by the {@linkplain Logger} class is\n * similar to Java's logging API. Loggers, retrieved by\n * {@linkplain #getLogger getLogger(name)}, use hierarchical, dot-delimited\n * namespaces (e.g. \"\" > \"webdriver\" > \"webdriver.logging\"). Recorded log\n * messages are represented by the {@linkplain Entry} class. You can capture log\n * records by {@linkplain Logger#addHandler attaching} a handler function to the\n * desired logger. For convenience, you can quickly enable logging to the\n * console by simply calling {@linkplain #installConsoleHandler\n * installConsoleHandler}.\n *\n * The [remote logging API](https://github.com/SeleniumHQ/selenium/wiki/Logging)\n * allows you to retrieve logs from a remote WebDriver server. This API uses the\n * {@link Preferences} class to define desired log levels prior to creating\n * a WebDriver session:\n *\n *     var prefs = new logging.Preferences();\n *     prefs.setLevel(logging.Type.BROWSER, logging.Level.DEBUG);\n *\n *     var caps = Capabilities.chrome();\n *     caps.setLoggingPrefs(prefs);\n *     // ...\n *\n * Remote log entries, also represented by the {@link Entry} class, may be\n * retrieved via {@link webdriver.WebDriver.Logs}:\n *\n *     driver.manage().logs().get(logging.Type.BROWSER)\n *         .then(function(entries) {\n *            entries.forEach(function(entry) {\n *              console.log('[%s] %s', entry.level.name, entry.message);\n *            });\n *         });\n *\n * **NOTE:** Only a few browsers support the remote logging API (notably\n * Firefox and Chrome). Firefox supports basic logging functionality, while\n * Chrome exposes robust\n * [performance logging](https://chromedriver.chromium.org/logging)\n * options. Remote logging is still considered a non-standard feature, and the\n * APIs exposed by this module for it are non-frozen. This module will be\n * updated, possibly breaking backwards-compatibility, once logging is\n * officially defined by the\n * [W3C WebDriver spec](http://www.w3.org/TR/webdriver/).\n */\n\n/**\n * Defines a message level that may be used to control logging output.\n *\n * @final\n */\nvar _createForOfIteratorHelper = require(\"D:/Guts/Documents/GitHub/proyecto-medset/medset/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"D:/Guts/Documents/GitHub/proyecto-medset/medset/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"D:/Guts/Documents/GitHub/proyecto-medset/medset/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar Level = /*#__PURE__*/function () {\n  /**\n   * @param {string} name the level's name.\n   * @param {number} level the level's numeric value.\n   */\n  function Level(name, level) {\n    _classCallCheck(this, Level);\n    if (level < 0) {\n      throw new TypeError('Level must be >= 0');\n    }\n\n    /** @private {string} */\n    this.name_ = name;\n\n    /** @private {number} */\n    this.value_ = level;\n  }\n\n  /** This logger's name. */\n  _createClass(Level, [{\n    key: \"name\",\n    get: function get() {\n      return this.name_;\n    }\n\n    /** The numeric log level. */\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.value_;\n    }\n\n    /** @override */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.name;\n    }\n  }]);\n  return Level;\n}();\n/**\n * Indicates no log messages should be recorded.\n * @const\n */\nLevel.OFF = new Level('OFF', Infinity);\n\n/**\n * Log messages with a level of `1000` or higher.\n * @const\n */\nLevel.SEVERE = new Level('SEVERE', 1000);\n\n/**\n * Log messages with a level of `900` or higher.\n * @const\n */\nLevel.WARNING = new Level('WARNING', 900);\n\n/**\n * Log messages with a level of `800` or higher.\n * @const\n */\nLevel.INFO = new Level('INFO', 800);\n\n/**\n * Log messages with a level of `700` or higher.\n * @const\n */\nLevel.DEBUG = new Level('DEBUG', 700);\n\n/**\n * Log messages with a level of `500` or higher.\n * @const\n */\nLevel.FINE = new Level('FINE', 500);\n\n/**\n * Log messages with a level of `400` or higher.\n * @const\n */\nLevel.FINER = new Level('FINER', 400);\n\n/**\n * Log messages with a level of `300` or higher.\n * @const\n */\nLevel.FINEST = new Level('FINEST', 300);\n\n/**\n * Indicates all log messages should be recorded.\n * @const\n */\nLevel.ALL = new Level('ALL', 0);\nvar ALL_LEVELS = /** !Set<Level> */new Set([Level.OFF, Level.SEVERE, Level.WARNING, Level.INFO, Level.DEBUG, Level.FINE, Level.FINER, Level.FINEST, Level.ALL]);\nvar LEVELS_BY_NAME = /** !Map<string, !Level> */new Map([[Level.OFF.name, Level.OFF], [Level.SEVERE.name, Level.SEVERE], [Level.WARNING.name, Level.WARNING], [Level.INFO.name, Level.INFO], [Level.DEBUG.name, Level.DEBUG], [Level.FINE.name, Level.FINE], [Level.FINER.name, Level.FINER], [Level.FINEST.name, Level.FINEST], [Level.ALL.name, Level.ALL]]);\n\n/**\n * Converts a level name or value to a {@link Level} value. If the name/value\n * is not recognized, {@link Level.ALL} will be returned.\n *\n * @param {(number|string)} nameOrValue The log level name, or value, to\n *     convert.\n * @return {!Level} The converted level.\n */\nfunction getLevel(nameOrValue) {\n  if (typeof nameOrValue === 'string') {\n    return LEVELS_BY_NAME.get(nameOrValue) || Level.ALL;\n  }\n  if (typeof nameOrValue !== 'number') {\n    throw new TypeError('not a string or number');\n  }\n  var _iterator = _createForOfIteratorHelper(ALL_LEVELS),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var level = _step.value;\n      if (nameOrValue >= level.value) {\n        return level;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return Level.ALL;\n}\n\n/**\n * Describes a single log entry.\n *\n * @final\n */\nvar Entry = /*#__PURE__*/function () {\n  /**\n   * @param {(!Level|string|number)} level The entry level.\n   * @param {string} message The log message.\n   * @param {number=} opt_timestamp The time this entry was generated, in\n   *     milliseconds since 0:00:00, January 1, 1970 UTC. If omitted, the\n   *     current time will be used.\n   * @param {string=} opt_type The log type, if known.\n   */\n  function Entry(level, message, opt_timestamp, opt_type) {\n    _classCallCheck(this, Entry);\n    this.level = level instanceof Level ? level : getLevel(level);\n    this.message = message;\n    this.timestamp = typeof opt_timestamp === 'number' ? opt_timestamp : Date.now();\n    this.type = opt_type || '';\n  }\n\n  /**\n   * @return {{level: string, message: string, timestamp: number,\n   *           type: string}} The JSON representation of this entry.\n   */\n  _createClass(Entry, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        level: this.level.name,\n        message: this.message,\n        timestamp: this.timestamp,\n        type: this.type\n      };\n    }\n  }]);\n  return Entry;\n}();\n/**\n * An object used to log debugging messages. Loggers use a hierarchical,\n * dot-separated naming scheme. For instance, \"foo\" is considered the parent of\n * the \"foo.bar\" and an ancestor of \"foo.bar.baz\".\n *\n * Each logger may be assigned a {@linkplain #setLevel log level}, which\n * controls which level of messages will be reported to the\n * {@linkplain #addHandler handlers} attached to this instance. If a log level\n * is not explicitly set on a logger, it will inherit its parent.\n *\n * This class should never be directly instantiated. Instead, users should\n * obtain logger references using the {@linkplain ./logging.getLogger()\n * getLogger()} function.\n *\n * @final\n */\nvar Logger = /*#__PURE__*/function () {\n  /**\n   * @param {string} name the name of this logger.\n   * @param {Level=} opt_level the initial level for this logger.\n   */\n  function Logger(name, opt_level) {\n    _classCallCheck(this, Logger);\n    /** @private {string} */\n    this.name_ = name;\n\n    /** @private {Level} */\n    this.level_ = opt_level || null;\n\n    /** @private {Logger} */\n    this.parent_ = null;\n\n    /** @private {Set<function(!Entry)>} */\n    this.handlers_ = null;\n  }\n\n  /** @return {string} the name of this logger. */\n  _createClass(Logger, [{\n    key: \"getName\",\n    value: function getName() {\n      return this.name_;\n    }\n\n    /**\n     * @param {Level} level the new level for this logger, or `null` if the logger\n     *     should inherit its level from its parent logger.\n     */\n  }, {\n    key: \"setLevel\",\n    value: function setLevel(level) {\n      this.level_ = level;\n    }\n\n    /** @return {Level} the log level for this logger. */\n  }, {\n    key: \"getLevel\",\n    value: function getLevel() {\n      return this.level_;\n    }\n\n    /**\n     * @return {!Level} the effective level for this logger.\n     */\n  }, {\n    key: \"getEffectiveLevel\",\n    value: function getEffectiveLevel() {\n      var logger = this;\n      var level;\n      do {\n        level = logger.level_;\n        logger = logger.parent_;\n      } while (logger && !level);\n      return level || Level.OFF;\n    }\n\n    /**\n     * @param {!Level} level the level to check.\n     * @return {boolean} whether messages recorded at the given level are loggable\n     *     by this instance.\n     */\n  }, {\n    key: \"isLoggable\",\n    value: function isLoggable(level) {\n      return level.value !== Level.OFF.value && level.value >= this.getEffectiveLevel().value;\n    }\n\n    /**\n     * Adds a handler to this logger. The handler will be invoked for each message\n     * logged with this instance, or any of its descendants.\n     *\n     * @param {function(!Entry)} handler the handler to add.\n     */\n  }, {\n    key: \"addHandler\",\n    value: function addHandler(handler) {\n      if (!this.handlers_) {\n        this.handlers_ = new Set();\n      }\n      this.handlers_.add(handler);\n    }\n\n    /**\n     * Removes a handler from this logger.\n     *\n     * @param {function(!Entry)} handler the handler to remove.\n     * @return {boolean} whether a handler was successfully removed.\n     */\n  }, {\n    key: \"removeHandler\",\n    value: function removeHandler(handler) {\n      if (!this.handlers_) {\n        return false;\n      }\n      return this.handlers_.delete(handler);\n    }\n\n    /**\n     * Logs a message at the given level. The message may be defined as a string\n     * or as a function that will return the message. If a function is provided,\n     * it will only be invoked if this logger's\n     * {@linkplain #getEffectiveLevel() effective log level} includes the given\n     * `level`.\n     *\n     * @param {!Level} level the level at which to log the message.\n     * @param {(string|function(): string)} loggable the message to log, or a\n     *     function that will return the message.\n     */\n  }, {\n    key: \"log\",\n    value: function log(level, loggable) {\n      if (!this.isLoggable(level)) {\n        return;\n      }\n      var message = '[' + this.name_ + '] ' + (typeof loggable === 'function' ? loggable() : loggable);\n      var entry = new Entry(level, message, Date.now());\n      for (var logger = this; logger; logger = logger.parent_) {\n        if (logger.handlers_) {\n          var _iterator2 = _createForOfIteratorHelper(logger.handlers_),\n            _step2;\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var handler = _step2.value;\n              handler(entry);\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n      }\n    }\n\n    /**\n     * Logs a message at the {@link Level.SEVERE} log level.\n     * @param {(string|function(): string)} loggable the message to log, or a\n     *     function that will return the message.\n     */\n  }, {\n    key: \"severe\",\n    value: function severe(loggable) {\n      this.log(Level.SEVERE, loggable);\n    }\n\n    /**\n     * Logs a message at the {@link Level.WARNING} log level.\n     * @param {(string|function(): string)} loggable the message to log, or a\n     *     function that will return the message.\n     */\n  }, {\n    key: \"warning\",\n    value: function warning(loggable) {\n      this.log(Level.WARNING, loggable);\n    }\n\n    /**\n     * Logs a message at the {@link Level.INFO} log level.\n     * @param {(string|function(): string)} loggable the message to log, or a\n     *     function that will return the message.\n     */\n  }, {\n    key: \"info\",\n    value: function info(loggable) {\n      this.log(Level.INFO, loggable);\n    }\n\n    /**\n     * Logs a message at the {@link Level.DEBUG} log level.\n     * @param {(string|function(): string)} loggable the message to log, or a\n     *     function that will return the message.\n     */\n  }, {\n    key: \"debug\",\n    value: function debug(loggable) {\n      this.log(Level.DEBUG, loggable);\n    }\n\n    /**\n     * Logs a message at the {@link Level.FINE} log level.\n     * @param {(string|function(): string)} loggable the message to log, or a\n     *     function that will return the message.\n     */\n  }, {\n    key: \"fine\",\n    value: function fine(loggable) {\n      this.log(Level.FINE, loggable);\n    }\n\n    /**\n     * Logs a message at the {@link Level.FINER} log level.\n     * @param {(string|function(): string)} loggable the message to log, or a\n     *     function that will return the message.\n     */\n  }, {\n    key: \"finer\",\n    value: function finer(loggable) {\n      this.log(Level.FINER, loggable);\n    }\n\n    /**\n     * Logs a message at the {@link Level.FINEST} log level.\n     * @param {(string|function(): string)} loggable the message to log, or a\n     *     function that will return the message.\n     */\n  }, {\n    key: \"finest\",\n    value: function finest(loggable) {\n      this.log(Level.FINEST, loggable);\n    }\n  }]);\n  return Logger;\n}();\n/**\n * Maintains a collection of loggers.\n *\n * @final\n */\nvar LogManager = /*#__PURE__*/function () {\n  function LogManager() {\n    _classCallCheck(this, LogManager);\n    /** @private {!Map<string, !Logger>} */\n    this.loggers_ = new Map();\n    this.root_ = new Logger('', Level.OFF);\n  }\n\n  /**\n   * Retrieves a named logger, creating it in the process. This function will\n   * implicitly create the requested logger, and any of its parents, if they\n   * do not yet exist.\n   *\n   * @param {string} name the logger's name.\n   * @return {!Logger} the requested logger.\n   */\n  _createClass(LogManager, [{\n    key: \"getLogger\",\n    value: function getLogger(name) {\n      if (!name) {\n        return this.root_;\n      }\n      var parent = this.root_;\n      for (var i = name.indexOf('.'); i != -1; i = name.indexOf('.', i + 1)) {\n        var parentName = name.substr(0, i);\n        parent = this.createLogger_(parentName, parent);\n      }\n      return this.createLogger_(name, parent);\n    }\n\n    /**\n     * Creates a new logger.\n     *\n     * @param {string} name the logger's name.\n     * @param {!Logger} parent the logger's parent.\n     * @return {!Logger} the new logger.\n     * @private\n     */\n  }, {\n    key: \"createLogger_\",\n    value: function createLogger_(name, parent) {\n      if (this.loggers_.has(name)) {\n        return (/** @type {!Logger} */this.loggers_.get(name)\n        );\n      }\n      var logger = new Logger(name, null);\n      logger.parent_ = parent;\n      this.loggers_.set(name, logger);\n      return logger;\n    }\n  }]);\n  return LogManager;\n}();\nvar logManager = new LogManager();\n\n/**\n * Retrieves a named logger, creating it in the process. This function will\n * implicitly create the requested logger, and any of its parents, if they\n * do not yet exist.\n *\n * The log level will be unspecified for newly created loggers. Use\n * {@link Logger#setLevel(level)} to explicitly set a level.\n *\n * @param {string} name the logger's name.\n * @return {!Logger} the requested logger.\n */\nfunction getLogger(name) {\n  return logManager.getLogger(name);\n}\n\n/**\n * Pads a number to ensure it has a minimum of two digits.\n *\n * @param {number} n the number to be padded.\n * @return {string} the padded number.\n */\nfunction pad(n) {\n  if (n >= 10) {\n    return '' + n;\n  } else {\n    return '0' + n;\n  }\n}\n\n/**\n * Logs all messages to the Console API.\n * @param {!Entry} entry the entry to log.\n */\nfunction consoleHandler(entry) {\n  if (typeof console === 'undefined' || !console) {\n    return;\n  }\n  var timestamp = new Date(entry.timestamp);\n  var msg = '[' + timestamp.getUTCFullYear() + '-' + pad(timestamp.getUTCMonth() + 1) + '-' + pad(timestamp.getUTCDate()) + 'T' + pad(timestamp.getUTCHours()) + ':' + pad(timestamp.getUTCMinutes()) + ':' + pad(timestamp.getUTCSeconds()) + 'Z] ' + '[' + entry.level.name + '] ' + entry.message;\n  var level = entry.level.value;\n  if (level >= Level.SEVERE.value) {\n    console.error(msg);\n  } else if (level >= Level.WARNING.value) {\n    console.warn(msg);\n  } else {\n    console.log(msg);\n  }\n}\n\n/**\n * Adds the console handler to the given logger. The console handler will log\n * all messages using the JavaScript Console API.\n *\n * @param {Logger=} opt_logger The logger to add the handler to; defaults\n *     to the root logger.\n */\nfunction addConsoleHandler(opt_logger) {\n  var logger = opt_logger || logManager.root_;\n  logger.addHandler(consoleHandler);\n}\n\n/**\n * Removes the console log handler from the given logger.\n *\n * @param {Logger=} opt_logger The logger to remove the handler from; defaults\n *     to the root logger.\n * @see exports.addConsoleHandler\n */\nfunction removeConsoleHandler(opt_logger) {\n  var logger = opt_logger || logManager.root_;\n  logger.removeHandler(consoleHandler);\n}\n\n/**\n * Installs the console log handler on the root logger.\n */\nfunction installConsoleHandler() {\n  addConsoleHandler(logManager.root_);\n}\n\n/**\n * Common log types.\n * @enum {string}\n */\nvar Type = {\n  /** Logs originating from the browser. */\n  BROWSER: 'browser',\n  /** Logs from a WebDriver client. */\n  CLIENT: 'client',\n  /** Logs from a WebDriver implementation. */\n  DRIVER: 'driver',\n  /** Logs related to performance. */\n  PERFORMANCE: 'performance',\n  /** Logs from the remote server. */\n  SERVER: 'server'\n};\n\n/**\n * Describes the log preferences for a WebDriver session.\n *\n * @final\n */\nvar Preferences = /*#__PURE__*/function () {\n  function Preferences() {\n    _classCallCheck(this, Preferences);\n    /** @private {!Map<string, !Level>} */\n    this.prefs_ = new Map();\n  }\n\n  /**\n   * Sets the desired logging level for a particular log type.\n   * @param {(string|Type)} type The log type.\n   * @param {(!Level|string|number)} level The desired log level.\n   * @throws {TypeError} if `type` is not a `string`.\n   */\n  _createClass(Preferences, [{\n    key: \"setLevel\",\n    value: function setLevel(type, level) {\n      if (typeof type !== 'string') {\n        throw TypeError('specified log type is not a string: ' + typeof type);\n      }\n      this.prefs_.set(type, level instanceof Level ? level : getLevel(level));\n    }\n\n    /**\n     * Converts this instance to its JSON representation.\n     * @return {!Object<string, string>} The JSON representation of this set of\n     *     preferences.\n     */\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var json = {};\n      var _iterator3 = _createForOfIteratorHelper(this.prefs_.keys()),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var key = _step3.value;\n          json[key] = this.prefs_.get(key).name;\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      return json;\n    }\n  }]);\n  return Preferences;\n}(); // PUBLIC API\nmodule.exports = {\n  Entry: Entry,\n  Level: Level,\n  LogManager: LogManager,\n  Logger: Logger,\n  Preferences: Preferences,\n  Type: Type,\n  addConsoleHandler: addConsoleHandler,\n  getLevel: getLevel,\n  getLogger: getLogger,\n  installConsoleHandler: installConsoleHandler,\n  removeConsoleHandler: removeConsoleHandler\n};","map":{"version":3,"names":["_createForOfIteratorHelper","require","default","_classCallCheck","_createClass","Level","name","level","TypeError","name_","value_","key","get","value","toString","OFF","Infinity","SEVERE","WARNING","INFO","DEBUG","FINE","FINER","FINEST","ALL","ALL_LEVELS","Set","LEVELS_BY_NAME","Map","getLevel","nameOrValue","_iterator","_step","s","n","done","err","e","f","Entry","message","opt_timestamp","opt_type","timestamp","Date","now","type","toJSON","Logger","opt_level","level_","parent_","handlers_","getName","setLevel","getEffectiveLevel","logger","isLoggable","addHandler","handler","add","removeHandler","delete","log","loggable","entry","_iterator2","_step2","severe","warning","info","debug","fine","finer","finest","LogManager","loggers_","root_","getLogger","parent","i","indexOf","parentName","substr","createLogger_","has","set","logManager","pad","consoleHandler","console","msg","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","error","warn","addConsoleHandler","opt_logger","removeConsoleHandler","installConsoleHandler","Type","BROWSER","CLIENT","DRIVER","PERFORMANCE","SERVER","Preferences","prefs_","json","_iterator3","keys","_step3","module","exports"],"sources":["D:/Guts/Documents/GitHub/proyecto-medset/medset/node_modules/selenium-webdriver/lib/logging.js"],"sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n'use strict'\n\n/**\n * @fileoverview Defines WebDriver's logging system. The logging system is\n * broken into major components: local and remote logging.\n *\n * The local logging API, which is anchored by the {@linkplain Logger} class is\n * similar to Java's logging API. Loggers, retrieved by\n * {@linkplain #getLogger getLogger(name)}, use hierarchical, dot-delimited\n * namespaces (e.g. \"\" > \"webdriver\" > \"webdriver.logging\"). Recorded log\n * messages are represented by the {@linkplain Entry} class. You can capture log\n * records by {@linkplain Logger#addHandler attaching} a handler function to the\n * desired logger. For convenience, you can quickly enable logging to the\n * console by simply calling {@linkplain #installConsoleHandler\n * installConsoleHandler}.\n *\n * The [remote logging API](https://github.com/SeleniumHQ/selenium/wiki/Logging)\n * allows you to retrieve logs from a remote WebDriver server. This API uses the\n * {@link Preferences} class to define desired log levels prior to creating\n * a WebDriver session:\n *\n *     var prefs = new logging.Preferences();\n *     prefs.setLevel(logging.Type.BROWSER, logging.Level.DEBUG);\n *\n *     var caps = Capabilities.chrome();\n *     caps.setLoggingPrefs(prefs);\n *     // ...\n *\n * Remote log entries, also represented by the {@link Entry} class, may be\n * retrieved via {@link webdriver.WebDriver.Logs}:\n *\n *     driver.manage().logs().get(logging.Type.BROWSER)\n *         .then(function(entries) {\n *            entries.forEach(function(entry) {\n *              console.log('[%s] %s', entry.level.name, entry.message);\n *            });\n *         });\n *\n * **NOTE:** Only a few browsers support the remote logging API (notably\n * Firefox and Chrome). Firefox supports basic logging functionality, while\n * Chrome exposes robust\n * [performance logging](https://chromedriver.chromium.org/logging)\n * options. Remote logging is still considered a non-standard feature, and the\n * APIs exposed by this module for it are non-frozen. This module will be\n * updated, possibly breaking backwards-compatibility, once logging is\n * officially defined by the\n * [W3C WebDriver spec](http://www.w3.org/TR/webdriver/).\n */\n\n/**\n * Defines a message level that may be used to control logging output.\n *\n * @final\n */\nclass Level {\n  /**\n   * @param {string} name the level's name.\n   * @param {number} level the level's numeric value.\n   */\n  constructor(name, level) {\n    if (level < 0) {\n      throw new TypeError('Level must be >= 0')\n    }\n\n    /** @private {string} */\n    this.name_ = name\n\n    /** @private {number} */\n    this.value_ = level\n  }\n\n  /** This logger's name. */\n  get name() {\n    return this.name_\n  }\n\n  /** The numeric log level. */\n  get value() {\n    return this.value_\n  }\n\n  /** @override */\n  toString() {\n    return this.name\n  }\n}\n\n/**\n * Indicates no log messages should be recorded.\n * @const\n */\nLevel.OFF = new Level('OFF', Infinity)\n\n/**\n * Log messages with a level of `1000` or higher.\n * @const\n */\nLevel.SEVERE = new Level('SEVERE', 1000)\n\n/**\n * Log messages with a level of `900` or higher.\n * @const\n */\nLevel.WARNING = new Level('WARNING', 900)\n\n/**\n * Log messages with a level of `800` or higher.\n * @const\n */\nLevel.INFO = new Level('INFO', 800)\n\n/**\n * Log messages with a level of `700` or higher.\n * @const\n */\nLevel.DEBUG = new Level('DEBUG', 700)\n\n/**\n * Log messages with a level of `500` or higher.\n * @const\n */\nLevel.FINE = new Level('FINE', 500)\n\n/**\n * Log messages with a level of `400` or higher.\n * @const\n */\nLevel.FINER = new Level('FINER', 400)\n\n/**\n * Log messages with a level of `300` or higher.\n * @const\n */\nLevel.FINEST = new Level('FINEST', 300)\n\n/**\n * Indicates all log messages should be recorded.\n * @const\n */\nLevel.ALL = new Level('ALL', 0)\n\nconst ALL_LEVELS = /** !Set<Level> */ new Set([\n  Level.OFF,\n  Level.SEVERE,\n  Level.WARNING,\n  Level.INFO,\n  Level.DEBUG,\n  Level.FINE,\n  Level.FINER,\n  Level.FINEST,\n  Level.ALL,\n])\n\nconst LEVELS_BY_NAME = /** !Map<string, !Level> */ new Map([\n  [Level.OFF.name, Level.OFF],\n  [Level.SEVERE.name, Level.SEVERE],\n  [Level.WARNING.name, Level.WARNING],\n  [Level.INFO.name, Level.INFO],\n  [Level.DEBUG.name, Level.DEBUG],\n  [Level.FINE.name, Level.FINE],\n  [Level.FINER.name, Level.FINER],\n  [Level.FINEST.name, Level.FINEST],\n  [Level.ALL.name, Level.ALL],\n])\n\n/**\n * Converts a level name or value to a {@link Level} value. If the name/value\n * is not recognized, {@link Level.ALL} will be returned.\n *\n * @param {(number|string)} nameOrValue The log level name, or value, to\n *     convert.\n * @return {!Level} The converted level.\n */\nfunction getLevel(nameOrValue) {\n  if (typeof nameOrValue === 'string') {\n    return LEVELS_BY_NAME.get(nameOrValue) || Level.ALL\n  }\n  if (typeof nameOrValue !== 'number') {\n    throw new TypeError('not a string or number')\n  }\n  for (let level of ALL_LEVELS) {\n    if (nameOrValue >= level.value) {\n      return level\n    }\n  }\n  return Level.ALL\n}\n\n/**\n * Describes a single log entry.\n *\n * @final\n */\nclass Entry {\n  /**\n   * @param {(!Level|string|number)} level The entry level.\n   * @param {string} message The log message.\n   * @param {number=} opt_timestamp The time this entry was generated, in\n   *     milliseconds since 0:00:00, January 1, 1970 UTC. If omitted, the\n   *     current time will be used.\n   * @param {string=} opt_type The log type, if known.\n   */\n  constructor(level, message, opt_timestamp, opt_type) {\n    this.level = level instanceof Level ? level : getLevel(level)\n    this.message = message\n    this.timestamp =\n      typeof opt_timestamp === 'number' ? opt_timestamp : Date.now()\n    this.type = opt_type || ''\n  }\n\n  /**\n   * @return {{level: string, message: string, timestamp: number,\n   *           type: string}} The JSON representation of this entry.\n   */\n  toJSON() {\n    return {\n      level: this.level.name,\n      message: this.message,\n      timestamp: this.timestamp,\n      type: this.type,\n    }\n  }\n}\n\n/**\n * An object used to log debugging messages. Loggers use a hierarchical,\n * dot-separated naming scheme. For instance, \"foo\" is considered the parent of\n * the \"foo.bar\" and an ancestor of \"foo.bar.baz\".\n *\n * Each logger may be assigned a {@linkplain #setLevel log level}, which\n * controls which level of messages will be reported to the\n * {@linkplain #addHandler handlers} attached to this instance. If a log level\n * is not explicitly set on a logger, it will inherit its parent.\n *\n * This class should never be directly instantiated. Instead, users should\n * obtain logger references using the {@linkplain ./logging.getLogger()\n * getLogger()} function.\n *\n * @final\n */\nclass Logger {\n  /**\n   * @param {string} name the name of this logger.\n   * @param {Level=} opt_level the initial level for this logger.\n   */\n  constructor(name, opt_level) {\n    /** @private {string} */\n    this.name_ = name\n\n    /** @private {Level} */\n    this.level_ = opt_level || null\n\n    /** @private {Logger} */\n    this.parent_ = null\n\n    /** @private {Set<function(!Entry)>} */\n    this.handlers_ = null\n  }\n\n  /** @return {string} the name of this logger. */\n  getName() {\n    return this.name_\n  }\n\n  /**\n   * @param {Level} level the new level for this logger, or `null` if the logger\n   *     should inherit its level from its parent logger.\n   */\n  setLevel(level) {\n    this.level_ = level\n  }\n\n  /** @return {Level} the log level for this logger. */\n  getLevel() {\n    return this.level_\n  }\n\n  /**\n   * @return {!Level} the effective level for this logger.\n   */\n  getEffectiveLevel() {\n    let logger = this\n    let level\n    do {\n      level = logger.level_\n      logger = logger.parent_\n    } while (logger && !level)\n    return level || Level.OFF\n  }\n\n  /**\n   * @param {!Level} level the level to check.\n   * @return {boolean} whether messages recorded at the given level are loggable\n   *     by this instance.\n   */\n  isLoggable(level) {\n    return (\n      level.value !== Level.OFF.value &&\n      level.value >= this.getEffectiveLevel().value\n    )\n  }\n\n  /**\n   * Adds a handler to this logger. The handler will be invoked for each message\n   * logged with this instance, or any of its descendants.\n   *\n   * @param {function(!Entry)} handler the handler to add.\n   */\n  addHandler(handler) {\n    if (!this.handlers_) {\n      this.handlers_ = new Set()\n    }\n    this.handlers_.add(handler)\n  }\n\n  /**\n   * Removes a handler from this logger.\n   *\n   * @param {function(!Entry)} handler the handler to remove.\n   * @return {boolean} whether a handler was successfully removed.\n   */\n  removeHandler(handler) {\n    if (!this.handlers_) {\n      return false\n    }\n    return this.handlers_.delete(handler)\n  }\n\n  /**\n   * Logs a message at the given level. The message may be defined as a string\n   * or as a function that will return the message. If a function is provided,\n   * it will only be invoked if this logger's\n   * {@linkplain #getEffectiveLevel() effective log level} includes the given\n   * `level`.\n   *\n   * @param {!Level} level the level at which to log the message.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  log(level, loggable) {\n    if (!this.isLoggable(level)) {\n      return\n    }\n    let message =\n      '[' +\n      this.name_ +\n      '] ' +\n      (typeof loggable === 'function' ? loggable() : loggable)\n    let entry = new Entry(level, message, Date.now())\n    for (let logger = this; logger; logger = logger.parent_) {\n      if (logger.handlers_) {\n        for (let handler of logger.handlers_) {\n          handler(entry)\n        }\n      }\n    }\n  }\n\n  /**\n   * Logs a message at the {@link Level.SEVERE} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  severe(loggable) {\n    this.log(Level.SEVERE, loggable)\n  }\n\n  /**\n   * Logs a message at the {@link Level.WARNING} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  warning(loggable) {\n    this.log(Level.WARNING, loggable)\n  }\n\n  /**\n   * Logs a message at the {@link Level.INFO} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  info(loggable) {\n    this.log(Level.INFO, loggable)\n  }\n\n  /**\n   * Logs a message at the {@link Level.DEBUG} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  debug(loggable) {\n    this.log(Level.DEBUG, loggable)\n  }\n\n  /**\n   * Logs a message at the {@link Level.FINE} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  fine(loggable) {\n    this.log(Level.FINE, loggable)\n  }\n\n  /**\n   * Logs a message at the {@link Level.FINER} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  finer(loggable) {\n    this.log(Level.FINER, loggable)\n  }\n\n  /**\n   * Logs a message at the {@link Level.FINEST} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  finest(loggable) {\n    this.log(Level.FINEST, loggable)\n  }\n}\n\n/**\n * Maintains a collection of loggers.\n *\n * @final\n */\nclass LogManager {\n  constructor() {\n    /** @private {!Map<string, !Logger>} */\n    this.loggers_ = new Map()\n    this.root_ = new Logger('', Level.OFF)\n  }\n\n  /**\n   * Retrieves a named logger, creating it in the process. This function will\n   * implicitly create the requested logger, and any of its parents, if they\n   * do not yet exist.\n   *\n   * @param {string} name the logger's name.\n   * @return {!Logger} the requested logger.\n   */\n  getLogger(name) {\n    if (!name) {\n      return this.root_\n    }\n    let parent = this.root_\n    for (let i = name.indexOf('.'); i != -1; i = name.indexOf('.', i + 1)) {\n      let parentName = name.substr(0, i)\n      parent = this.createLogger_(parentName, parent)\n    }\n    return this.createLogger_(name, parent)\n  }\n\n  /**\n   * Creates a new logger.\n   *\n   * @param {string} name the logger's name.\n   * @param {!Logger} parent the logger's parent.\n   * @return {!Logger} the new logger.\n   * @private\n   */\n  createLogger_(name, parent) {\n    if (this.loggers_.has(name)) {\n      return /** @type {!Logger} */ (this.loggers_.get(name))\n    }\n    let logger = new Logger(name, null)\n    logger.parent_ = parent\n    this.loggers_.set(name, logger)\n    return logger\n  }\n}\n\nconst logManager = new LogManager()\n\n/**\n * Retrieves a named logger, creating it in the process. This function will\n * implicitly create the requested logger, and any of its parents, if they\n * do not yet exist.\n *\n * The log level will be unspecified for newly created loggers. Use\n * {@link Logger#setLevel(level)} to explicitly set a level.\n *\n * @param {string} name the logger's name.\n * @return {!Logger} the requested logger.\n */\nfunction getLogger(name) {\n  return logManager.getLogger(name)\n}\n\n/**\n * Pads a number to ensure it has a minimum of two digits.\n *\n * @param {number} n the number to be padded.\n * @return {string} the padded number.\n */\nfunction pad(n) {\n  if (n >= 10) {\n    return '' + n\n  } else {\n    return '0' + n\n  }\n}\n\n/**\n * Logs all messages to the Console API.\n * @param {!Entry} entry the entry to log.\n */\nfunction consoleHandler(entry) {\n  if (typeof console === 'undefined' || !console) {\n    return\n  }\n\n  var timestamp = new Date(entry.timestamp)\n  var msg =\n    '[' +\n    timestamp.getUTCFullYear() +\n    '-' +\n    pad(timestamp.getUTCMonth() + 1) +\n    '-' +\n    pad(timestamp.getUTCDate()) +\n    'T' +\n    pad(timestamp.getUTCHours()) +\n    ':' +\n    pad(timestamp.getUTCMinutes()) +\n    ':' +\n    pad(timestamp.getUTCSeconds()) +\n    'Z] ' +\n    '[' +\n    entry.level.name +\n    '] ' +\n    entry.message\n\n  var level = entry.level.value\n  if (level >= Level.SEVERE.value) {\n    console.error(msg)\n  } else if (level >= Level.WARNING.value) {\n    console.warn(msg)\n  } else {\n    console.log(msg)\n  }\n}\n\n/**\n * Adds the console handler to the given logger. The console handler will log\n * all messages using the JavaScript Console API.\n *\n * @param {Logger=} opt_logger The logger to add the handler to; defaults\n *     to the root logger.\n */\nfunction addConsoleHandler(opt_logger) {\n  let logger = opt_logger || logManager.root_\n  logger.addHandler(consoleHandler)\n}\n\n/**\n * Removes the console log handler from the given logger.\n *\n * @param {Logger=} opt_logger The logger to remove the handler from; defaults\n *     to the root logger.\n * @see exports.addConsoleHandler\n */\nfunction removeConsoleHandler(opt_logger) {\n  let logger = opt_logger || logManager.root_\n  logger.removeHandler(consoleHandler)\n}\n\n/**\n * Installs the console log handler on the root logger.\n */\nfunction installConsoleHandler() {\n  addConsoleHandler(logManager.root_)\n}\n\n/**\n * Common log types.\n * @enum {string}\n */\nconst Type = {\n  /** Logs originating from the browser. */\n  BROWSER: 'browser',\n  /** Logs from a WebDriver client. */\n  CLIENT: 'client',\n  /** Logs from a WebDriver implementation. */\n  DRIVER: 'driver',\n  /** Logs related to performance. */\n  PERFORMANCE: 'performance',\n  /** Logs from the remote server. */\n  SERVER: 'server',\n}\n\n/**\n * Describes the log preferences for a WebDriver session.\n *\n * @final\n */\nclass Preferences {\n  constructor() {\n    /** @private {!Map<string, !Level>} */\n    this.prefs_ = new Map()\n  }\n\n  /**\n   * Sets the desired logging level for a particular log type.\n   * @param {(string|Type)} type The log type.\n   * @param {(!Level|string|number)} level The desired log level.\n   * @throws {TypeError} if `type` is not a `string`.\n   */\n  setLevel(type, level) {\n    if (typeof type !== 'string') {\n      throw TypeError('specified log type is not a string: ' + typeof type)\n    }\n    this.prefs_.set(type, level instanceof Level ? level : getLevel(level))\n  }\n\n  /**\n   * Converts this instance to its JSON representation.\n   * @return {!Object<string, string>} The JSON representation of this set of\n   *     preferences.\n   */\n  toJSON() {\n    let json = {}\n    for (let key of this.prefs_.keys()) {\n      json[key] = this.prefs_.get(key).name\n    }\n    return json\n  }\n}\n\n// PUBLIC API\n\nmodule.exports = {\n  Entry: Entry,\n  Level: Level,\n  LogManager: LogManager,\n  Logger: Logger,\n  Preferences: Preferences,\n  Type: Type,\n  addConsoleHandler: addConsoleHandler,\n  getLevel: getLevel,\n  getLogger: getLogger,\n  installConsoleHandler: installConsoleHandler,\n  removeConsoleHandler: removeConsoleHandler,\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}