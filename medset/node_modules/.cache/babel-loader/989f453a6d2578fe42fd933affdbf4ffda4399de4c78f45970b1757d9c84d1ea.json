{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines the {@linkplain Driver WebDriver} client for Firefox.\n * Before using this module, you must download the latest\n * [geckodriver release] and ensure it can be found on your system [PATH].\n *\n * Each FirefoxDriver instance will be created with an anonymous profile,\n * ensuring browser historys do not share session data (cookies, history, cache,\n * offline storage, etc.)\n *\n * __Customizing the Firefox Profile__\n *\n * The profile used for each WebDriver session may be configured using the\n * {@linkplain Options} class. For example, you may install an extension, like\n * Firebug:\n *\n *     const {Builder} = require('selenium-webdriver');\n *     const firefox = require('selenium-webdriver/firefox');\n *\n *     let options = new firefox.Options()\n *         .addExtensions('/path/to/firebug.xpi')\n *         .setPreference('extensions.firebug.showChromeErrors', true);\n *\n *     let driver = new Builder()\n *         .forBrowser('firefox')\n *         .setFirefoxOptions(options)\n *         .build();\n *\n * The {@linkplain Options} class may also be used to configure WebDriver based\n * on a pre-existing browser profile:\n *\n *     let profile = '/usr/local/home/bob/.mozilla/firefox/3fgog75h.testing';\n *     let options = new firefox.Options().setProfile(profile);\n *\n * The FirefoxDriver will _never_ modify a pre-existing profile; instead it will\n * create a copy for it to modify. By extension, there are certain browser\n * preferences that are required for WebDriver to function properly and they\n * will always be overwritten.\n *\n * __Using a Custom Firefox Binary__\n *\n * On Windows and MacOS, the FirefoxDriver will search for Firefox in its\n * default installation location:\n *\n * - Windows: C:\\Program Files and C:\\Program Files (x86).\n * - MacOS: /Applications/Firefox.app\n *\n * For Linux, Firefox will always be located on the PATH: `$(where firefox)`.\n *\n * Several methods are provided for starting Firefox with a custom executable.\n * First, on Windows and MacOS, you may configure WebDriver to check the default\n * install location for a non-release channel. If the requested channel cannot\n * be found in its default location, WebDriver will fallback to searching your\n * PATH. _Note:_ on Linux, Firefox is _always_ located on your path, regardless\n * of the requested channel.\n *\n *     const {Builder} = require('selenium-webdriver');\n *     const firefox = require('selenium-webdriver/firefox');\n *\n *     let options = new firefox.Options().setBinary(firefox.Channel.NIGHTLY);\n *     let driver = new Builder()\n *         .forBrowser('firefox')\n *         .setFirefoxOptions(options)\n *         .build();\n *\n * On all platforms, you may configure WebDriver to use a Firefox specific\n * executable:\n *\n *     let options = new firefox.Options()\n *         .setBinary('/my/firefox/install/dir/firefox-bin');\n *\n * __Remote Testing__\n *\n * You may customize the Firefox binary and profile when running against a\n * remote Selenium server. Your custom profile will be packaged as a zip and\n * transferred to the remote host for use. The profile will be transferred\n * _once for each new session_. The performance impact should be minimal if\n * you've only configured a few extra browser preferences. If you have a large\n * profile with several extensions, you should consider installing it on the\n * remote host and defining its path via the {@link Options} class. Custom\n * binaries are never copied to remote machines and must be referenced by\n * installation path.\n *\n *     const {Builder} = require('selenium-webdriver');\n *     const firefox = require('selenium-webdriver/firefox');\n *\n *     let options = new firefox.Options()\n *         .setProfile('/profile/path/on/remote/host')\n *         .setBinary('/install/dir/on/remote/host/firefox-bin');\n *\n *     let driver = new Builder()\n *         .forBrowser('firefox')\n *         .usingServer('http://127.0.0.1:4444/wd/hub')\n *         .setFirefoxOptions(options)\n *         .build();\n *\n * [geckodriver release]: https://github.com/mozilla/geckodriver/releases/\n * [PATH]: http://en.wikipedia.org/wiki/PATH_%28variable%29\n */\n\n'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/Guts/.jenkins/workspace/Proyecto 2/medset/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _get = require(\"C:/Users/Guts/.jenkins/workspace/Proyecto 2/medset/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"C:/Users/Guts/.jenkins/workspace/Proyecto 2/medset/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _toConsumableArray = require(\"C:/Users/Guts/.jenkins/workspace/Proyecto 2/medset/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/Guts/.jenkins/workspace/Proyecto 2/medset/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _createClass = require(\"C:/Users/Guts/.jenkins/workspace/Proyecto 2/medset/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _classCallCheck = require(\"C:/Users/Guts/.jenkins/workspace/Proyecto 2/medset/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _inherits = require(\"C:/Users/Guts/.jenkins/workspace/Proyecto 2/medset/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/Guts/.jenkins/workspace/Proyecto 2/medset/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _wrapNativeSuper = require(\"C:/Users/Guts/.jenkins/workspace/Proyecto 2/medset/node_modules/@babel/runtime/helpers/wrapNativeSuper.js\").default;\nvar fs = require('fs');\nvar path = require('path');\nvar Symbols = require('./lib/symbols');\nvar command = require('./lib/command');\nvar http = require('./http');\nvar io = require('./io');\nvar remote = require('./remote');\nvar webdriver = require('./lib/webdriver');\nvar zip = require('./io/zip');\nvar _require = require('./lib/capabilities'),\n  Browser = _require.Browser,\n  Capabilities = _require.Capabilities;\nvar _require2 = require('./io/zip'),\n  Zip = _require2.Zip;\nvar _require3 = require('./common/driverFinder'),\n  getPath = _require3.getPath;\n\n/**\n * Thrown when there an add-on is malformed.\n * @final\n */\nvar AddonFormatError = /*#__PURE__*/function (_Error) {\n  _inherits(AddonFormatError, _Error);\n  var _super = _createSuper(AddonFormatError);\n  /** @param {string} msg The error message. */\n  function AddonFormatError(msg) {\n    var _this;\n    _classCallCheck(this, AddonFormatError);\n    _this = _super.call(this, msg);\n    /** @override */\n    _this.name = _this.constructor.name;\n    return _this;\n  }\n  return _createClass(AddonFormatError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/**\n * Installs an extension to the given directory.\n * @param {string} extension Path to the xpi extension file to install.\n * @param {string} dir Path to the directory to install the extension in.\n * @return {!Promise<string>} A promise for the add-on ID once\n *     installed.\n */\nfunction installExtension(_x, _x2) {\n  return _installExtension.apply(this, arguments);\n}\nfunction _installExtension() {\n  _installExtension = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(extension, dir) {\n    var ext, archive, buf, parsedJSON, browser_specific_settings, applications;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          ext = extension.slice(-4);\n          if (!(ext !== '.xpi' && ext !== '.zip')) {\n            _context3.next = 3;\n            break;\n          }\n          throw Error('File name does not end in \".zip\" or \".xpi\": ' + ext);\n        case 3:\n          _context3.next = 5;\n          return zip.load(extension);\n        case 5:\n          archive = _context3.sent;\n          if (archive.has('manifest.json')) {\n            _context3.next = 8;\n            break;\n          }\n          throw new AddonFormatError(\"Couldn't find manifest.json in \".concat(extension));\n        case 8:\n          _context3.next = 10;\n          return archive.getFile('manifest.json');\n        case 10:\n          buf = _context3.sent;\n          parsedJSON = JSON.parse(buf.toString('utf8'));\n          browser_specific_settings = /** @type {{browser_specific_settings:{gecko:{id:string}}}} */\n          parsedJSON.browser_specific_settings;\n          if (browser_specific_settings && browser_specific_settings.gecko) {\n            /* browser_specific_settings is an alternative to applications\n             * It is meant to facilitate cross-browser plugins since Firefox48\n             * see https://bugzilla.mozilla.org/show_bug.cgi?id=1262005\n             */\n            parsedJSON.applications = browser_specific_settings;\n          }\n          applications = /** @type {{applications:{gecko:{id:string}}}} */\n          parsedJSON.applications;\n          if (applications && applications.gecko && applications.gecko.id) {\n            _context3.next = 17;\n            break;\n          }\n          throw new AddonFormatError(\"Could not find add-on ID for \".concat(extension));\n        case 17:\n          _context3.next = 19;\n          return io.copy(extension, \"\".concat(path.join(dir, applications.gecko.id), \".xpi\"));\n        case 19:\n          return _context3.abrupt(\"return\", applications.gecko.id);\n        case 20:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n  return _installExtension.apply(this, arguments);\n}\nvar Profile = /*#__PURE__*/function (_Symbols$serialize) {\n  function Profile() {\n    _classCallCheck(this, Profile);\n    /** @private {?string} */\n    this.template_ = null;\n\n    /** @private {!Array<string>} */\n    this.extensions_ = [];\n  }\n  _createClass(Profile, [{\n    key: \"addExtensions\",\n    value: function addExtensions( /** !Array<string> */paths) {\n      var _this$extensions_;\n      this.extensions_ = (_this$extensions_ = this.extensions_).concat.apply(_this$extensions_, _toConsumableArray(paths));\n    }\n\n    /**\n     * @return {(!Promise<string>|undefined)} a promise for a base64 encoded\n     *     profile, or undefined if there's no data to include.\n     */\n  }, {\n    key: _Symbols$serialize,\n    value: function value() {\n      if (this.template_ || this.extensions_.length) {\n        return buildProfile(this.template_, this.extensions_);\n      }\n      return undefined;\n    }\n  }]);\n  return Profile;\n}(Symbols.serialize);\n/**\n * @param {?string} template path to an existing profile to use as a template.\n * @param {!Array<string>} extensions paths to extensions to install in the new\n *     profile.\n * @return {!Promise<string>} a promise for the base64 encoded profile.\n */\nfunction buildProfile(_x3, _x4) {\n  return _buildProfile.apply(this, arguments);\n}\n/**\n * Configuration options for the FirefoxDriver.\n */\nfunction _buildProfile() {\n  _buildProfile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(template, extensions) {\n    var dir, extensionsDir, i, zip;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          dir = template;\n          if (!extensions.length) {\n            _context4.next = 18;\n            break;\n          }\n          _context4.next = 4;\n          return io.tmpDir();\n        case 4:\n          dir = _context4.sent;\n          if (!template) {\n            _context4.next = 8;\n            break;\n          }\n          _context4.next = 8;\n          return io.copyDir( /** @type {string} */template, dir, /(parent\\.lock|lock|\\.parentlock)/);\n        case 8:\n          extensionsDir = path.join(dir, 'extensions');\n          _context4.next = 11;\n          return io.mkdir(extensionsDir);\n        case 11:\n          i = 0;\n        case 12:\n          if (!(i < extensions.length)) {\n            _context4.next = 18;\n            break;\n          }\n          _context4.next = 15;\n          return installExtension(extensions[i], extensionsDir);\n        case 15:\n          i++;\n          _context4.next = 12;\n          break;\n        case 18:\n          zip = new Zip();\n          return _context4.abrupt(\"return\", zip.addDir(dir).then(function () {\n            return zip.toBuffer();\n          }).then(function (buf) {\n            return buf.toString('base64');\n          }));\n        case 20:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4);\n  }));\n  return _buildProfile.apply(this, arguments);\n}\nvar Options = /*#__PURE__*/function (_Capabilities) {\n  _inherits(Options, _Capabilities);\n  var _super2 = _createSuper(Options);\n  /**\n   * @param {(Capabilities|Map<string, ?>|Object)=} other Another set of\n   *     capabilities to initialize this instance from.\n   */\n  function Options(other) {\n    var _this2;\n    _classCallCheck(this, Options);\n    _this2 = _super2.call(this, other);\n    _this2.setBrowserName(Browser.FIREFOX);\n    return _this2;\n  }\n\n  /**\n   * @return {!Object}\n   * @private\n   */\n  _createClass(Options, [{\n    key: \"firefoxOptions_\",\n    value: function firefoxOptions_() {\n      var options = this.get('moz:firefoxOptions');\n      if (!options) {\n        options = {};\n        this.set('moz:firefoxOptions', options);\n      }\n      return options;\n    }\n\n    /**\n     * @return {!Profile}\n     * @private\n     */\n  }, {\n    key: \"profile_\",\n    value: function profile_() {\n      var options = this.firefoxOptions_();\n      if (!options.profile) {\n        options.profile = new Profile();\n      }\n      return options.profile;\n    }\n\n    /**\n     * Specify additional command line arguments that should be used when starting\n     * the Firefox browser.\n     *\n     * @param {...(string|!Array<string>)} args The arguments to include.\n     * @return {!Options} A self reference.\n     */\n  }, {\n    key: \"addArguments\",\n    value: function addArguments() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      if (args.length) {\n        var _options$args;\n        var options = this.firefoxOptions_();\n        options.args = options.args ? (_options$args = options.args).concat.apply(_options$args, args) : args;\n      }\n      return this;\n    }\n\n    /**\n     * @deprecated Use {@link Options#addArguments} instead.\n     * @example\n     * options.addArguments('-headless');\n     * @example\n     * Configures the geckodriver to start Firefox in headless mode.\n     *\n     * @return {!Options} A self reference.\n     */\n  }, {\n    key: \"headless\",\n    value: function headless() {\n      return this.addArguments('-headless');\n    }\n\n    /**\n     * Sets the initial window size when running in\n     * {@linkplain #headless headless} mode.\n     *\n     * @param {{width: number, height: number}} size The desired window size.\n     * @return {!Options} A self reference.\n     * @throws {TypeError} if width or height is unspecified, not a number, or\n     *     less than or equal to 0.\n     */\n  }, {\n    key: \"windowSize\",\n    value: function windowSize(_ref) {\n      var width = _ref.width,\n        height = _ref.height;\n      function checkArg(arg) {\n        if (typeof arg !== 'number' || arg <= 0) {\n          throw TypeError('Arguments must be {width, height} with numbers > 0');\n        }\n      }\n      checkArg(width);\n      checkArg(height);\n      return this.addArguments(\"--width=\".concat(width), \"--height=\".concat(height));\n    }\n\n    /**\n     * Add extensions that should be installed when starting Firefox.\n     *\n     * @param {...string} paths The paths to the extension XPI files to install.\n     * @return {!Options} A self reference.\n     */\n  }, {\n    key: \"addExtensions\",\n    value: function addExtensions() {\n      for (var _len2 = arguments.length, paths = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        paths[_key2] = arguments[_key2];\n      }\n      this.profile_().addExtensions(paths);\n      return this;\n    }\n\n    /**\n     * @param {string} key the preference key.\n     * @param {(string|number|boolean)} value the preference value.\n     * @return {!Options} A self reference.\n     * @throws {TypeError} if either the key or value has an invalid type.\n     */\n  }, {\n    key: \"setPreference\",\n    value: function setPreference(key, value) {\n      if (typeof key !== 'string') {\n        throw TypeError(\"key must be a string, but got \".concat(typeof key));\n      }\n      if (typeof value !== 'string' && typeof value !== 'number' && typeof value !== 'boolean') {\n        throw TypeError(\"value must be a string, number, or boolean, but got \".concat(typeof value));\n      }\n      var options = this.firefoxOptions_();\n      options.prefs = options.prefs || {};\n      options.prefs[key] = value;\n      return this;\n    }\n\n    /**\n     * Sets the path to an existing profile to use as a template for new browser\n     * sessions. This profile will be copied for each new session - changes will\n     * not be applied to the profile itself.\n     *\n     * @param {string} profile The profile to use.\n     * @return {!Options} A self reference.\n     * @throws {TypeError} if profile is not a string.\n     */\n  }, {\n    key: \"setProfile\",\n    value: function setProfile(profile) {\n      if (typeof profile !== 'string') {\n        throw TypeError(\"profile must be a string, but got \".concat(typeof profile));\n      }\n      this.profile_().template_ = profile;\n      return this;\n    }\n\n    /**\n     * Sets the binary to use. The binary may be specified as the path to a\n     * Firefox executable or a desired release {@link Channel}.\n     *\n     * @param {(string|!Channel)} binary The binary to use.\n     * @return {!Options} A self reference.\n     * @throws {TypeError} If `binary` is an invalid type.\n     */\n  }, {\n    key: \"setBinary\",\n    value: function setBinary(binary) {\n      if (binary instanceof Channel || typeof binary === 'string') {\n        this.firefoxOptions_().binary = binary;\n        return this;\n      }\n      throw TypeError('binary must be a string path or Channel object');\n    }\n\n    /**\n     * Enables Mobile start up features\n     *\n     * @param {string} androidPackage The package to use\n     * @return {!Options} A self reference\n     */\n  }, {\n    key: \"enableMobile\",\n    value: function enableMobile() {\n      var androidPackage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'org.mozilla.firefox';\n      var androidActivity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var deviceSerial = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      this.firefoxOptions_().androidPackage = androidPackage;\n      if (androidActivity) {\n        this.firefoxOptions_().androidActivity = androidActivity;\n      }\n      if (deviceSerial) {\n        this.firefoxOptions_().deviceSerial = deviceSerial;\n      }\n      return this;\n    }\n\n    /**\n     * Enables moz:debuggerAddress for firefox cdp\n     */\n  }, {\n    key: \"enableDebugger\",\n    value: function enableDebugger() {\n      return this.set('moz:debuggerAddress', true);\n    }\n\n    /**\n     * Enable bidi connection\n     * @returns {!Capabilities}\n     */\n  }, {\n    key: \"enableBidi\",\n    value: function enableBidi() {\n      return this.set('webSocketUrl', true);\n    }\n  }]);\n  return Options;\n}(Capabilities);\n/**\n * Enum of available command contexts.\n *\n * Command contexts are specific to Marionette, and may be used with the\n * {@link #context=} method. Contexts allow you to direct all subsequent\n * commands to either \"content\" (default) or \"chrome\". The latter gives\n * you elevated security permissions.\n *\n * @enum {string}\n */\nvar Context = {\n  CONTENT: 'content',\n  CHROME: 'chrome'\n};\nvar GECKO_DRIVER_EXE = process.platform === 'win32' ? 'geckodriver.exe' : 'geckodriver';\n\n/**\n * _Synchronously_ attempts to locate the geckodriver executable on the current\n * system.\n *\n * @return {?string} the located executable, or `null`.\n */\nfunction locateSynchronously() {\n  return io.findInPath(GECKO_DRIVER_EXE, true);\n}\n\n/**\n * @return {string} .\n * @throws {Error}\n */\nfunction findGeckoDriver() {\n  return locateSynchronously();\n}\n\n/**\n * @param {string} file Path to the file to find, relative to the program files\n *     root.\n * @return {!Promise<?string>} A promise for the located executable.\n *     The promise will resolve to {@code null} if Firefox was not found.\n */\nfunction findInProgramFiles(file) {\n  var files = [process.env['PROGRAMFILES'] || 'C:\\\\Program Files', process.env['PROGRAMFILES(X86)'] || 'C:\\\\Program Files (x86)'].map(function (prefix) {\n    return path.join(prefix, file);\n  });\n  return io.exists(files[0]).then(function (exists) {\n    return exists ? files[0] : io.exists(files[1]).then(function (exists) {\n      return exists ? files[1] : null;\n    });\n  });\n}\n\n/** @enum {string} */\nvar ExtensionCommand = {\n  GET_CONTEXT: 'getContext',\n  SET_CONTEXT: 'setContext',\n  INSTALL_ADDON: 'install addon',\n  UNINSTALL_ADDON: 'uninstall addon'\n};\n\n/**\n * Creates a command executor with support for Marionette's custom commands.\n * @param {!Promise<string>} serverUrl The server's URL.\n * @return {!command.Executor} The new command executor.\n */\nfunction createExecutor(serverUrl) {\n  var client = serverUrl.then(function (url) {\n    return new http.HttpClient(url);\n  });\n  var executor = new http.Executor(client);\n  configureExecutor(executor);\n  return executor;\n}\n\n/**\n * Configures the given executor with Firefox-specific commands.\n * @param {!http.Executor} executor the executor to configure.\n */\nfunction configureExecutor(executor) {\n  executor.defineCommand(ExtensionCommand.GET_CONTEXT, 'GET', '/session/:sessionId/moz/context');\n  executor.defineCommand(ExtensionCommand.SET_CONTEXT, 'POST', '/session/:sessionId/moz/context');\n  executor.defineCommand(ExtensionCommand.INSTALL_ADDON, 'POST', '/session/:sessionId/moz/addon/install');\n  executor.defineCommand(ExtensionCommand.UNINSTALL_ADDON, 'POST', '/session/:sessionId/moz/addon/uninstall');\n}\n\n/**\n * Creates {@link selenium-webdriver/remote.DriverService} instances that manage\n * a [geckodriver](https://github.com/mozilla/geckodriver) server in a child\n * process.\n */\nvar ServiceBuilder = /*#__PURE__*/function (_remote$DriverService) {\n  _inherits(ServiceBuilder, _remote$DriverService);\n  var _super3 = _createSuper(ServiceBuilder);\n  /**\n   * @param {string=} opt_exe Path to the server executable to use. If omitted,\n   *     the builder will attempt to locate the geckodriver on the system PATH.\n   */\n  function ServiceBuilder(opt_exe) {\n    var _this3;\n    _classCallCheck(this, ServiceBuilder);\n    _this3 = _super3.call(this, opt_exe || findGeckoDriver());\n    _this3.setLoopback(true); // Required.\n    return _this3;\n  }\n\n  /**\n   * Enables verbose logging.\n   *\n   * @param {boolean=} opt_trace Whether to enable trace-level logging. By\n   *     default, only debug logging is enabled.\n   * @return {!ServiceBuilder} A self reference.\n   */\n  _createClass(ServiceBuilder, [{\n    key: \"enableVerboseLogging\",\n    value: function enableVerboseLogging(opt_trace) {\n      return this.addArguments(opt_trace ? '-vv' : '-v');\n    }\n  }]);\n  return ServiceBuilder;\n}(remote.DriverService.Builder);\n/**\n * A WebDriver client for Firefox.\n */\nvar Driver = /*#__PURE__*/function (_webdriver$WebDriver) {\n  _inherits(Driver, _webdriver$WebDriver);\n  var _super4 = _createSuper(Driver);\n  function Driver() {\n    _classCallCheck(this, Driver);\n    return _super4.apply(this, arguments);\n  }\n  _createClass(Driver, [{\n    key: \"setFileDetector\",\n    value:\n    /**\n     * This function is a no-op as file detectors are not supported by this\n     * implementation.\n     * @override\n     */\n    function setFileDetector() {}\n\n    /**\n     * Get the context that is currently in effect.\n     *\n     * @return {!Promise<Context>} Current context.\n     */\n  }, {\n    key: \"getContext\",\n    value: function getContext() {\n      return this.execute(new command.Command(ExtensionCommand.GET_CONTEXT));\n    }\n\n    /**\n     * Changes target context for commands between chrome- and content.\n     *\n     * Changing the current context has a stateful impact on all subsequent\n     * commands. The {@link Context.CONTENT} context has normal web\n     * platform document permissions, as if you would evaluate arbitrary\n     * JavaScript. The {@link Context.CHROME} context gets elevated\n     * permissions that lets you manipulate the browser chrome itself,\n     * with full access to the XUL toolkit.\n     *\n     * Use your powers wisely.\n     *\n     * @param {!Promise<void>} ctx The context to switch to.\n     */\n  }, {\n    key: \"setContext\",\n    value: function setContext(ctx) {\n      return this.execute(new command.Command(ExtensionCommand.SET_CONTEXT).setParameter('context', ctx));\n    }\n\n    /**\n     * Installs a new addon with the current session. This function will return an\n     * ID that may later be used to {@linkplain #uninstallAddon uninstall} the\n     * addon.\n     *\n     *\n     * @param {string} path Path on the local filesystem to the web extension to\n     *     install.\n     * @param {boolean} temporary Flag indicating whether the extension should be\n     *     installed temporarily - gets removed on restart\n     * @return {!Promise<string>} A promise that will resolve to an ID for the\n     *     newly installed addon.\n     * @see #uninstallAddon\n     */\n  }, {\n    key: \"installAddon\",\n    value: function () {\n      var _installAddon = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(path) {\n        var temporary,\n          stats,\n          buf,\n          _zip,\n          _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              temporary = _args.length > 1 && _args[1] !== undefined ? _args[1] : false;\n              stats = fs.statSync(path);\n              if (!stats.isDirectory()) {\n                _context.next = 11;\n                break;\n              }\n              _zip = new Zip();\n              _context.next = 6;\n              return _zip.addDir(path);\n            case 6:\n              _context.next = 8;\n              return _zip.toBuffer('DEFLATE');\n            case 8:\n              buf = _context.sent;\n              _context.next = 14;\n              break;\n            case 11:\n              _context.next = 13;\n              return io.read(path);\n            case 13:\n              buf = _context.sent;\n            case 14:\n              return _context.abrupt(\"return\", this.execute(new command.Command(ExtensionCommand.INSTALL_ADDON).setParameter('addon', buf.toString('base64')).setParameter('temporary', temporary)));\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function installAddon(_x5) {\n        return _installAddon.apply(this, arguments);\n      }\n      return installAddon;\n    }()\n    /**\n     * Uninstalls an addon from the current browser session's profile.\n     *\n     * @param {(string|!Promise<string>)} id ID of the addon to uninstall.\n     * @return {!Promise} A promise that will resolve when the operation has\n     *     completed.\n     * @see #installAddon\n     */\n  }, {\n    key: \"uninstallAddon\",\n    value: function () {\n      var _uninstallAddon = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(id) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return Promise.resolve(id);\n            case 2:\n              id = _context2.sent;\n              return _context2.abrupt(\"return\", this.execute(new command.Command(ExtensionCommand.UNINSTALL_ADDON).setParameter('id', id)));\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function uninstallAddon(_x6) {\n        return _uninstallAddon.apply(this, arguments);\n      }\n      return uninstallAddon;\n    }()\n  }], [{\n    key: \"createSession\",\n    value:\n    /**\n     * Creates a new Firefox session.\n     *\n     * @param {(Options|Capabilities|Object)=} opt_config The\n     *    configuration options for this driver, specified as either an\n     *    {@link Options} or {@link Capabilities}, or as a raw hash object.\n     * @param {(http.Executor|remote.DriverService)=} opt_executor Either a\n     *   pre-configured command executor to use for communicating with an\n     *   externally managed remote end (which is assumed to already be running),\n     *   or the `DriverService` to use to start the geckodriver in a child\n     *   process.\n     *\n     *   If an executor is provided, care should e taken not to use reuse it with\n     *   other clients as its internal command mappings will be updated to support\n     *   Firefox-specific commands.\n     *\n     *   _This parameter may only be used with Mozilla's GeckoDriver._\n     *\n     * @throws {Error} If a custom command executor is provided and the driver is\n     *     configured to use the legacy FirefoxDriver from the Selenium project.\n     * @return {!Driver} A new driver instance.\n     */\n    function createSession(opt_config, opt_executor) {\n      var caps = opt_config instanceof Capabilities ? opt_config : new Options(opt_config);\n      var executor;\n      var onQuit;\n      if (opt_executor instanceof http.Executor) {\n        executor = opt_executor;\n        configureExecutor(executor);\n      } else if (opt_executor instanceof remote.DriverService) {\n        if (!opt_executor.getExecutable()) {\n          opt_executor.setExecutable(getPath(opt_executor, opt_config));\n        }\n        executor = createExecutor(opt_executor.start());\n        onQuit = function onQuit() {\n          return opt_executor.kill();\n        };\n      } else {\n        var service = new ServiceBuilder().build();\n        if (!service.getExecutable()) {\n          service.setExecutable(getPath(service, opt_config));\n        }\n        executor = createExecutor(service.start());\n        onQuit = function onQuit() {\n          return service.kill();\n        };\n      }\n      return (/** @type {!Driver} */_get(_getPrototypeOf(Driver), \"createSession\", this).call(this, executor, caps, onQuit)\n      );\n    }\n  }]);\n  return Driver;\n}(webdriver.WebDriver);\n/**\n * Provides methods for locating the executable for a Firefox release channel\n * on Windows and MacOS. For other systems (i.e. Linux), Firefox will always\n * be located on the system PATH.\n *\n * @final\n */\nvar Channel = /*#__PURE__*/function (_Symbols$serialize2) {\n  /**\n   * @param {string} darwin The path to check when running on MacOS.\n   * @param {string} win32 The path to check when running on Windows.\n   */\n  function Channel(darwin, win32) {\n    _classCallCheck(this, Channel);\n    /** @private @const */this.darwin_ = darwin;\n    /** @private @const */\n    this.win32_ = win32;\n    /** @private {Promise<string>} */\n    this.found_ = null;\n  }\n\n  /**\n   * Attempts to locate the Firefox executable for this release channel. This\n   * will first check the default installation location for the channel before\n   * checking the user's PATH. The returned promise will be rejected if Firefox\n   * can not be found.\n   *\n   * @return {!Promise<string>} A promise for the location of the located\n   *     Firefox executable.\n   */\n  _createClass(Channel, [{\n    key: \"locate\",\n    value: function locate() {\n      var _this4 = this;\n      if (this.found_) {\n        return this.found_;\n      }\n      var found;\n      switch (process.platform) {\n        case 'darwin':\n          found = io.exists(this.darwin_).then(function (exists) {\n            return exists ? _this4.darwin_ : io.findInPath('firefox');\n          });\n          break;\n        case 'win32':\n          found = findInProgramFiles(this.win32_).then(function (found) {\n            return found || io.findInPath('firefox.exe');\n          });\n          break;\n        default:\n          found = Promise.resolve(io.findInPath('firefox'));\n          break;\n      }\n      this.found_ = found.then(function (found) {\n        if (found) {\n          // TODO: verify version info.\n          return found;\n        }\n        throw Error('Could not locate Firefox on the current system');\n      });\n      return this.found_;\n    }\n\n    /** @return {!Promise<string>} */\n  }, {\n    key: _Symbols$serialize2,\n    value: function value() {\n      return this.locate();\n    }\n  }]);\n  return Channel;\n}(Symbols.serialize);\n/**\n * Firefox's developer channel.\n * @const\n * @see <https://www.mozilla.org/en-US/firefox/channel/desktop/#aurora>\n */\nChannel.AURORA = new Channel('/Applications/FirefoxDeveloperEdition.app/Contents/MacOS/firefox-bin', 'Firefox Developer Edition\\\\firefox.exe');\n\n/**\n * Firefox's beta channel. Note this is provided mainly for convenience as\n * the beta channel has the same installation location as the main release\n * channel.\n * @const\n * @see <https://www.mozilla.org/en-US/firefox/channel/desktop/#beta>\n */\nChannel.BETA = new Channel('/Applications/Firefox.app/Contents/MacOS/firefox-bin', 'Mozilla Firefox\\\\firefox.exe');\n\n/**\n * Firefox's release channel.\n * @const\n * @see <https://www.mozilla.org/en-US/firefox/desktop/>\n */\nChannel.RELEASE = new Channel('/Applications/Firefox.app/Contents/MacOS/firefox-bin', 'Mozilla Firefox\\\\firefox.exe');\n\n/**\n * Firefox's nightly release channel.\n * @const\n * @see <https://www.mozilla.org/en-US/firefox/channel/desktop/#nightly>\n */\nChannel.NIGHTLY = new Channel('/Applications/Firefox Nightly.app/Contents/MacOS/firefox-bin', 'Nightly\\\\firefox.exe');\n\n// PUBLIC API\n\nmodule.exports = {\n  Channel: Channel,\n  Context: Context,\n  Driver: Driver,\n  Options: Options,\n  ServiceBuilder: ServiceBuilder,\n  locateSynchronously: locateSynchronously\n};","map":{"version":3,"names":["_regeneratorRuntime","require","default","_get","_getPrototypeOf","_toConsumableArray","_asyncToGenerator","_createClass","_classCallCheck","_inherits","_createSuper","_wrapNativeSuper","fs","path","Symbols","command","http","io","remote","webdriver","zip","_require","Browser","Capabilities","_require2","Zip","_require3","getPath","AddonFormatError","_Error","_super","msg","_this","call","name","constructor","Error","installExtension","_x","_x2","_installExtension","apply","arguments","mark","_callee3","extension","dir","ext","archive","buf","parsedJSON","browser_specific_settings","applications","wrap","_callee3$","_context3","prev","next","slice","load","sent","has","concat","getFile","JSON","parse","toString","gecko","id","copy","join","abrupt","stop","Profile","_Symbols$serialize","template_","extensions_","key","value","addExtensions","paths","_this$extensions_","length","buildProfile","undefined","serialize","_x3","_x4","_buildProfile","_callee4","template","extensions","extensionsDir","i","_callee4$","_context4","tmpDir","copyDir","mkdir","addDir","then","toBuffer","Options","_Capabilities","_super2","other","_this2","setBrowserName","FIREFOX","firefoxOptions_","options","get","set","profile_","profile","addArguments","_len","args","Array","_key","_options$args","headless","windowSize","_ref","width","height","checkArg","arg","TypeError","_len2","_key2","setPreference","prefs","setProfile","setBinary","binary","Channel","enableMobile","androidPackage","androidActivity","deviceSerial","enableDebugger","enableBidi","Context","CONTENT","CHROME","GECKO_DRIVER_EXE","process","platform","locateSynchronously","findInPath","findGeckoDriver","findInProgramFiles","file","files","env","map","prefix","exists","ExtensionCommand","GET_CONTEXT","SET_CONTEXT","INSTALL_ADDON","UNINSTALL_ADDON","createExecutor","serverUrl","client","url","HttpClient","executor","Executor","configureExecutor","defineCommand","ServiceBuilder","_remote$DriverService","_super3","opt_exe","_this3","setLoopback","enableVerboseLogging","opt_trace","DriverService","Builder","Driver","_webdriver$WebDriver","_super4","setFileDetector","getContext","execute","Command","setContext","ctx","setParameter","_installAddon","_callee","temporary","stats","_zip","_args","_callee$","_context","statSync","isDirectory","read","installAddon","_x5","_uninstallAddon","_callee2","_callee2$","_context2","Promise","resolve","uninstallAddon","_x6","createSession","opt_config","opt_executor","caps","onQuit","getExecutable","setExecutable","start","kill","service","build","WebDriver","_Symbols$serialize2","darwin","win32","darwin_","win32_","found_","locate","_this4","found","AURORA","BETA","RELEASE","NIGHTLY","module","exports"],"sources":["C:/Users/Guts/.jenkins/workspace/Proyecto 2/medset/node_modules/selenium-webdriver/firefox.js"],"sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines the {@linkplain Driver WebDriver} client for Firefox.\n * Before using this module, you must download the latest\n * [geckodriver release] and ensure it can be found on your system [PATH].\n *\n * Each FirefoxDriver instance will be created with an anonymous profile,\n * ensuring browser historys do not share session data (cookies, history, cache,\n * offline storage, etc.)\n *\n * __Customizing the Firefox Profile__\n *\n * The profile used for each WebDriver session may be configured using the\n * {@linkplain Options} class. For example, you may install an extension, like\n * Firebug:\n *\n *     const {Builder} = require('selenium-webdriver');\n *     const firefox = require('selenium-webdriver/firefox');\n *\n *     let options = new firefox.Options()\n *         .addExtensions('/path/to/firebug.xpi')\n *         .setPreference('extensions.firebug.showChromeErrors', true);\n *\n *     let driver = new Builder()\n *         .forBrowser('firefox')\n *         .setFirefoxOptions(options)\n *         .build();\n *\n * The {@linkplain Options} class may also be used to configure WebDriver based\n * on a pre-existing browser profile:\n *\n *     let profile = '/usr/local/home/bob/.mozilla/firefox/3fgog75h.testing';\n *     let options = new firefox.Options().setProfile(profile);\n *\n * The FirefoxDriver will _never_ modify a pre-existing profile; instead it will\n * create a copy for it to modify. By extension, there are certain browser\n * preferences that are required for WebDriver to function properly and they\n * will always be overwritten.\n *\n * __Using a Custom Firefox Binary__\n *\n * On Windows and MacOS, the FirefoxDriver will search for Firefox in its\n * default installation location:\n *\n * - Windows: C:\\Program Files and C:\\Program Files (x86).\n * - MacOS: /Applications/Firefox.app\n *\n * For Linux, Firefox will always be located on the PATH: `$(where firefox)`.\n *\n * Several methods are provided for starting Firefox with a custom executable.\n * First, on Windows and MacOS, you may configure WebDriver to check the default\n * install location for a non-release channel. If the requested channel cannot\n * be found in its default location, WebDriver will fallback to searching your\n * PATH. _Note:_ on Linux, Firefox is _always_ located on your path, regardless\n * of the requested channel.\n *\n *     const {Builder} = require('selenium-webdriver');\n *     const firefox = require('selenium-webdriver/firefox');\n *\n *     let options = new firefox.Options().setBinary(firefox.Channel.NIGHTLY);\n *     let driver = new Builder()\n *         .forBrowser('firefox')\n *         .setFirefoxOptions(options)\n *         .build();\n *\n * On all platforms, you may configure WebDriver to use a Firefox specific\n * executable:\n *\n *     let options = new firefox.Options()\n *         .setBinary('/my/firefox/install/dir/firefox-bin');\n *\n * __Remote Testing__\n *\n * You may customize the Firefox binary and profile when running against a\n * remote Selenium server. Your custom profile will be packaged as a zip and\n * transferred to the remote host for use. The profile will be transferred\n * _once for each new session_. The performance impact should be minimal if\n * you've only configured a few extra browser preferences. If you have a large\n * profile with several extensions, you should consider installing it on the\n * remote host and defining its path via the {@link Options} class. Custom\n * binaries are never copied to remote machines and must be referenced by\n * installation path.\n *\n *     const {Builder} = require('selenium-webdriver');\n *     const firefox = require('selenium-webdriver/firefox');\n *\n *     let options = new firefox.Options()\n *         .setProfile('/profile/path/on/remote/host')\n *         .setBinary('/install/dir/on/remote/host/firefox-bin');\n *\n *     let driver = new Builder()\n *         .forBrowser('firefox')\n *         .usingServer('http://127.0.0.1:4444/wd/hub')\n *         .setFirefoxOptions(options)\n *         .build();\n *\n * [geckodriver release]: https://github.com/mozilla/geckodriver/releases/\n * [PATH]: http://en.wikipedia.org/wiki/PATH_%28variable%29\n */\n\n'use strict'\n\nconst fs = require('fs')\nconst path = require('path')\nconst Symbols = require('./lib/symbols')\nconst command = require('./lib/command')\nconst http = require('./http')\nconst io = require('./io')\nconst remote = require('./remote')\nconst webdriver = require('./lib/webdriver')\nconst zip = require('./io/zip')\nconst { Browser, Capabilities } = require('./lib/capabilities')\nconst { Zip } = require('./io/zip')\nconst { getPath } = require('./common/driverFinder')\n\n/**\n * Thrown when there an add-on is malformed.\n * @final\n */\nclass AddonFormatError extends Error {\n  /** @param {string} msg The error message. */\n  constructor(msg) {\n    super(msg)\n    /** @override */\n    this.name = this.constructor.name\n  }\n}\n\n/**\n * Installs an extension to the given directory.\n * @param {string} extension Path to the xpi extension file to install.\n * @param {string} dir Path to the directory to install the extension in.\n * @return {!Promise<string>} A promise for the add-on ID once\n *     installed.\n */\nasync function installExtension(extension, dir) {\n  const ext = extension.slice(-4)\n  if (ext !== '.xpi' && ext !== '.zip') {\n    throw Error('File name does not end in \".zip\" or \".xpi\": ' + ext)\n  }\n\n  let archive = await zip.load(extension)\n  if (!archive.has('manifest.json')) {\n    throw new AddonFormatError(`Couldn't find manifest.json in ${extension}`)\n  }\n\n  let buf = await archive.getFile('manifest.json')\n  let parsedJSON = JSON.parse(buf.toString('utf8'))\n\n  let { browser_specific_settings } =\n    /** @type {{browser_specific_settings:{gecko:{id:string}}}} */\n    parsedJSON\n\n  if (browser_specific_settings && browser_specific_settings.gecko) {\n    /* browser_specific_settings is an alternative to applications\n     * It is meant to facilitate cross-browser plugins since Firefox48\n     * see https://bugzilla.mozilla.org/show_bug.cgi?id=1262005\n     */\n    parsedJSON.applications = browser_specific_settings\n  }\n\n  let { applications } =\n    /** @type {{applications:{gecko:{id:string}}}} */\n    parsedJSON\n  if (!(applications && applications.gecko && applications.gecko.id)) {\n    throw new AddonFormatError(`Could not find add-on ID for ${extension}`)\n  }\n\n  await io.copy(extension, `${path.join(dir, applications.gecko.id)}.xpi`)\n  return applications.gecko.id\n}\n\nclass Profile {\n  constructor() {\n    /** @private {?string} */\n    this.template_ = null\n\n    /** @private {!Array<string>} */\n    this.extensions_ = []\n  }\n\n  addExtensions(/** !Array<string> */ paths) {\n    this.extensions_ = this.extensions_.concat(...paths)\n  }\n\n  /**\n   * @return {(!Promise<string>|undefined)} a promise for a base64 encoded\n   *     profile, or undefined if there's no data to include.\n   */\n  [Symbols.serialize]() {\n    if (this.template_ || this.extensions_.length) {\n      return buildProfile(this.template_, this.extensions_)\n    }\n    return undefined\n  }\n}\n\n/**\n * @param {?string} template path to an existing profile to use as a template.\n * @param {!Array<string>} extensions paths to extensions to install in the new\n *     profile.\n * @return {!Promise<string>} a promise for the base64 encoded profile.\n */\nasync function buildProfile(template, extensions) {\n  let dir = template\n\n  if (extensions.length) {\n    dir = await io.tmpDir()\n    if (template) {\n      await io.copyDir(\n        /** @type {string} */ (template),\n        dir,\n        /(parent\\.lock|lock|\\.parentlock)/\n      )\n    }\n\n    const extensionsDir = path.join(dir, 'extensions')\n    await io.mkdir(extensionsDir)\n\n    for (let i = 0; i < extensions.length; i++) {\n      await installExtension(extensions[i], extensionsDir)\n    }\n  }\n\n  let zip = new Zip()\n  return zip\n    .addDir(dir)\n    .then(() => zip.toBuffer())\n    .then((buf) => buf.toString('base64'))\n}\n\n/**\n * Configuration options for the FirefoxDriver.\n */\nclass Options extends Capabilities {\n  /**\n   * @param {(Capabilities|Map<string, ?>|Object)=} other Another set of\n   *     capabilities to initialize this instance from.\n   */\n  constructor(other) {\n    super(other)\n    this.setBrowserName(Browser.FIREFOX)\n  }\n\n  /**\n   * @return {!Object}\n   * @private\n   */\n  firefoxOptions_() {\n    let options = this.get('moz:firefoxOptions')\n    if (!options) {\n      options = {}\n      this.set('moz:firefoxOptions', options)\n    }\n    return options\n  }\n\n  /**\n   * @return {!Profile}\n   * @private\n   */\n  profile_() {\n    let options = this.firefoxOptions_()\n    if (!options.profile) {\n      options.profile = new Profile()\n    }\n    return options.profile\n  }\n\n  /**\n   * Specify additional command line arguments that should be used when starting\n   * the Firefox browser.\n   *\n   * @param {...(string|!Array<string>)} args The arguments to include.\n   * @return {!Options} A self reference.\n   */\n  addArguments(...args) {\n    if (args.length) {\n      let options = this.firefoxOptions_()\n      options.args = options.args ? options.args.concat(...args) : args\n    }\n    return this\n  }\n\n  /**\n   * @deprecated Use {@link Options#addArguments} instead.\n   * @example\n   * options.addArguments('-headless');\n   * @example\n   * Configures the geckodriver to start Firefox in headless mode.\n   *\n   * @return {!Options} A self reference.\n   */\n  headless() {\n    return this.addArguments('-headless')\n  }\n\n  /**\n   * Sets the initial window size when running in\n   * {@linkplain #headless headless} mode.\n   *\n   * @param {{width: number, height: number}} size The desired window size.\n   * @return {!Options} A self reference.\n   * @throws {TypeError} if width or height is unspecified, not a number, or\n   *     less than or equal to 0.\n   */\n  windowSize({ width, height }) {\n    function checkArg(arg) {\n      if (typeof arg !== 'number' || arg <= 0) {\n        throw TypeError('Arguments must be {width, height} with numbers > 0')\n      }\n    }\n    checkArg(width)\n    checkArg(height)\n    return this.addArguments(`--width=${width}`, `--height=${height}`)\n  }\n\n  /**\n   * Add extensions that should be installed when starting Firefox.\n   *\n   * @param {...string} paths The paths to the extension XPI files to install.\n   * @return {!Options} A self reference.\n   */\n  addExtensions(...paths) {\n    this.profile_().addExtensions(paths)\n    return this\n  }\n\n  /**\n   * @param {string} key the preference key.\n   * @param {(string|number|boolean)} value the preference value.\n   * @return {!Options} A self reference.\n   * @throws {TypeError} if either the key or value has an invalid type.\n   */\n  setPreference(key, value) {\n    if (typeof key !== 'string') {\n      throw TypeError(`key must be a string, but got ${typeof key}`)\n    }\n    if (\n      typeof value !== 'string' &&\n      typeof value !== 'number' &&\n      typeof value !== 'boolean'\n    ) {\n      throw TypeError(\n        `value must be a string, number, or boolean, but got ${typeof value}`\n      )\n    }\n    let options = this.firefoxOptions_()\n    options.prefs = options.prefs || {}\n    options.prefs[key] = value\n    return this\n  }\n\n  /**\n   * Sets the path to an existing profile to use as a template for new browser\n   * sessions. This profile will be copied for each new session - changes will\n   * not be applied to the profile itself.\n   *\n   * @param {string} profile The profile to use.\n   * @return {!Options} A self reference.\n   * @throws {TypeError} if profile is not a string.\n   */\n  setProfile(profile) {\n    if (typeof profile !== 'string') {\n      throw TypeError(`profile must be a string, but got ${typeof profile}`)\n    }\n    this.profile_().template_ = profile\n    return this\n  }\n\n  /**\n   * Sets the binary to use. The binary may be specified as the path to a\n   * Firefox executable or a desired release {@link Channel}.\n   *\n   * @param {(string|!Channel)} binary The binary to use.\n   * @return {!Options} A self reference.\n   * @throws {TypeError} If `binary` is an invalid type.\n   */\n  setBinary(binary) {\n    if (binary instanceof Channel || typeof binary === 'string') {\n      this.firefoxOptions_().binary = binary\n      return this\n    }\n    throw TypeError('binary must be a string path or Channel object')\n  }\n\n  /**\n   * Enables Mobile start up features\n   *\n   * @param {string} androidPackage The package to use\n   * @return {!Options} A self reference\n   */\n  enableMobile(\n    androidPackage = 'org.mozilla.firefox',\n    androidActivity = null,\n    deviceSerial = null\n  ) {\n    this.firefoxOptions_().androidPackage = androidPackage\n\n    if (androidActivity) {\n      this.firefoxOptions_().androidActivity = androidActivity\n    }\n    if (deviceSerial) {\n      this.firefoxOptions_().deviceSerial = deviceSerial\n    }\n    return this\n  }\n\n  /**\n   * Enables moz:debuggerAddress for firefox cdp\n   */\n  enableDebugger() {\n    return this.set('moz:debuggerAddress', true)\n  }\n\n  /**\n   * Enable bidi connection\n   * @returns {!Capabilities}\n   */\n  enableBidi() {\n    return this.set('webSocketUrl', true)\n  }\n}\n\n/**\n * Enum of available command contexts.\n *\n * Command contexts are specific to Marionette, and may be used with the\n * {@link #context=} method. Contexts allow you to direct all subsequent\n * commands to either \"content\" (default) or \"chrome\". The latter gives\n * you elevated security permissions.\n *\n * @enum {string}\n */\nconst Context = {\n  CONTENT: 'content',\n  CHROME: 'chrome',\n}\n\nconst GECKO_DRIVER_EXE =\n  process.platform === 'win32' ? 'geckodriver.exe' : 'geckodriver'\n\n/**\n * _Synchronously_ attempts to locate the geckodriver executable on the current\n * system.\n *\n * @return {?string} the located executable, or `null`.\n */\nfunction locateSynchronously() {\n  return io.findInPath(GECKO_DRIVER_EXE, true)\n}\n\n/**\n * @return {string} .\n * @throws {Error}\n */\nfunction findGeckoDriver() {\n  return locateSynchronously()\n}\n\n/**\n * @param {string} file Path to the file to find, relative to the program files\n *     root.\n * @return {!Promise<?string>} A promise for the located executable.\n *     The promise will resolve to {@code null} if Firefox was not found.\n */\nfunction findInProgramFiles(file) {\n  let files = [\n    process.env['PROGRAMFILES'] || 'C:\\\\Program Files',\n    process.env['PROGRAMFILES(X86)'] || 'C:\\\\Program Files (x86)',\n  ].map((prefix) => path.join(prefix, file))\n  return io.exists(files[0]).then(function (exists) {\n    return exists\n      ? files[0]\n      : io.exists(files[1]).then(function (exists) {\n          return exists ? files[1] : null\n        })\n  })\n}\n\n/** @enum {string} */\nconst ExtensionCommand = {\n  GET_CONTEXT: 'getContext',\n  SET_CONTEXT: 'setContext',\n  INSTALL_ADDON: 'install addon',\n  UNINSTALL_ADDON: 'uninstall addon',\n}\n\n/**\n * Creates a command executor with support for Marionette's custom commands.\n * @param {!Promise<string>} serverUrl The server's URL.\n * @return {!command.Executor} The new command executor.\n */\nfunction createExecutor(serverUrl) {\n  let client = serverUrl.then((url) => new http.HttpClient(url))\n  let executor = new http.Executor(client)\n  configureExecutor(executor)\n  return executor\n}\n\n/**\n * Configures the given executor with Firefox-specific commands.\n * @param {!http.Executor} executor the executor to configure.\n */\nfunction configureExecutor(executor) {\n  executor.defineCommand(\n    ExtensionCommand.GET_CONTEXT,\n    'GET',\n    '/session/:sessionId/moz/context'\n  )\n\n  executor.defineCommand(\n    ExtensionCommand.SET_CONTEXT,\n    'POST',\n    '/session/:sessionId/moz/context'\n  )\n\n  executor.defineCommand(\n    ExtensionCommand.INSTALL_ADDON,\n    'POST',\n    '/session/:sessionId/moz/addon/install'\n  )\n\n  executor.defineCommand(\n    ExtensionCommand.UNINSTALL_ADDON,\n    'POST',\n    '/session/:sessionId/moz/addon/uninstall'\n  )\n}\n\n/**\n * Creates {@link selenium-webdriver/remote.DriverService} instances that manage\n * a [geckodriver](https://github.com/mozilla/geckodriver) server in a child\n * process.\n */\nclass ServiceBuilder extends remote.DriverService.Builder {\n  /**\n   * @param {string=} opt_exe Path to the server executable to use. If omitted,\n   *     the builder will attempt to locate the geckodriver on the system PATH.\n   */\n  constructor(opt_exe) {\n    super(opt_exe || findGeckoDriver())\n    this.setLoopback(true) // Required.\n  }\n\n  /**\n   * Enables verbose logging.\n   *\n   * @param {boolean=} opt_trace Whether to enable trace-level logging. By\n   *     default, only debug logging is enabled.\n   * @return {!ServiceBuilder} A self reference.\n   */\n  enableVerboseLogging(opt_trace) {\n    return this.addArguments(opt_trace ? '-vv' : '-v')\n  }\n}\n\n/**\n * A WebDriver client for Firefox.\n */\nclass Driver extends webdriver.WebDriver {\n  /**\n   * Creates a new Firefox session.\n   *\n   * @param {(Options|Capabilities|Object)=} opt_config The\n   *    configuration options for this driver, specified as either an\n   *    {@link Options} or {@link Capabilities}, or as a raw hash object.\n   * @param {(http.Executor|remote.DriverService)=} opt_executor Either a\n   *   pre-configured command executor to use for communicating with an\n   *   externally managed remote end (which is assumed to already be running),\n   *   or the `DriverService` to use to start the geckodriver in a child\n   *   process.\n   *\n   *   If an executor is provided, care should e taken not to use reuse it with\n   *   other clients as its internal command mappings will be updated to support\n   *   Firefox-specific commands.\n   *\n   *   _This parameter may only be used with Mozilla's GeckoDriver._\n   *\n   * @throws {Error} If a custom command executor is provided and the driver is\n   *     configured to use the legacy FirefoxDriver from the Selenium project.\n   * @return {!Driver} A new driver instance.\n   */\n  static createSession(opt_config, opt_executor) {\n    let caps =\n      opt_config instanceof Capabilities ? opt_config : new Options(opt_config)\n\n    let executor\n    let onQuit\n\n    if (opt_executor instanceof http.Executor) {\n      executor = opt_executor\n      configureExecutor(executor)\n    } else if (opt_executor instanceof remote.DriverService) {\n      if (!opt_executor.getExecutable()) {\n        opt_executor.setExecutable(getPath(opt_executor, opt_config))\n      }\n      executor = createExecutor(opt_executor.start())\n      onQuit = () => opt_executor.kill()\n    } else {\n      let service = new ServiceBuilder().build()\n      if (!service.getExecutable()) {\n        service.setExecutable(getPath(service, opt_config))\n      }\n      executor = createExecutor(service.start())\n      onQuit = () => service.kill()\n    }\n\n    return /** @type {!Driver} */ (super.createSession(executor, caps, onQuit))\n  }\n\n  /**\n   * This function is a no-op as file detectors are not supported by this\n   * implementation.\n   * @override\n   */\n  setFileDetector() {}\n\n  /**\n   * Get the context that is currently in effect.\n   *\n   * @return {!Promise<Context>} Current context.\n   */\n  getContext() {\n    return this.execute(new command.Command(ExtensionCommand.GET_CONTEXT))\n  }\n\n  /**\n   * Changes target context for commands between chrome- and content.\n   *\n   * Changing the current context has a stateful impact on all subsequent\n   * commands. The {@link Context.CONTENT} context has normal web\n   * platform document permissions, as if you would evaluate arbitrary\n   * JavaScript. The {@link Context.CHROME} context gets elevated\n   * permissions that lets you manipulate the browser chrome itself,\n   * with full access to the XUL toolkit.\n   *\n   * Use your powers wisely.\n   *\n   * @param {!Promise<void>} ctx The context to switch to.\n   */\n  setContext(ctx) {\n    return this.execute(\n      new command.Command(ExtensionCommand.SET_CONTEXT).setParameter(\n        'context',\n        ctx\n      )\n    )\n  }\n\n  /**\n   * Installs a new addon with the current session. This function will return an\n   * ID that may later be used to {@linkplain #uninstallAddon uninstall} the\n   * addon.\n   *\n   *\n   * @param {string} path Path on the local filesystem to the web extension to\n   *     install.\n   * @param {boolean} temporary Flag indicating whether the extension should be\n   *     installed temporarily - gets removed on restart\n   * @return {!Promise<string>} A promise that will resolve to an ID for the\n   *     newly installed addon.\n   * @see #uninstallAddon\n   */\n  async installAddon(path, temporary = false) {\n    let stats = fs.statSync(path)\n    let buf\n    if (stats.isDirectory()) {\n      let zip = new Zip()\n      await zip.addDir(path)\n      buf = await zip.toBuffer('DEFLATE')\n    } else {\n      buf = await io.read(path)\n    }\n    return this.execute(\n      new command.Command(ExtensionCommand.INSTALL_ADDON)\n        .setParameter('addon', buf.toString('base64'))\n        .setParameter('temporary', temporary)\n    )\n  }\n\n  /**\n   * Uninstalls an addon from the current browser session's profile.\n   *\n   * @param {(string|!Promise<string>)} id ID of the addon to uninstall.\n   * @return {!Promise} A promise that will resolve when the operation has\n   *     completed.\n   * @see #installAddon\n   */\n  async uninstallAddon(id) {\n    id = await Promise.resolve(id)\n    return this.execute(\n      new command.Command(ExtensionCommand.UNINSTALL_ADDON).setParameter(\n        'id',\n        id\n      )\n    )\n  }\n}\n\n/**\n * Provides methods for locating the executable for a Firefox release channel\n * on Windows and MacOS. For other systems (i.e. Linux), Firefox will always\n * be located on the system PATH.\n *\n * @final\n */\nclass Channel {\n  /**\n   * @param {string} darwin The path to check when running on MacOS.\n   * @param {string} win32 The path to check when running on Windows.\n   */\n  constructor(darwin, win32) {\n    /** @private @const */ this.darwin_ = darwin\n    /** @private @const */ this.win32_ = win32\n    /** @private {Promise<string>} */\n    this.found_ = null\n  }\n\n  /**\n   * Attempts to locate the Firefox executable for this release channel. This\n   * will first check the default installation location for the channel before\n   * checking the user's PATH. The returned promise will be rejected if Firefox\n   * can not be found.\n   *\n   * @return {!Promise<string>} A promise for the location of the located\n   *     Firefox executable.\n   */\n  locate() {\n    if (this.found_) {\n      return this.found_\n    }\n\n    let found\n    switch (process.platform) {\n      case 'darwin':\n        found = io\n          .exists(this.darwin_)\n          .then((exists) => (exists ? this.darwin_ : io.findInPath('firefox')))\n        break\n\n      case 'win32':\n        found = findInProgramFiles(this.win32_).then(\n          (found) => found || io.findInPath('firefox.exe')\n        )\n        break\n\n      default:\n        found = Promise.resolve(io.findInPath('firefox'))\n        break\n    }\n\n    this.found_ = found.then((found) => {\n      if (found) {\n        // TODO: verify version info.\n        return found\n      }\n      throw Error('Could not locate Firefox on the current system')\n    })\n    return this.found_\n  }\n\n  /** @return {!Promise<string>} */\n  [Symbols.serialize]() {\n    return this.locate()\n  }\n}\n\n/**\n * Firefox's developer channel.\n * @const\n * @see <https://www.mozilla.org/en-US/firefox/channel/desktop/#aurora>\n */\nChannel.AURORA = new Channel(\n  '/Applications/FirefoxDeveloperEdition.app/Contents/MacOS/firefox-bin',\n  'Firefox Developer Edition\\\\firefox.exe'\n)\n\n/**\n * Firefox's beta channel. Note this is provided mainly for convenience as\n * the beta channel has the same installation location as the main release\n * channel.\n * @const\n * @see <https://www.mozilla.org/en-US/firefox/channel/desktop/#beta>\n */\nChannel.BETA = new Channel(\n  '/Applications/Firefox.app/Contents/MacOS/firefox-bin',\n  'Mozilla Firefox\\\\firefox.exe'\n)\n\n/**\n * Firefox's release channel.\n * @const\n * @see <https://www.mozilla.org/en-US/firefox/desktop/>\n */\nChannel.RELEASE = new Channel(\n  '/Applications/Firefox.app/Contents/MacOS/firefox-bin',\n  'Mozilla Firefox\\\\firefox.exe'\n)\n\n/**\n * Firefox's nightly release channel.\n * @const\n * @see <https://www.mozilla.org/en-US/firefox/channel/desktop/#nightly>\n */\nChannel.NIGHTLY = new Channel(\n  '/Applications/Firefox Nightly.app/Contents/MacOS/firefox-bin',\n  'Nightly\\\\firefox.exe'\n)\n\n// PUBLIC API\n\nmodule.exports = {\n  Channel,\n  Context,\n  Driver,\n  Options,\n  ServiceBuilder,\n  locateSynchronously,\n}\n"],"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}