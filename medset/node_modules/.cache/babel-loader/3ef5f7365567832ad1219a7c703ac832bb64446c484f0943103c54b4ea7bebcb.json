{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n *  This implementation is still in beta, and may change.\n *\n *  Utility to find if a given file is present and executable.\n */\n\nvar _require = require('./seleniumManager'),\n  driverLocation = _require.driverLocation;\nvar fs = require('fs');\n\n/**\n * Determines the path of the correct Selenium Manager binary\n * @returns {string}\n */\nfunction getPath(service, capabilities) {\n  try {\n    return pathExists(service.getExecutable()) || driverLocation(capabilities);\n  } catch (e) {\n    throw Error(\"Unable to obtain browser driver.\\n        For more information on how to install drivers see\\n        https://www.selenium.dev/documentation/webdriver/getting_started/install_drivers/. \".concat(e));\n  }\n}\n\n/**\n * _Synchronously_ attempts to locate the driver executable on the current\n * system.\n *\n * @param {!string} driverPath\n *\n * @return {?string} the located executable, or `null`.\n */\nfunction pathExists(driverPath) {\n  if (!driverPath || !fs.existsSync(driverPath)) {\n    return null;\n  }\n  return driverPath;\n}\n\n// PUBLIC API\nmodule.exports = {\n  getPath: getPath\n};","map":{"version":3,"names":["_require","require","driverLocation","fs","getPath","service","capabilities","pathExists","getExecutable","e","Error","concat","driverPath","existsSync","module","exports"],"sources":["D:/Guts/Documents/GitHub/proyecto-medset/medset/node_modules/selenium-webdriver/common/driverFinder.js"],"sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n *  This implementation is still in beta, and may change.\n *\n *  Utility to find if a given file is present and executable.\n */\n\nconst { driverLocation } = require('./seleniumManager')\nconst fs = require('fs')\n\n/**\n * Determines the path of the correct Selenium Manager binary\n * @returns {string}\n */\nfunction getPath(service, capabilities) {\n  try {\n    return pathExists(service.getExecutable()) || driverLocation(capabilities)\n  } catch (e) {\n    throw Error(\n      `Unable to obtain browser driver.\n        For more information on how to install drivers see\n        https://www.selenium.dev/documentation/webdriver/getting_started/install_drivers/. ${e}`\n    )\n  }\n}\n\n/**\n * _Synchronously_ attempts to locate the driver executable on the current\n * system.\n *\n * @param {!string} driverPath\n *\n * @return {?string} the located executable, or `null`.\n */\nfunction pathExists(driverPath) {\n  if (!driverPath || !fs.existsSync(driverPath)) {\n    return null\n  }\n  return driverPath\n}\n\n// PUBLIC API\nmodule.exports = { getPath }\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,IAAAA,QAAA,GAA2BC,OAAO,CAAC,mBAAmB,CAAC;EAA/CC,cAAc,GAAAF,QAAA,CAAdE,cAAc;AACtB,IAAMC,EAAE,GAAGF,OAAO,CAAC,IAAI,CAAC;;AAExB;AACA;AACA;AACA;AACA,SAASG,OAAOA,CAACC,OAAO,EAAEC,YAAY,EAAE;EACtC,IAAI;IACF,OAAOC,UAAU,CAACF,OAAO,CAACG,aAAa,CAAC,CAAC,CAAC,IAAIN,cAAc,CAACI,YAAY,CAAC;EAC5E,CAAC,CAAC,OAAOG,CAAC,EAAE;IACV,MAAMC,KAAK,6LAAAC,MAAA,CAG8EF,CAAC,CAC1F,CAAC;EACH;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,UAAUA,CAACK,UAAU,EAAE;EAC9B,IAAI,CAACA,UAAU,IAAI,CAACT,EAAE,CAACU,UAAU,CAACD,UAAU,CAAC,EAAE;IAC7C,OAAO,IAAI;EACb;EACA,OAAOA,UAAU;AACnB;;AAEA;AACAE,MAAM,CAACC,OAAO,GAAG;EAAEX,OAAO,EAAPA;AAAQ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}