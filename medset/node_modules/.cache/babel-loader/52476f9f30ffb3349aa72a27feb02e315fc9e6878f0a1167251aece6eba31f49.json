{"ast":null,"code":"import { Builder, By, Key, until } from 'selenium-webdriver';\nasync function runSeleniumTest() {\n  // Create a new WebDriver instance\n  const driver = new Builder().forBrowser('chrome').build();\n  try {\n    // Navigate to the React app\n    await driver.get('http://localhost:3000/formulario_medicos');\n\n    // Fill in the form fields\n    await driver.findElement(By.id('first_name')).sendKeys('John');\n    await driver.findElement(By.id('last_name')).sendKeys('Doe');\n    await driver.findElement(By.id('specialization')).sendKeys('Cardiology');\n    await driver.findElement(By.id('geographic_location')).sendKeys('New York');\n    await driver.findElement(By.id('credentials')).sendKeys('MD', Key.RETURN);\n\n    // Wait for success alert to appear\n    await driver.wait(until.elementLocated(By.className('swal2-icon-success')), 5000);\n\n    // Print success message\n    console.log('Form submitted successfully.');\n  } catch (error) {\n    console.error('An error occurred:', error);\n  } finally {\n    // Quit the browser\n    await driver.quit();\n  }\n}\nrunSeleniumTest();","map":{"version":3,"names":["Builder","By","Key","until","runSeleniumTest","driver","forBrowser","build","get","findElement","id","sendKeys","RETURN","wait","elementLocated","className","console","log","error","quit"],"sources":["D:/Guts/Documents/GitHub/proyecto-medset/medset/src/seleniumAutomation.js"],"sourcesContent":["import { Builder, By, Key, until } from 'selenium-webdriver';\r\n\r\nasync function runSeleniumTest() {\r\n  // Create a new WebDriver instance\r\n  const driver = new Builder().forBrowser('chrome').build();\r\n\r\n  try {\r\n    // Navigate to the React app\r\n    await driver.get('http://localhost:3000/formulario_medicos');\r\n\r\n    // Fill in the form fields\r\n    await driver.findElement(By.id('first_name')).sendKeys('John');\r\n    await driver.findElement(By.id('last_name')).sendKeys('Doe');\r\n    await driver.findElement(By.id('specialization')).sendKeys('Cardiology');\r\n    await driver.findElement(By.id('geographic_location')).sendKeys('New York');\r\n    await driver.findElement(By.id('credentials')).sendKeys('MD', Key.RETURN);\r\n\r\n    // Wait for success alert to appear\r\n    await driver.wait(until.elementLocated(By.className('swal2-icon-success')), 5000);\r\n\r\n    // Print success message\r\n    console.log('Form submitted successfully.');\r\n\r\n  } catch (error) {\r\n    console.error('An error occurred:', error);\r\n\r\n  } finally {\r\n    // Quit the browser\r\n    await driver.quit();\r\n  }\r\n}\r\n\r\nrunSeleniumTest();\r\n"],"mappings":"AAAA,SAASA,OAAO,EAAEC,EAAE,EAAEC,GAAG,EAAEC,KAAK,QAAQ,oBAAoB;AAE5D,eAAeC,eAAeA,CAAA,EAAG;EAC/B;EACA,MAAMC,MAAM,GAAG,IAAIL,OAAO,CAAC,CAAC,CAACM,UAAU,CAAC,QAAQ,CAAC,CAACC,KAAK,CAAC,CAAC;EAEzD,IAAI;IACF;IACA,MAAMF,MAAM,CAACG,GAAG,CAAC,0CAA0C,CAAC;;IAE5D;IACA,MAAMH,MAAM,CAACI,WAAW,CAACR,EAAE,CAACS,EAAE,CAAC,YAAY,CAAC,CAAC,CAACC,QAAQ,CAAC,MAAM,CAAC;IAC9D,MAAMN,MAAM,CAACI,WAAW,CAACR,EAAE,CAACS,EAAE,CAAC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,KAAK,CAAC;IAC5D,MAAMN,MAAM,CAACI,WAAW,CAACR,EAAE,CAACS,EAAE,CAAC,gBAAgB,CAAC,CAAC,CAACC,QAAQ,CAAC,YAAY,CAAC;IACxE,MAAMN,MAAM,CAACI,WAAW,CAACR,EAAE,CAACS,EAAE,CAAC,qBAAqB,CAAC,CAAC,CAACC,QAAQ,CAAC,UAAU,CAAC;IAC3E,MAAMN,MAAM,CAACI,WAAW,CAACR,EAAE,CAACS,EAAE,CAAC,aAAa,CAAC,CAAC,CAACC,QAAQ,CAAC,IAAI,EAAET,GAAG,CAACU,MAAM,CAAC;;IAEzE;IACA,MAAMP,MAAM,CAACQ,IAAI,CAACV,KAAK,CAACW,cAAc,CAACb,EAAE,CAACc,SAAS,CAAC,oBAAoB,CAAC,CAAC,EAAE,IAAI,CAAC;;IAEjF;IACAC,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;EAE7C,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;EAE5C,CAAC,SAAS;IACR;IACA,MAAMb,MAAM,CAACc,IAAI,CAAC,CAAC;EACrB;AACF;AAEAf,eAAe,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}