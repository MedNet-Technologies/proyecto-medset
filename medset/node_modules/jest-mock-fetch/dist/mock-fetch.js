"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _jestMockPromise = _interopRequireDefault(require("jest-mock-promise"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _require = require('stream'),
    PassThrough = _require.PassThrough;

/** a FIFO queue of pending request */
var _pending_requests = [];

var _newReq = function _newReq(resource, init) {
  var promise = new _jestMockPromise["default"]();

  _pending_requests.push({
    init: init,
    promise: promise,
    resource: resource
  });

  return promise;
};
/** `fetch` is called like a function, that's why we're defining it as a spy */


var MockFetch = jest.fn(_newReq);
/**
 * (LEGACY) Removes the give promise from the queue OR last promise if none was suppiled
 * @param promise
 */

MockFetch.popPromise = function (promise) {
  console.warn("MockFetch.popPromise is a legacy method - please use `MockFetch.popQueueItem` instead");
  var queueItem = MockFetch.popQueueItem(promise);
  return queueItem === null || queueItem === void 0 ? void 0 : queueItem.promise;
};
/**
 * (LEGACY) Removes the give request from the queue OR last item if none was suppiled
 * @param item
 */


MockFetch.popRequest = function (item) {
  console.warn("MockFetch.popRequest is a legacy method - please use `MockFetch.popQueueItem` instead");
  var queueItem = MockFetch.popQueueItem(item);
  return queueItem;
};
/**
 * Removes an item form the queue
 * @param requestOrPromise (optional) which queue item to remove (can be specified by given promise)
 */


MockFetch.popQueueItem = function (requestOrPromise) {
  if (requestOrPromise) {
    var ix = _pending_requests.indexOf(requestOrPromise); // IF request is not found
    // > try searching for element by promise


    if (ix === -1) {
      ix = _pending_requests.findIndex(function (_ref) {
        var promise = _ref.promise;
        return promise === requestOrPromise;
      });
    }

    if (ix === -1) {
      return;
    }

    return _pending_requests.splice(ix, 1)[0];
  } else {
    // return the last element
    return _pending_requests.shift();
  }
};
/**
 * Simulate a server response, (optionally) with the given data
 * @param responseObject (optional) response returned by the server
 * @param queueItem (optional) request promise for which response should be resolved
 * @param silentMode (optional) specifies whether the call should throw an error or
 *   only fail quietly if no matching request is found.
 */


MockFetch.mockResponse = function (responseObject, item) {
  var silentMode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var request = MockFetch.popQueueItem(item);

  if (!request && !silentMode) {
    throw new Error("No request to respond to!");
  } else if (!request) {
    return;
  }

  var _ref2 = request,
      promise = _ref2.promise,
      resource = _ref2.resource;
  var responseDefaults = {
    body: new PassThrough(),
    headers: new Headers(),
    status: 200,
    statusText: "OK",
    ok: true,
    url: resource,
    arrayBuffer: function arrayBuffer() {
      return new ArrayBuffer(0);
    },
    blob: function blob() {
      return new Blob();
    },
    clone: jest.fn(),
    error: jest.fn(),
    formData: function formData() {
      return new FormData();
    },
    json: function json() {
      return {};
    },
    redirect: jest.fn(),
    text: function text() {
      return "dummy text";
    }
  };

  var actualResponse = _objectSpread(_objectSpread({}, responseDefaults), responseObject);

  promise.resolve(actualResponse);
  return actualResponse;
};

MockFetch.mockError = function () {
  var error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var item = arguments.length > 1 ? arguments[1] : undefined;
  var silentMode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var request = MockFetch.popQueueItem(item);

  if (!request && !silentMode) {
    throw new Error("No request to respond to!");
  } else if (!request) {
    return;
  }

  var promise = request.promise; // resolving the Promise with the given response data

  promise.reject(error);
};

MockFetch.lastReqGet = function () {
  return _pending_requests[_pending_requests.length - 1];
};

MockFetch.lastPromiseGet = function () {
  var req = MockFetch.lastReqGet();
  return req ? req.promise : void 0;
};

MockFetch.getReqByUrl = function (resource) {
  return _pending_requests.slice().reverse() // reverse cloned array to return most recent req
  .find(function (x) {
    return x.resource === resource;
  });
};

MockFetch.reset = function () {
  // remove all the requests
  _pending_requests.splice(0, _pending_requests.length);
}; // this is a singleton object


var _default = MockFetch;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,